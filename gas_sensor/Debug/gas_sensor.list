
gas_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000024d0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080025dc  080025dc  000035dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002608  08002608  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002608  08002608  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002608  08002608  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002608  08002608  00003608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800260c  0800260c  0000360c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002610  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000008c  2000000c  0800261c  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000098  0800261c  00004098  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006344  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000013a7  00000000  00000000  0000a379  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006e0  00000000  00000000  0000b720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000541  00000000  00000000  0000be00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016970  00000000  00000000  0000c341  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009217  00000000  00000000  00022cb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081808  00000000  00000000  0002bec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ad6d0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b2c  00000000  00000000  000ad714  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  000af240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080025c4 	.word	0x080025c4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080025c4 	.word	0x080025c4

0800014c <ags10_crc8>:
 *  Created on: Jan 31, 2025
 *  Author: emirsatlm
 */
#include <AGS10.h>

uint8_t ags10_crc8(const uint8_t *data, int len) {
 800014c:	b480      	push	{r7}
 800014e:	b087      	sub	sp, #28
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	6039      	str	r1, [r7, #0]
    const uint8_t POLYNOMIAL = 0x31;
 8000156:	2331      	movs	r3, #49	@ 0x31
 8000158:	72fb      	strb	r3, [r7, #11]
    uint8_t crc = 0xFF;
 800015a:	23ff      	movs	r3, #255	@ 0xff
 800015c:	75fb      	strb	r3, [r7, #23]

    for (int j = 0; j < len; j++) {
 800015e:	2300      	movs	r3, #0
 8000160:	613b      	str	r3, [r7, #16]
 8000162:	e023      	b.n	80001ac <ags10_crc8+0x60>
        crc ^= data[j];
 8000164:	693b      	ldr	r3, [r7, #16]
 8000166:	687a      	ldr	r2, [r7, #4]
 8000168:	4413      	add	r3, r2
 800016a:	781a      	ldrb	r2, [r3, #0]
 800016c:	7dfb      	ldrb	r3, [r7, #23]
 800016e:	4053      	eors	r3, r2
 8000170:	75fb      	strb	r3, [r7, #23]
        for (int i = 0; i < 8; i++) {
 8000172:	2300      	movs	r3, #0
 8000174:	60fb      	str	r3, [r7, #12]
 8000176:	e013      	b.n	80001a0 <ags10_crc8+0x54>
            crc = (crc & 0x80) ? (crc << 1) ^ POLYNOMIAL : (crc << 1);
 8000178:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800017c:	2b00      	cmp	r3, #0
 800017e:	da08      	bge.n	8000192 <ags10_crc8+0x46>
 8000180:	7dfb      	ldrb	r3, [r7, #23]
 8000182:	005b      	lsls	r3, r3, #1
 8000184:	b25a      	sxtb	r2, r3
 8000186:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800018a:	4053      	eors	r3, r2
 800018c:	b25b      	sxtb	r3, r3
 800018e:	b2db      	uxtb	r3, r3
 8000190:	e002      	b.n	8000198 <ags10_crc8+0x4c>
 8000192:	7dfb      	ldrb	r3, [r7, #23]
 8000194:	005b      	lsls	r3, r3, #1
 8000196:	b2db      	uxtb	r3, r3
 8000198:	75fb      	strb	r3, [r7, #23]
        for (int i = 0; i < 8; i++) {
 800019a:	68fb      	ldr	r3, [r7, #12]
 800019c:	3301      	adds	r3, #1
 800019e:	60fb      	str	r3, [r7, #12]
 80001a0:	68fb      	ldr	r3, [r7, #12]
 80001a2:	2b07      	cmp	r3, #7
 80001a4:	dde8      	ble.n	8000178 <ags10_crc8+0x2c>
    for (int j = 0; j < len; j++) {
 80001a6:	693b      	ldr	r3, [r7, #16]
 80001a8:	3301      	adds	r3, #1
 80001aa:	613b      	str	r3, [r7, #16]
 80001ac:	693a      	ldr	r2, [r7, #16]
 80001ae:	683b      	ldr	r3, [r7, #0]
 80001b0:	429a      	cmp	r2, r3
 80001b2:	dbd7      	blt.n	8000164 <ags10_crc8+0x18>
        }
    }
    return crc;
 80001b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80001b6:	4618      	mov	r0, r3
 80001b8:	371c      	adds	r7, #28
 80001ba:	46bd      	mov	sp, r7
 80001bc:	bc80      	pop	{r7}
 80001be:	4770      	bx	lr

080001c0 <ags10_init>:

bool ags10_init(AGS10_HandleTypeDef *sensor, I2C_HandleTypeDef *hi2c, uint8_t i2c_addr) {
 80001c0:	b480      	push	{r7}
 80001c2:	b085      	sub	sp, #20
 80001c4:	af00      	add	r7, sp, #0
 80001c6:	60f8      	str	r0, [r7, #12]
 80001c8:	60b9      	str	r1, [r7, #8]
 80001ca:	4613      	mov	r3, r2
 80001cc:	71fb      	strb	r3, [r7, #7]
    sensor->hi2c = hi2c;
 80001ce:	68fb      	ldr	r3, [r7, #12]
 80001d0:	68ba      	ldr	r2, [r7, #8]
 80001d2:	601a      	str	r2, [r3, #0]
    sensor->i2c_addr = i2c_addr;
 80001d4:	68fb      	ldr	r3, [r7, #12]
 80001d6:	79fa      	ldrb	r2, [r7, #7]
 80001d8:	711a      	strb	r2, [r3, #4]
    return true;
 80001da:	2301      	movs	r3, #1
}
 80001dc:	4618      	mov	r0, r3
 80001de:	3714      	adds	r7, #20
 80001e0:	46bd      	mov	sp, r7
 80001e2:	bc80      	pop	{r7}
 80001e4:	4770      	bx	lr

080001e6 <ags10_read_register>:

bool ags10_read_register(AGS10_HandleTypeDef *sensor, uint8_t reg, uint16_t delayms, uint32_t *value) {
 80001e6:	b580      	push	{r7, lr}
 80001e8:	b088      	sub	sp, #32
 80001ea:	af02      	add	r7, sp, #8
 80001ec:	60f8      	str	r0, [r7, #12]
 80001ee:	607b      	str	r3, [r7, #4]
 80001f0:	460b      	mov	r3, r1
 80001f2:	72fb      	strb	r3, [r7, #11]
 80001f4:	4613      	mov	r3, r2
 80001f6:	813b      	strh	r3, [r7, #8]
    uint8_t buf[5];

    // Send register address
    if (HAL_I2C_Master_Transmit(sensor->hi2c, AGS10_I2C_WRITE, &reg, 1, HAL_MAX_DELAY) != HAL_OK) {
 80001f8:	68fb      	ldr	r3, [r7, #12]
 80001fa:	6818      	ldr	r0, [r3, #0]
 80001fc:	f107 020b 	add.w	r2, r7, #11
 8000200:	f04f 33ff 	mov.w	r3, #4294967295
 8000204:	9300      	str	r3, [sp, #0]
 8000206:	2301      	movs	r3, #1
 8000208:	2134      	movs	r1, #52	@ 0x34
 800020a:	f000 fec3 	bl	8000f94 <HAL_I2C_Master_Transmit>
 800020e:	4603      	mov	r3, r0
 8000210:	2b00      	cmp	r3, #0
 8000212:	d001      	beq.n	8000218 <ags10_read_register+0x32>
        return false;
 8000214:	2300      	movs	r3, #0
 8000216:	e02e      	b.n	8000276 <ags10_read_register+0x90>
    }

    HAL_Delay(delayms);
 8000218:	893b      	ldrh	r3, [r7, #8]
 800021a:	4618      	mov	r0, r3
 800021c:	f000 fad2 	bl	80007c4 <HAL_Delay>

    // Receive 5 bytes (4 data + 1 CRC)
    if (HAL_I2C_Master_Receive(sensor->hi2c, AGS10_I2C_READ, buf, 5, HAL_MAX_DELAY) != HAL_OK) {
 8000220:	68fb      	ldr	r3, [r7, #12]
 8000222:	6818      	ldr	r0, [r3, #0]
 8000224:	f107 0210 	add.w	r2, r7, #16
 8000228:	f04f 33ff 	mov.w	r3, #4294967295
 800022c:	9300      	str	r3, [sp, #0]
 800022e:	2305      	movs	r3, #5
 8000230:	2135      	movs	r1, #53	@ 0x35
 8000232:	f000 ffad 	bl	8001190 <HAL_I2C_Master_Receive>
 8000236:	4603      	mov	r3, r0
 8000238:	2b00      	cmp	r3, #0
 800023a:	d001      	beq.n	8000240 <ags10_read_register+0x5a>
        return false;
 800023c:	2300      	movs	r3, #0
 800023e:	e01a      	b.n	8000276 <ags10_read_register+0x90>
    }

    if (ags10_crc8(buf, 4) != buf[4]) {
 8000240:	f107 0310 	add.w	r3, r7, #16
 8000244:	2104      	movs	r1, #4
 8000246:	4618      	mov	r0, r3
 8000248:	f7ff ff80 	bl	800014c <ags10_crc8>
 800024c:	4603      	mov	r3, r0
 800024e:	461a      	mov	r2, r3
 8000250:	7d3b      	ldrb	r3, [r7, #20]
 8000252:	429a      	cmp	r2, r3
 8000254:	d001      	beq.n	800025a <ags10_read_register+0x74>
        return false;  // CRC mismatch
 8000256:	2300      	movs	r3, #0
 8000258:	e00d      	b.n	8000276 <ags10_read_register+0x90>
    }

    *value = (buf[0] << 24) | (buf[1] << 16) | (buf[2] << 8) | buf[3];
 800025a:	7c3b      	ldrb	r3, [r7, #16]
 800025c:	061a      	lsls	r2, r3, #24
 800025e:	7c7b      	ldrb	r3, [r7, #17]
 8000260:	041b      	lsls	r3, r3, #16
 8000262:	431a      	orrs	r2, r3
 8000264:	7cbb      	ldrb	r3, [r7, #18]
 8000266:	021b      	lsls	r3, r3, #8
 8000268:	4313      	orrs	r3, r2
 800026a:	7cfa      	ldrb	r2, [r7, #19]
 800026c:	4313      	orrs	r3, r2
 800026e:	461a      	mov	r2, r3
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	601a      	str	r2, [r3, #0]
    return true;
 8000274:	2301      	movs	r3, #1
}
 8000276:	4618      	mov	r0, r3
 8000278:	3718      	adds	r7, #24
 800027a:	46bd      	mov	sp, r7
 800027c:	bd80      	pop	{r7, pc}

0800027e <ags10_get_firmware_version>:

bool ags10_get_firmware_version(AGS10_HandleTypeDef *sensor, uint32_t *version) {
 800027e:	b580      	push	{r7, lr}
 8000280:	b082      	sub	sp, #8
 8000282:	af00      	add	r7, sp, #0
 8000284:	6078      	str	r0, [r7, #4]
 8000286:	6039      	str	r1, [r7, #0]
    return ags10_read_register(sensor, AGS10_VERSION_REG, 30, version);
 8000288:	683b      	ldr	r3, [r7, #0]
 800028a:	221e      	movs	r2, #30
 800028c:	2111      	movs	r1, #17
 800028e:	6878      	ldr	r0, [r7, #4]
 8000290:	f7ff ffa9 	bl	80001e6 <ags10_read_register>
 8000294:	4603      	mov	r3, r0
}
 8000296:	4618      	mov	r0, r3
 8000298:	3708      	adds	r7, #8
 800029a:	46bd      	mov	sp, r7
 800029c:	bd80      	pop	{r7, pc}

0800029e <ags10_get_gas_resistance>:

bool ags10_get_gas_resistance(AGS10_HandleTypeDef *sensor, uint32_t *resistance) {
 800029e:	b580      	push	{r7, lr}
 80002a0:	b082      	sub	sp, #8
 80002a2:	af00      	add	r7, sp, #0
 80002a4:	6078      	str	r0, [r7, #4]
 80002a6:	6039      	str	r1, [r7, #0]
    if (!ags10_read_register(sensor, AGS10_GASRES_REG, 1000, resistance)) {
 80002a8:	683b      	ldr	r3, [r7, #0]
 80002aa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80002ae:	2120      	movs	r1, #32
 80002b0:	6878      	ldr	r0, [r7, #4]
 80002b2:	f7ff ff98 	bl	80001e6 <ags10_read_register>
 80002b6:	4603      	mov	r3, r0
 80002b8:	f083 0301 	eor.w	r3, r3, #1
 80002bc:	b2db      	uxtb	r3, r3
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d005      	beq.n	80002ce <ags10_get_gas_resistance+0x30>
        *resistance = 0xFFFFFFFF;
 80002c2:	683b      	ldr	r3, [r7, #0]
 80002c4:	f04f 32ff 	mov.w	r2, #4294967295
 80002c8:	601a      	str	r2, [r3, #0]
        return false;
 80002ca:	2300      	movs	r3, #0
 80002cc:	e007      	b.n	80002de <ags10_get_gas_resistance+0x40>
    }
    *resistance *= 100;
 80002ce:	683b      	ldr	r3, [r7, #0]
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	2264      	movs	r2, #100	@ 0x64
 80002d4:	fb03 f202 	mul.w	r2, r3, r2
 80002d8:	683b      	ldr	r3, [r7, #0]
 80002da:	601a      	str	r2, [r3, #0]
    return true;
 80002dc:	2301      	movs	r3, #1
}
 80002de:	4618      	mov	r0, r3
 80002e0:	3708      	adds	r7, #8
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}

080002e6 <ags10_get_tvoc>:

bool ags10_get_tvoc(AGS10_HandleTypeDef *sensor, uint32_t *tvoc) {
 80002e6:	b580      	push	{r7, lr}
 80002e8:	b082      	sub	sp, #8
 80002ea:	af00      	add	r7, sp, #0
 80002ec:	6078      	str	r0, [r7, #4]
 80002ee:	6039      	str	r1, [r7, #0]
    if (!ags10_read_register(sensor, AGS10_TVOCSTAT_REG, 1000, tvoc)) {
 80002f0:	683b      	ldr	r3, [r7, #0]
 80002f2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80002f6:	2100      	movs	r1, #0
 80002f8:	6878      	ldr	r0, [r7, #4]
 80002fa:	f7ff ff74 	bl	80001e6 <ags10_read_register>
 80002fe:	4603      	mov	r3, r0
 8000300:	f083 0301 	eor.w	r3, r3, #1
 8000304:	b2db      	uxtb	r3, r3
 8000306:	2b00      	cmp	r3, #0
 8000308:	d005      	beq.n	8000316 <ags10_get_tvoc+0x30>
        *tvoc = 0xFFFFFFFF; // Indicate failure
 800030a:	683b      	ldr	r3, [r7, #0]
 800030c:	f04f 32ff 	mov.w	r2, #4294967295
 8000310:	601a      	str	r2, [r3, #0]
        return false;
 8000312:	2300      	movs	r3, #0
 8000314:	e006      	b.n	8000324 <ags10_get_tvoc+0x3e>
    }
    *tvoc &= 0xFFFFFF;
 8000316:	683b      	ldr	r3, [r7, #0]
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 800031e:	683b      	ldr	r3, [r7, #0]
 8000320:	601a      	str	r2, [r3, #0]
    return true;
 8000322:	2301      	movs	r3, #1
}
 8000324:	4618      	mov	r0, r3
 8000326:	3708      	adds	r7, #8
 8000328:	46bd      	mov	sp, r7
 800032a:	bd80      	pop	{r7, pc}

0800032c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 8000330:	f000 f9e6 	bl	8000700 <HAL_Init>

  /* USER CODE BEGIN Init */
  if (ags10_init(&ags_sensor, &hi2c2, AGS10_I2C_ADDR_DEFAULT)) {
 8000334:	221a      	movs	r2, #26
 8000336:	491e      	ldr	r1, [pc, #120]	@ (80003b0 <main+0x84>)
 8000338:	481e      	ldr	r0, [pc, #120]	@ (80003b4 <main+0x88>)
 800033a:	f7ff ff41 	bl	80001c0 <ags10_init>
 800033e:	4603      	mov	r3, r0
 8000340:	2b00      	cmp	r3, #0
 8000342:	d00a      	beq.n	800035a <main+0x2e>
          sensor_initialized = 1;
 8000344:	4b1c      	ldr	r3, [pc, #112]	@ (80003b8 <main+0x8c>)
 8000346:	2201      	movs	r2, #1
 8000348:	701a      	strb	r2, [r3, #0]
      } else {
          sensor_initialized = 0;
          while (1); // Halt execution if sensor init fails
      }

      if (ags10_get_firmware_version(&ags_sensor, &firmware_version)) {
 800034a:	491c      	ldr	r1, [pc, #112]	@ (80003bc <main+0x90>)
 800034c:	4819      	ldr	r0, [pc, #100]	@ (80003b4 <main+0x88>)
 800034e:	f7ff ff96 	bl	800027e <ags10_get_firmware_version>
 8000352:	4603      	mov	r3, r0
 8000354:	2b00      	cmp	r3, #0
 8000356:	d008      	beq.n	800036a <main+0x3e>
 8000358:	e004      	b.n	8000364 <main+0x38>
          sensor_initialized = 0;
 800035a:	4b17      	ldr	r3, [pc, #92]	@ (80003b8 <main+0x8c>)
 800035c:	2200      	movs	r2, #0
 800035e:	701a      	strb	r2, [r3, #0]
          while (1); // Halt execution if sensor init fails
 8000360:	bf00      	nop
 8000362:	e7fd      	b.n	8000360 <main+0x34>
          sensor_initialized = 2;  // Mark as fully initialized
 8000364:	4b14      	ldr	r3, [pc, #80]	@ (80003b8 <main+0x8c>)
 8000366:	2202      	movs	r2, #2
 8000368:	701a      	strb	r2, [r3, #0]
      }

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800036a:	f000 f82d 	bl	80003c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800036e:	f000 f89f 	bl	80004b0 <MX_GPIO_Init>
  MX_I2C2_Init();
 8000372:	f000 f86f 	bl	8000454 <MX_I2C2_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (!ags10_get_gas_resistance(&ags_sensor, &gas_resistance))
 8000376:	4912      	ldr	r1, [pc, #72]	@ (80003c0 <main+0x94>)
 8000378:	480e      	ldr	r0, [pc, #56]	@ (80003b4 <main+0x88>)
 800037a:	f7ff ff90 	bl	800029e <ags10_get_gas_resistance>
 800037e:	4603      	mov	r3, r0
 8000380:	f083 0301 	eor.w	r3, r3, #1
 8000384:	b2db      	uxtb	r3, r3
 8000386:	2b00      	cmp	r3, #0
 8000388:	d003      	beq.n	8000392 <main+0x66>
	  {
		  gas_resistance = 0xFFFFFFFF; // Indicate error
 800038a:	4b0d      	ldr	r3, [pc, #52]	@ (80003c0 <main+0x94>)
 800038c:	f04f 32ff 	mov.w	r2, #4294967295
 8000390:	601a      	str	r2, [r3, #0]
	  }

	  if (!ags10_get_tvoc(&ags_sensor, &tvoc))
 8000392:	490c      	ldr	r1, [pc, #48]	@ (80003c4 <main+0x98>)
 8000394:	4807      	ldr	r0, [pc, #28]	@ (80003b4 <main+0x88>)
 8000396:	f7ff ffa6 	bl	80002e6 <ags10_get_tvoc>
 800039a:	4603      	mov	r3, r0
 800039c:	f083 0301 	eor.w	r3, r3, #1
 80003a0:	b2db      	uxtb	r3, r3
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d0e7      	beq.n	8000376 <main+0x4a>
	  {
		  tvoc = 0xFFFFFFFF; // Indicate error
 80003a6:	4b07      	ldr	r3, [pc, #28]	@ (80003c4 <main+0x98>)
 80003a8:	f04f 32ff 	mov.w	r2, #4294967295
 80003ac:	601a      	str	r2, [r3, #0]
	  if (!ags10_get_gas_resistance(&ags_sensor, &gas_resistance))
 80003ae:	e7e2      	b.n	8000376 <main+0x4a>
 80003b0:	20000030 	.word	0x20000030
 80003b4:	20000028 	.word	0x20000028
 80003b8:	20000090 	.word	0x20000090
 80003bc:	2000008c 	.word	0x2000008c
 80003c0:	20000084 	.word	0x20000084
 80003c4:	20000088 	.word	0x20000088

080003c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b090      	sub	sp, #64	@ 0x40
 80003cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003ce:	f107 0318 	add.w	r3, r7, #24
 80003d2:	2228      	movs	r2, #40	@ 0x28
 80003d4:	2100      	movs	r1, #0
 80003d6:	4618      	mov	r0, r3
 80003d8:	f002 f8c8 	bl	800256c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003dc:	1d3b      	adds	r3, r7, #4
 80003de:	2200      	movs	r2, #0
 80003e0:	601a      	str	r2, [r3, #0]
 80003e2:	605a      	str	r2, [r3, #4]
 80003e4:	609a      	str	r2, [r3, #8]
 80003e6:	60da      	str	r2, [r3, #12]
 80003e8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003ea:	2301      	movs	r3, #1
 80003ec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003ee:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80003f2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003f4:	2300      	movs	r3, #0
 80003f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003f8:	2301      	movs	r3, #1
 80003fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003fc:	2302      	movs	r3, #2
 80003fe:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000400:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000404:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000406:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800040a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800040c:	f107 0318 	add.w	r3, r7, #24
 8000410:	4618      	mov	r0, r3
 8000412:	f001 fcaf 	bl	8001d74 <HAL_RCC_OscConfig>
 8000416:	4603      	mov	r3, r0
 8000418:	2b00      	cmp	r3, #0
 800041a:	d001      	beq.n	8000420 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800041c:	f000 f8a0 	bl	8000560 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000420:	230f      	movs	r3, #15
 8000422:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000424:	2302      	movs	r3, #2
 8000426:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000428:	2300      	movs	r3, #0
 800042a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800042c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000430:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000432:	2300      	movs	r3, #0
 8000434:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000436:	1d3b      	adds	r3, r7, #4
 8000438:	2102      	movs	r1, #2
 800043a:	4618      	mov	r0, r3
 800043c:	f001 ff1c 	bl	8002278 <HAL_RCC_ClockConfig>
 8000440:	4603      	mov	r3, r0
 8000442:	2b00      	cmp	r3, #0
 8000444:	d001      	beq.n	800044a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000446:	f000 f88b 	bl	8000560 <Error_Handler>
  }
}
 800044a:	bf00      	nop
 800044c:	3740      	adds	r7, #64	@ 0x40
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}
	...

08000454 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000458:	4b13      	ldr	r3, [pc, #76]	@ (80004a8 <MX_I2C2_Init+0x54>)
 800045a:	4a14      	ldr	r2, [pc, #80]	@ (80004ac <MX_I2C2_Init+0x58>)
 800045c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 20000;
 800045e:	4b12      	ldr	r3, [pc, #72]	@ (80004a8 <MX_I2C2_Init+0x54>)
 8000460:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000464:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000466:	4b10      	ldr	r3, [pc, #64]	@ (80004a8 <MX_I2C2_Init+0x54>)
 8000468:	2200      	movs	r2, #0
 800046a:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800046c:	4b0e      	ldr	r3, [pc, #56]	@ (80004a8 <MX_I2C2_Init+0x54>)
 800046e:	2200      	movs	r2, #0
 8000470:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000472:	4b0d      	ldr	r3, [pc, #52]	@ (80004a8 <MX_I2C2_Init+0x54>)
 8000474:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000478:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800047a:	4b0b      	ldr	r3, [pc, #44]	@ (80004a8 <MX_I2C2_Init+0x54>)
 800047c:	2200      	movs	r2, #0
 800047e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000480:	4b09      	ldr	r3, [pc, #36]	@ (80004a8 <MX_I2C2_Init+0x54>)
 8000482:	2200      	movs	r2, #0
 8000484:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000486:	4b08      	ldr	r3, [pc, #32]	@ (80004a8 <MX_I2C2_Init+0x54>)
 8000488:	2200      	movs	r2, #0
 800048a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800048c:	4b06      	ldr	r3, [pc, #24]	@ (80004a8 <MX_I2C2_Init+0x54>)
 800048e:	2200      	movs	r2, #0
 8000490:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000492:	4805      	ldr	r0, [pc, #20]	@ (80004a8 <MX_I2C2_Init+0x54>)
 8000494:	f000 fc3a 	bl	8000d0c <HAL_I2C_Init>
 8000498:	4603      	mov	r3, r0
 800049a:	2b00      	cmp	r3, #0
 800049c:	d001      	beq.n	80004a2 <MX_I2C2_Init+0x4e>
  {
    Error_Handler();
 800049e:	f000 f85f 	bl	8000560 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80004a2:	bf00      	nop
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop
 80004a8:	20000030 	.word	0x20000030
 80004ac:	40005800 	.word	0x40005800

080004b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b088      	sub	sp, #32
 80004b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b6:	f107 0310 	add.w	r3, r7, #16
 80004ba:	2200      	movs	r2, #0
 80004bc:	601a      	str	r2, [r3, #0]
 80004be:	605a      	str	r2, [r3, #4]
 80004c0:	609a      	str	r2, [r3, #8]
 80004c2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004c4:	4b24      	ldr	r3, [pc, #144]	@ (8000558 <MX_GPIO_Init+0xa8>)
 80004c6:	699b      	ldr	r3, [r3, #24]
 80004c8:	4a23      	ldr	r2, [pc, #140]	@ (8000558 <MX_GPIO_Init+0xa8>)
 80004ca:	f043 0310 	orr.w	r3, r3, #16
 80004ce:	6193      	str	r3, [r2, #24]
 80004d0:	4b21      	ldr	r3, [pc, #132]	@ (8000558 <MX_GPIO_Init+0xa8>)
 80004d2:	699b      	ldr	r3, [r3, #24]
 80004d4:	f003 0310 	and.w	r3, r3, #16
 80004d8:	60fb      	str	r3, [r7, #12]
 80004da:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004dc:	4b1e      	ldr	r3, [pc, #120]	@ (8000558 <MX_GPIO_Init+0xa8>)
 80004de:	699b      	ldr	r3, [r3, #24]
 80004e0:	4a1d      	ldr	r2, [pc, #116]	@ (8000558 <MX_GPIO_Init+0xa8>)
 80004e2:	f043 0320 	orr.w	r3, r3, #32
 80004e6:	6193      	str	r3, [r2, #24]
 80004e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000558 <MX_GPIO_Init+0xa8>)
 80004ea:	699b      	ldr	r3, [r3, #24]
 80004ec:	f003 0320 	and.w	r3, r3, #32
 80004f0:	60bb      	str	r3, [r7, #8]
 80004f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004f4:	4b18      	ldr	r3, [pc, #96]	@ (8000558 <MX_GPIO_Init+0xa8>)
 80004f6:	699b      	ldr	r3, [r3, #24]
 80004f8:	4a17      	ldr	r2, [pc, #92]	@ (8000558 <MX_GPIO_Init+0xa8>)
 80004fa:	f043 0308 	orr.w	r3, r3, #8
 80004fe:	6193      	str	r3, [r2, #24]
 8000500:	4b15      	ldr	r3, [pc, #84]	@ (8000558 <MX_GPIO_Init+0xa8>)
 8000502:	699b      	ldr	r3, [r3, #24]
 8000504:	f003 0308 	and.w	r3, r3, #8
 8000508:	607b      	str	r3, [r7, #4]
 800050a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800050c:	4b12      	ldr	r3, [pc, #72]	@ (8000558 <MX_GPIO_Init+0xa8>)
 800050e:	699b      	ldr	r3, [r3, #24]
 8000510:	4a11      	ldr	r2, [pc, #68]	@ (8000558 <MX_GPIO_Init+0xa8>)
 8000512:	f043 0304 	orr.w	r3, r3, #4
 8000516:	6193      	str	r3, [r2, #24]
 8000518:	4b0f      	ldr	r3, [pc, #60]	@ (8000558 <MX_GPIO_Init+0xa8>)
 800051a:	699b      	ldr	r3, [r3, #24]
 800051c:	f003 0304 	and.w	r3, r3, #4
 8000520:	603b      	str	r3, [r7, #0]
 8000522:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8000524:	2200      	movs	r2, #0
 8000526:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 800052a:	480c      	ldr	r0, [pc, #48]	@ (800055c <MX_GPIO_Init+0xac>)
 800052c:	f000 fbd6 	bl	8000cdc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000530:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000534:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000536:	2301      	movs	r3, #1
 8000538:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053a:	2300      	movs	r3, #0
 800053c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800053e:	2302      	movs	r3, #2
 8000540:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000542:	f107 0310 	add.w	r3, r7, #16
 8000546:	4619      	mov	r1, r3
 8000548:	4804      	ldr	r0, [pc, #16]	@ (800055c <MX_GPIO_Init+0xac>)
 800054a:	f000 fa43 	bl	80009d4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800054e:	bf00      	nop
 8000550:	3720      	adds	r7, #32
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	40021000 	.word	0x40021000
 800055c:	40011000 	.word	0x40011000

08000560 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000564:	b672      	cpsid	i
}
 8000566:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000568:	bf00      	nop
 800056a:	e7fd      	b.n	8000568 <Error_Handler+0x8>

0800056c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800056c:	b480      	push	{r7}
 800056e:	b085      	sub	sp, #20
 8000570:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000572:	4b15      	ldr	r3, [pc, #84]	@ (80005c8 <HAL_MspInit+0x5c>)
 8000574:	699b      	ldr	r3, [r3, #24]
 8000576:	4a14      	ldr	r2, [pc, #80]	@ (80005c8 <HAL_MspInit+0x5c>)
 8000578:	f043 0301 	orr.w	r3, r3, #1
 800057c:	6193      	str	r3, [r2, #24]
 800057e:	4b12      	ldr	r3, [pc, #72]	@ (80005c8 <HAL_MspInit+0x5c>)
 8000580:	699b      	ldr	r3, [r3, #24]
 8000582:	f003 0301 	and.w	r3, r3, #1
 8000586:	60bb      	str	r3, [r7, #8]
 8000588:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800058a:	4b0f      	ldr	r3, [pc, #60]	@ (80005c8 <HAL_MspInit+0x5c>)
 800058c:	69db      	ldr	r3, [r3, #28]
 800058e:	4a0e      	ldr	r2, [pc, #56]	@ (80005c8 <HAL_MspInit+0x5c>)
 8000590:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000594:	61d3      	str	r3, [r2, #28]
 8000596:	4b0c      	ldr	r3, [pc, #48]	@ (80005c8 <HAL_MspInit+0x5c>)
 8000598:	69db      	ldr	r3, [r3, #28]
 800059a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005a2:	4b0a      	ldr	r3, [pc, #40]	@ (80005cc <HAL_MspInit+0x60>)
 80005a4:	685b      	ldr	r3, [r3, #4]
 80005a6:	60fb      	str	r3, [r7, #12]
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80005ae:	60fb      	str	r3, [r7, #12]
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80005b6:	60fb      	str	r3, [r7, #12]
 80005b8:	4a04      	ldr	r2, [pc, #16]	@ (80005cc <HAL_MspInit+0x60>)
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005be:	bf00      	nop
 80005c0:	3714      	adds	r7, #20
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bc80      	pop	{r7}
 80005c6:	4770      	bx	lr
 80005c8:	40021000 	.word	0x40021000
 80005cc:	40010000 	.word	0x40010000

080005d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b088      	sub	sp, #32
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d8:	f107 0310 	add.w	r3, r7, #16
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	4a16      	ldr	r2, [pc, #88]	@ (8000644 <HAL_I2C_MspInit+0x74>)
 80005ec:	4293      	cmp	r3, r2
 80005ee:	d124      	bne.n	800063a <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f0:	4b15      	ldr	r3, [pc, #84]	@ (8000648 <HAL_I2C_MspInit+0x78>)
 80005f2:	699b      	ldr	r3, [r3, #24]
 80005f4:	4a14      	ldr	r2, [pc, #80]	@ (8000648 <HAL_I2C_MspInit+0x78>)
 80005f6:	f043 0308 	orr.w	r3, r3, #8
 80005fa:	6193      	str	r3, [r2, #24]
 80005fc:	4b12      	ldr	r3, [pc, #72]	@ (8000648 <HAL_I2C_MspInit+0x78>)
 80005fe:	699b      	ldr	r3, [r3, #24]
 8000600:	f003 0308 	and.w	r3, r3, #8
 8000604:	60fb      	str	r3, [r7, #12]
 8000606:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000608:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800060c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800060e:	2312      	movs	r3, #18
 8000610:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000612:	2303      	movs	r3, #3
 8000614:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000616:	f107 0310 	add.w	r3, r7, #16
 800061a:	4619      	mov	r1, r3
 800061c:	480b      	ldr	r0, [pc, #44]	@ (800064c <HAL_I2C_MspInit+0x7c>)
 800061e:	f000 f9d9 	bl	80009d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000622:	4b09      	ldr	r3, [pc, #36]	@ (8000648 <HAL_I2C_MspInit+0x78>)
 8000624:	69db      	ldr	r3, [r3, #28]
 8000626:	4a08      	ldr	r2, [pc, #32]	@ (8000648 <HAL_I2C_MspInit+0x78>)
 8000628:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800062c:	61d3      	str	r3, [r2, #28]
 800062e:	4b06      	ldr	r3, [pc, #24]	@ (8000648 <HAL_I2C_MspInit+0x78>)
 8000630:	69db      	ldr	r3, [r3, #28]
 8000632:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000636:	60bb      	str	r3, [r7, #8]
 8000638:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 800063a:	bf00      	nop
 800063c:	3720      	adds	r7, #32
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	40005800 	.word	0x40005800
 8000648:	40021000 	.word	0x40021000
 800064c:	40010c00 	.word	0x40010c00

08000650 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000654:	bf00      	nop
 8000656:	e7fd      	b.n	8000654 <NMI_Handler+0x4>

08000658 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800065c:	bf00      	nop
 800065e:	e7fd      	b.n	800065c <HardFault_Handler+0x4>

08000660 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000664:	bf00      	nop
 8000666:	e7fd      	b.n	8000664 <MemManage_Handler+0x4>

08000668 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800066c:	bf00      	nop
 800066e:	e7fd      	b.n	800066c <BusFault_Handler+0x4>

08000670 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000674:	bf00      	nop
 8000676:	e7fd      	b.n	8000674 <UsageFault_Handler+0x4>

08000678 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800067c:	bf00      	nop
 800067e:	46bd      	mov	sp, r7
 8000680:	bc80      	pop	{r7}
 8000682:	4770      	bx	lr

08000684 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000688:	bf00      	nop
 800068a:	46bd      	mov	sp, r7
 800068c:	bc80      	pop	{r7}
 800068e:	4770      	bx	lr

08000690 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000694:	bf00      	nop
 8000696:	46bd      	mov	sp, r7
 8000698:	bc80      	pop	{r7}
 800069a:	4770      	bx	lr

0800069c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006a0:	f000 f874 	bl	800078c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006a4:	bf00      	nop
 80006a6:	bd80      	pop	{r7, pc}

080006a8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006ac:	bf00      	nop
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bc80      	pop	{r7}
 80006b2:	4770      	bx	lr

080006b4 <Reset_Handler>:
 80006b4:	f7ff fff8 	bl	80006a8 <SystemInit>
 80006b8:	480b      	ldr	r0, [pc, #44]	@ (80006e8 <LoopFillZerobss+0xe>)
 80006ba:	490c      	ldr	r1, [pc, #48]	@ (80006ec <LoopFillZerobss+0x12>)
 80006bc:	4a0c      	ldr	r2, [pc, #48]	@ (80006f0 <LoopFillZerobss+0x16>)
 80006be:	2300      	movs	r3, #0
 80006c0:	e002      	b.n	80006c8 <LoopCopyDataInit>

080006c2 <CopyDataInit>:
 80006c2:	58d4      	ldr	r4, [r2, r3]
 80006c4:	50c4      	str	r4, [r0, r3]
 80006c6:	3304      	adds	r3, #4

080006c8 <LoopCopyDataInit>:
 80006c8:	18c4      	adds	r4, r0, r3
 80006ca:	428c      	cmp	r4, r1
 80006cc:	d3f9      	bcc.n	80006c2 <CopyDataInit>
 80006ce:	4a09      	ldr	r2, [pc, #36]	@ (80006f4 <LoopFillZerobss+0x1a>)
 80006d0:	4c09      	ldr	r4, [pc, #36]	@ (80006f8 <LoopFillZerobss+0x1e>)
 80006d2:	2300      	movs	r3, #0
 80006d4:	e001      	b.n	80006da <LoopFillZerobss>

080006d6 <FillZerobss>:
 80006d6:	6013      	str	r3, [r2, #0]
 80006d8:	3204      	adds	r2, #4

080006da <LoopFillZerobss>:
 80006da:	42a2      	cmp	r2, r4
 80006dc:	d3fb      	bcc.n	80006d6 <FillZerobss>
 80006de:	f001 ff4d 	bl	800257c <__libc_init_array>
 80006e2:	f7ff fe23 	bl	800032c <main>
 80006e6:	4770      	bx	lr
 80006e8:	20000000 	.word	0x20000000
 80006ec:	2000000c 	.word	0x2000000c
 80006f0:	08002610 	.word	0x08002610
 80006f4:	2000000c 	.word	0x2000000c
 80006f8:	20000098 	.word	0x20000098

080006fc <ADC1_2_IRQHandler>:
 80006fc:	e7fe      	b.n	80006fc <ADC1_2_IRQHandler>
	...

08000700 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000704:	4b08      	ldr	r3, [pc, #32]	@ (8000728 <HAL_Init+0x28>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a07      	ldr	r2, [pc, #28]	@ (8000728 <HAL_Init+0x28>)
 800070a:	f043 0310 	orr.w	r3, r3, #16
 800070e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000710:	2003      	movs	r0, #3
 8000712:	f000 f92b 	bl	800096c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000716:	200f      	movs	r0, #15
 8000718:	f000 f808 	bl	800072c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800071c:	f7ff ff26 	bl	800056c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000720:	2300      	movs	r3, #0
}
 8000722:	4618      	mov	r0, r3
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40022000 	.word	0x40022000

0800072c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000734:	4b12      	ldr	r3, [pc, #72]	@ (8000780 <HAL_InitTick+0x54>)
 8000736:	681a      	ldr	r2, [r3, #0]
 8000738:	4b12      	ldr	r3, [pc, #72]	@ (8000784 <HAL_InitTick+0x58>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	4619      	mov	r1, r3
 800073e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000742:	fbb3 f3f1 	udiv	r3, r3, r1
 8000746:	fbb2 f3f3 	udiv	r3, r2, r3
 800074a:	4618      	mov	r0, r3
 800074c:	f000 f935 	bl	80009ba <HAL_SYSTICK_Config>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000756:	2301      	movs	r3, #1
 8000758:	e00e      	b.n	8000778 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	2b0f      	cmp	r3, #15
 800075e:	d80a      	bhi.n	8000776 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000760:	2200      	movs	r2, #0
 8000762:	6879      	ldr	r1, [r7, #4]
 8000764:	f04f 30ff 	mov.w	r0, #4294967295
 8000768:	f000 f90b 	bl	8000982 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800076c:	4a06      	ldr	r2, [pc, #24]	@ (8000788 <HAL_InitTick+0x5c>)
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000772:	2300      	movs	r3, #0
 8000774:	e000      	b.n	8000778 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000776:	2301      	movs	r3, #1
}
 8000778:	4618      	mov	r0, r3
 800077a:	3708      	adds	r7, #8
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	20000000 	.word	0x20000000
 8000784:	20000008 	.word	0x20000008
 8000788:	20000004 	.word	0x20000004

0800078c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000790:	4b05      	ldr	r3, [pc, #20]	@ (80007a8 <HAL_IncTick+0x1c>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	461a      	mov	r2, r3
 8000796:	4b05      	ldr	r3, [pc, #20]	@ (80007ac <HAL_IncTick+0x20>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	4413      	add	r3, r2
 800079c:	4a03      	ldr	r2, [pc, #12]	@ (80007ac <HAL_IncTick+0x20>)
 800079e:	6013      	str	r3, [r2, #0]
}
 80007a0:	bf00      	nop
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bc80      	pop	{r7}
 80007a6:	4770      	bx	lr
 80007a8:	20000008 	.word	0x20000008
 80007ac:	20000094 	.word	0x20000094

080007b0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  return uwTick;
 80007b4:	4b02      	ldr	r3, [pc, #8]	@ (80007c0 <HAL_GetTick+0x10>)
 80007b6:	681b      	ldr	r3, [r3, #0]
}
 80007b8:	4618      	mov	r0, r3
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bc80      	pop	{r7}
 80007be:	4770      	bx	lr
 80007c0:	20000094 	.word	0x20000094

080007c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007cc:	f7ff fff0 	bl	80007b0 <HAL_GetTick>
 80007d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007dc:	d005      	beq.n	80007ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007de:	4b0a      	ldr	r3, [pc, #40]	@ (8000808 <HAL_Delay+0x44>)
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	461a      	mov	r2, r3
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	4413      	add	r3, r2
 80007e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007ea:	bf00      	nop
 80007ec:	f7ff ffe0 	bl	80007b0 <HAL_GetTick>
 80007f0:	4602      	mov	r2, r0
 80007f2:	68bb      	ldr	r3, [r7, #8]
 80007f4:	1ad3      	subs	r3, r2, r3
 80007f6:	68fa      	ldr	r2, [r7, #12]
 80007f8:	429a      	cmp	r2, r3
 80007fa:	d8f7      	bhi.n	80007ec <HAL_Delay+0x28>
  {
  }
}
 80007fc:	bf00      	nop
 80007fe:	bf00      	nop
 8000800:	3710      	adds	r7, #16
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	20000008 	.word	0x20000008

0800080c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800080c:	b480      	push	{r7}
 800080e:	b085      	sub	sp, #20
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	f003 0307 	and.w	r3, r3, #7
 800081a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800081c:	4b0c      	ldr	r3, [pc, #48]	@ (8000850 <__NVIC_SetPriorityGrouping+0x44>)
 800081e:	68db      	ldr	r3, [r3, #12]
 8000820:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000822:	68ba      	ldr	r2, [r7, #8]
 8000824:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000828:	4013      	ands	r3, r2
 800082a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000830:	68bb      	ldr	r3, [r7, #8]
 8000832:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000834:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000838:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800083c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800083e:	4a04      	ldr	r2, [pc, #16]	@ (8000850 <__NVIC_SetPriorityGrouping+0x44>)
 8000840:	68bb      	ldr	r3, [r7, #8]
 8000842:	60d3      	str	r3, [r2, #12]
}
 8000844:	bf00      	nop
 8000846:	3714      	adds	r7, #20
 8000848:	46bd      	mov	sp, r7
 800084a:	bc80      	pop	{r7}
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	e000ed00 	.word	0xe000ed00

08000854 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000858:	4b04      	ldr	r3, [pc, #16]	@ (800086c <__NVIC_GetPriorityGrouping+0x18>)
 800085a:	68db      	ldr	r3, [r3, #12]
 800085c:	0a1b      	lsrs	r3, r3, #8
 800085e:	f003 0307 	and.w	r3, r3, #7
}
 8000862:	4618      	mov	r0, r3
 8000864:	46bd      	mov	sp, r7
 8000866:	bc80      	pop	{r7}
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	e000ed00 	.word	0xe000ed00

08000870 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	4603      	mov	r3, r0
 8000878:	6039      	str	r1, [r7, #0]
 800087a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800087c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000880:	2b00      	cmp	r3, #0
 8000882:	db0a      	blt.n	800089a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	b2da      	uxtb	r2, r3
 8000888:	490c      	ldr	r1, [pc, #48]	@ (80008bc <__NVIC_SetPriority+0x4c>)
 800088a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800088e:	0112      	lsls	r2, r2, #4
 8000890:	b2d2      	uxtb	r2, r2
 8000892:	440b      	add	r3, r1
 8000894:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000898:	e00a      	b.n	80008b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	b2da      	uxtb	r2, r3
 800089e:	4908      	ldr	r1, [pc, #32]	@ (80008c0 <__NVIC_SetPriority+0x50>)
 80008a0:	79fb      	ldrb	r3, [r7, #7]
 80008a2:	f003 030f 	and.w	r3, r3, #15
 80008a6:	3b04      	subs	r3, #4
 80008a8:	0112      	lsls	r2, r2, #4
 80008aa:	b2d2      	uxtb	r2, r2
 80008ac:	440b      	add	r3, r1
 80008ae:	761a      	strb	r2, [r3, #24]
}
 80008b0:	bf00      	nop
 80008b2:	370c      	adds	r7, #12
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bc80      	pop	{r7}
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	e000e100 	.word	0xe000e100
 80008c0:	e000ed00 	.word	0xe000ed00

080008c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b089      	sub	sp, #36	@ 0x24
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	60f8      	str	r0, [r7, #12]
 80008cc:	60b9      	str	r1, [r7, #8]
 80008ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	f003 0307 	and.w	r3, r3, #7
 80008d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008d8:	69fb      	ldr	r3, [r7, #28]
 80008da:	f1c3 0307 	rsb	r3, r3, #7
 80008de:	2b04      	cmp	r3, #4
 80008e0:	bf28      	it	cs
 80008e2:	2304      	movcs	r3, #4
 80008e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008e6:	69fb      	ldr	r3, [r7, #28]
 80008e8:	3304      	adds	r3, #4
 80008ea:	2b06      	cmp	r3, #6
 80008ec:	d902      	bls.n	80008f4 <NVIC_EncodePriority+0x30>
 80008ee:	69fb      	ldr	r3, [r7, #28]
 80008f0:	3b03      	subs	r3, #3
 80008f2:	e000      	b.n	80008f6 <NVIC_EncodePriority+0x32>
 80008f4:	2300      	movs	r3, #0
 80008f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008f8:	f04f 32ff 	mov.w	r2, #4294967295
 80008fc:	69bb      	ldr	r3, [r7, #24]
 80008fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000902:	43da      	mvns	r2, r3
 8000904:	68bb      	ldr	r3, [r7, #8]
 8000906:	401a      	ands	r2, r3
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800090c:	f04f 31ff 	mov.w	r1, #4294967295
 8000910:	697b      	ldr	r3, [r7, #20]
 8000912:	fa01 f303 	lsl.w	r3, r1, r3
 8000916:	43d9      	mvns	r1, r3
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800091c:	4313      	orrs	r3, r2
         );
}
 800091e:	4618      	mov	r0, r3
 8000920:	3724      	adds	r7, #36	@ 0x24
 8000922:	46bd      	mov	sp, r7
 8000924:	bc80      	pop	{r7}
 8000926:	4770      	bx	lr

08000928 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	3b01      	subs	r3, #1
 8000934:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000938:	d301      	bcc.n	800093e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800093a:	2301      	movs	r3, #1
 800093c:	e00f      	b.n	800095e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800093e:	4a0a      	ldr	r2, [pc, #40]	@ (8000968 <SysTick_Config+0x40>)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	3b01      	subs	r3, #1
 8000944:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000946:	210f      	movs	r1, #15
 8000948:	f04f 30ff 	mov.w	r0, #4294967295
 800094c:	f7ff ff90 	bl	8000870 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000950:	4b05      	ldr	r3, [pc, #20]	@ (8000968 <SysTick_Config+0x40>)
 8000952:	2200      	movs	r2, #0
 8000954:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000956:	4b04      	ldr	r3, [pc, #16]	@ (8000968 <SysTick_Config+0x40>)
 8000958:	2207      	movs	r2, #7
 800095a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800095c:	2300      	movs	r3, #0
}
 800095e:	4618      	mov	r0, r3
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	e000e010 	.word	0xe000e010

0800096c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000974:	6878      	ldr	r0, [r7, #4]
 8000976:	f7ff ff49 	bl	800080c <__NVIC_SetPriorityGrouping>
}
 800097a:	bf00      	nop
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}

08000982 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000982:	b580      	push	{r7, lr}
 8000984:	b086      	sub	sp, #24
 8000986:	af00      	add	r7, sp, #0
 8000988:	4603      	mov	r3, r0
 800098a:	60b9      	str	r1, [r7, #8]
 800098c:	607a      	str	r2, [r7, #4]
 800098e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000990:	2300      	movs	r3, #0
 8000992:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000994:	f7ff ff5e 	bl	8000854 <__NVIC_GetPriorityGrouping>
 8000998:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800099a:	687a      	ldr	r2, [r7, #4]
 800099c:	68b9      	ldr	r1, [r7, #8]
 800099e:	6978      	ldr	r0, [r7, #20]
 80009a0:	f7ff ff90 	bl	80008c4 <NVIC_EncodePriority>
 80009a4:	4602      	mov	r2, r0
 80009a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009aa:	4611      	mov	r1, r2
 80009ac:	4618      	mov	r0, r3
 80009ae:	f7ff ff5f 	bl	8000870 <__NVIC_SetPriority>
}
 80009b2:	bf00      	nop
 80009b4:	3718      	adds	r7, #24
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}

080009ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009ba:	b580      	push	{r7, lr}
 80009bc:	b082      	sub	sp, #8
 80009be:	af00      	add	r7, sp, #0
 80009c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009c2:	6878      	ldr	r0, [r7, #4]
 80009c4:	f7ff ffb0 	bl	8000928 <SysTick_Config>
 80009c8:	4603      	mov	r3, r0
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
	...

080009d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b08b      	sub	sp, #44	@ 0x2c
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
 80009dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009de:	2300      	movs	r3, #0
 80009e0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80009e2:	2300      	movs	r3, #0
 80009e4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009e6:	e169      	b.n	8000cbc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80009e8:	2201      	movs	r2, #1
 80009ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009ec:	fa02 f303 	lsl.w	r3, r2, r3
 80009f0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	69fa      	ldr	r2, [r7, #28]
 80009f8:	4013      	ands	r3, r2
 80009fa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80009fc:	69ba      	ldr	r2, [r7, #24]
 80009fe:	69fb      	ldr	r3, [r7, #28]
 8000a00:	429a      	cmp	r2, r3
 8000a02:	f040 8158 	bne.w	8000cb6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	685b      	ldr	r3, [r3, #4]
 8000a0a:	4a9a      	ldr	r2, [pc, #616]	@ (8000c74 <HAL_GPIO_Init+0x2a0>)
 8000a0c:	4293      	cmp	r3, r2
 8000a0e:	d05e      	beq.n	8000ace <HAL_GPIO_Init+0xfa>
 8000a10:	4a98      	ldr	r2, [pc, #608]	@ (8000c74 <HAL_GPIO_Init+0x2a0>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d875      	bhi.n	8000b02 <HAL_GPIO_Init+0x12e>
 8000a16:	4a98      	ldr	r2, [pc, #608]	@ (8000c78 <HAL_GPIO_Init+0x2a4>)
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	d058      	beq.n	8000ace <HAL_GPIO_Init+0xfa>
 8000a1c:	4a96      	ldr	r2, [pc, #600]	@ (8000c78 <HAL_GPIO_Init+0x2a4>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d86f      	bhi.n	8000b02 <HAL_GPIO_Init+0x12e>
 8000a22:	4a96      	ldr	r2, [pc, #600]	@ (8000c7c <HAL_GPIO_Init+0x2a8>)
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d052      	beq.n	8000ace <HAL_GPIO_Init+0xfa>
 8000a28:	4a94      	ldr	r2, [pc, #592]	@ (8000c7c <HAL_GPIO_Init+0x2a8>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d869      	bhi.n	8000b02 <HAL_GPIO_Init+0x12e>
 8000a2e:	4a94      	ldr	r2, [pc, #592]	@ (8000c80 <HAL_GPIO_Init+0x2ac>)
 8000a30:	4293      	cmp	r3, r2
 8000a32:	d04c      	beq.n	8000ace <HAL_GPIO_Init+0xfa>
 8000a34:	4a92      	ldr	r2, [pc, #584]	@ (8000c80 <HAL_GPIO_Init+0x2ac>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d863      	bhi.n	8000b02 <HAL_GPIO_Init+0x12e>
 8000a3a:	4a92      	ldr	r2, [pc, #584]	@ (8000c84 <HAL_GPIO_Init+0x2b0>)
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	d046      	beq.n	8000ace <HAL_GPIO_Init+0xfa>
 8000a40:	4a90      	ldr	r2, [pc, #576]	@ (8000c84 <HAL_GPIO_Init+0x2b0>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d85d      	bhi.n	8000b02 <HAL_GPIO_Init+0x12e>
 8000a46:	2b12      	cmp	r3, #18
 8000a48:	d82a      	bhi.n	8000aa0 <HAL_GPIO_Init+0xcc>
 8000a4a:	2b12      	cmp	r3, #18
 8000a4c:	d859      	bhi.n	8000b02 <HAL_GPIO_Init+0x12e>
 8000a4e:	a201      	add	r2, pc, #4	@ (adr r2, 8000a54 <HAL_GPIO_Init+0x80>)
 8000a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a54:	08000acf 	.word	0x08000acf
 8000a58:	08000aa9 	.word	0x08000aa9
 8000a5c:	08000abb 	.word	0x08000abb
 8000a60:	08000afd 	.word	0x08000afd
 8000a64:	08000b03 	.word	0x08000b03
 8000a68:	08000b03 	.word	0x08000b03
 8000a6c:	08000b03 	.word	0x08000b03
 8000a70:	08000b03 	.word	0x08000b03
 8000a74:	08000b03 	.word	0x08000b03
 8000a78:	08000b03 	.word	0x08000b03
 8000a7c:	08000b03 	.word	0x08000b03
 8000a80:	08000b03 	.word	0x08000b03
 8000a84:	08000b03 	.word	0x08000b03
 8000a88:	08000b03 	.word	0x08000b03
 8000a8c:	08000b03 	.word	0x08000b03
 8000a90:	08000b03 	.word	0x08000b03
 8000a94:	08000b03 	.word	0x08000b03
 8000a98:	08000ab1 	.word	0x08000ab1
 8000a9c:	08000ac5 	.word	0x08000ac5
 8000aa0:	4a79      	ldr	r2, [pc, #484]	@ (8000c88 <HAL_GPIO_Init+0x2b4>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d013      	beq.n	8000ace <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000aa6:	e02c      	b.n	8000b02 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	68db      	ldr	r3, [r3, #12]
 8000aac:	623b      	str	r3, [r7, #32]
          break;
 8000aae:	e029      	b.n	8000b04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	68db      	ldr	r3, [r3, #12]
 8000ab4:	3304      	adds	r3, #4
 8000ab6:	623b      	str	r3, [r7, #32]
          break;
 8000ab8:	e024      	b.n	8000b04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	68db      	ldr	r3, [r3, #12]
 8000abe:	3308      	adds	r3, #8
 8000ac0:	623b      	str	r3, [r7, #32]
          break;
 8000ac2:	e01f      	b.n	8000b04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	68db      	ldr	r3, [r3, #12]
 8000ac8:	330c      	adds	r3, #12
 8000aca:	623b      	str	r3, [r7, #32]
          break;
 8000acc:	e01a      	b.n	8000b04 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	689b      	ldr	r3, [r3, #8]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d102      	bne.n	8000adc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ad6:	2304      	movs	r3, #4
 8000ad8:	623b      	str	r3, [r7, #32]
          break;
 8000ada:	e013      	b.n	8000b04 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	689b      	ldr	r3, [r3, #8]
 8000ae0:	2b01      	cmp	r3, #1
 8000ae2:	d105      	bne.n	8000af0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ae4:	2308      	movs	r3, #8
 8000ae6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	69fa      	ldr	r2, [r7, #28]
 8000aec:	611a      	str	r2, [r3, #16]
          break;
 8000aee:	e009      	b.n	8000b04 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000af0:	2308      	movs	r3, #8
 8000af2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	69fa      	ldr	r2, [r7, #28]
 8000af8:	615a      	str	r2, [r3, #20]
          break;
 8000afa:	e003      	b.n	8000b04 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000afc:	2300      	movs	r3, #0
 8000afe:	623b      	str	r3, [r7, #32]
          break;
 8000b00:	e000      	b.n	8000b04 <HAL_GPIO_Init+0x130>
          break;
 8000b02:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b04:	69bb      	ldr	r3, [r7, #24]
 8000b06:	2bff      	cmp	r3, #255	@ 0xff
 8000b08:	d801      	bhi.n	8000b0e <HAL_GPIO_Init+0x13a>
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	e001      	b.n	8000b12 <HAL_GPIO_Init+0x13e>
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	3304      	adds	r3, #4
 8000b12:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b14:	69bb      	ldr	r3, [r7, #24]
 8000b16:	2bff      	cmp	r3, #255	@ 0xff
 8000b18:	d802      	bhi.n	8000b20 <HAL_GPIO_Init+0x14c>
 8000b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b1c:	009b      	lsls	r3, r3, #2
 8000b1e:	e002      	b.n	8000b26 <HAL_GPIO_Init+0x152>
 8000b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b22:	3b08      	subs	r3, #8
 8000b24:	009b      	lsls	r3, r3, #2
 8000b26:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	681a      	ldr	r2, [r3, #0]
 8000b2c:	210f      	movs	r1, #15
 8000b2e:	693b      	ldr	r3, [r7, #16]
 8000b30:	fa01 f303 	lsl.w	r3, r1, r3
 8000b34:	43db      	mvns	r3, r3
 8000b36:	401a      	ands	r2, r3
 8000b38:	6a39      	ldr	r1, [r7, #32]
 8000b3a:	693b      	ldr	r3, [r7, #16]
 8000b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b40:	431a      	orrs	r2, r3
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	f000 80b1 	beq.w	8000cb6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b54:	4b4d      	ldr	r3, [pc, #308]	@ (8000c8c <HAL_GPIO_Init+0x2b8>)
 8000b56:	699b      	ldr	r3, [r3, #24]
 8000b58:	4a4c      	ldr	r2, [pc, #304]	@ (8000c8c <HAL_GPIO_Init+0x2b8>)
 8000b5a:	f043 0301 	orr.w	r3, r3, #1
 8000b5e:	6193      	str	r3, [r2, #24]
 8000b60:	4b4a      	ldr	r3, [pc, #296]	@ (8000c8c <HAL_GPIO_Init+0x2b8>)
 8000b62:	699b      	ldr	r3, [r3, #24]
 8000b64:	f003 0301 	and.w	r3, r3, #1
 8000b68:	60bb      	str	r3, [r7, #8]
 8000b6a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b6c:	4a48      	ldr	r2, [pc, #288]	@ (8000c90 <HAL_GPIO_Init+0x2bc>)
 8000b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b70:	089b      	lsrs	r3, r3, #2
 8000b72:	3302      	adds	r3, #2
 8000b74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b78:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b7c:	f003 0303 	and.w	r3, r3, #3
 8000b80:	009b      	lsls	r3, r3, #2
 8000b82:	220f      	movs	r2, #15
 8000b84:	fa02 f303 	lsl.w	r3, r2, r3
 8000b88:	43db      	mvns	r3, r3
 8000b8a:	68fa      	ldr	r2, [r7, #12]
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	4a40      	ldr	r2, [pc, #256]	@ (8000c94 <HAL_GPIO_Init+0x2c0>)
 8000b94:	4293      	cmp	r3, r2
 8000b96:	d013      	beq.n	8000bc0 <HAL_GPIO_Init+0x1ec>
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	4a3f      	ldr	r2, [pc, #252]	@ (8000c98 <HAL_GPIO_Init+0x2c4>)
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d00d      	beq.n	8000bbc <HAL_GPIO_Init+0x1e8>
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	4a3e      	ldr	r2, [pc, #248]	@ (8000c9c <HAL_GPIO_Init+0x2c8>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d007      	beq.n	8000bb8 <HAL_GPIO_Init+0x1e4>
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	4a3d      	ldr	r2, [pc, #244]	@ (8000ca0 <HAL_GPIO_Init+0x2cc>)
 8000bac:	4293      	cmp	r3, r2
 8000bae:	d101      	bne.n	8000bb4 <HAL_GPIO_Init+0x1e0>
 8000bb0:	2303      	movs	r3, #3
 8000bb2:	e006      	b.n	8000bc2 <HAL_GPIO_Init+0x1ee>
 8000bb4:	2304      	movs	r3, #4
 8000bb6:	e004      	b.n	8000bc2 <HAL_GPIO_Init+0x1ee>
 8000bb8:	2302      	movs	r3, #2
 8000bba:	e002      	b.n	8000bc2 <HAL_GPIO_Init+0x1ee>
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	e000      	b.n	8000bc2 <HAL_GPIO_Init+0x1ee>
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000bc4:	f002 0203 	and.w	r2, r2, #3
 8000bc8:	0092      	lsls	r2, r2, #2
 8000bca:	4093      	lsls	r3, r2
 8000bcc:	68fa      	ldr	r2, [r7, #12]
 8000bce:	4313      	orrs	r3, r2
 8000bd0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000bd2:	492f      	ldr	r1, [pc, #188]	@ (8000c90 <HAL_GPIO_Init+0x2bc>)
 8000bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bd6:	089b      	lsrs	r3, r3, #2
 8000bd8:	3302      	adds	r3, #2
 8000bda:	68fa      	ldr	r2, [r7, #12]
 8000bdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d006      	beq.n	8000bfa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000bec:	4b2d      	ldr	r3, [pc, #180]	@ (8000ca4 <HAL_GPIO_Init+0x2d0>)
 8000bee:	689a      	ldr	r2, [r3, #8]
 8000bf0:	492c      	ldr	r1, [pc, #176]	@ (8000ca4 <HAL_GPIO_Init+0x2d0>)
 8000bf2:	69bb      	ldr	r3, [r7, #24]
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	608b      	str	r3, [r1, #8]
 8000bf8:	e006      	b.n	8000c08 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000bfa:	4b2a      	ldr	r3, [pc, #168]	@ (8000ca4 <HAL_GPIO_Init+0x2d0>)
 8000bfc:	689a      	ldr	r2, [r3, #8]
 8000bfe:	69bb      	ldr	r3, [r7, #24]
 8000c00:	43db      	mvns	r3, r3
 8000c02:	4928      	ldr	r1, [pc, #160]	@ (8000ca4 <HAL_GPIO_Init+0x2d0>)
 8000c04:	4013      	ands	r3, r2
 8000c06:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d006      	beq.n	8000c22 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c14:	4b23      	ldr	r3, [pc, #140]	@ (8000ca4 <HAL_GPIO_Init+0x2d0>)
 8000c16:	68da      	ldr	r2, [r3, #12]
 8000c18:	4922      	ldr	r1, [pc, #136]	@ (8000ca4 <HAL_GPIO_Init+0x2d0>)
 8000c1a:	69bb      	ldr	r3, [r7, #24]
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	60cb      	str	r3, [r1, #12]
 8000c20:	e006      	b.n	8000c30 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c22:	4b20      	ldr	r3, [pc, #128]	@ (8000ca4 <HAL_GPIO_Init+0x2d0>)
 8000c24:	68da      	ldr	r2, [r3, #12]
 8000c26:	69bb      	ldr	r3, [r7, #24]
 8000c28:	43db      	mvns	r3, r3
 8000c2a:	491e      	ldr	r1, [pc, #120]	@ (8000ca4 <HAL_GPIO_Init+0x2d0>)
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d006      	beq.n	8000c4a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c3c:	4b19      	ldr	r3, [pc, #100]	@ (8000ca4 <HAL_GPIO_Init+0x2d0>)
 8000c3e:	685a      	ldr	r2, [r3, #4]
 8000c40:	4918      	ldr	r1, [pc, #96]	@ (8000ca4 <HAL_GPIO_Init+0x2d0>)
 8000c42:	69bb      	ldr	r3, [r7, #24]
 8000c44:	4313      	orrs	r3, r2
 8000c46:	604b      	str	r3, [r1, #4]
 8000c48:	e006      	b.n	8000c58 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c4a:	4b16      	ldr	r3, [pc, #88]	@ (8000ca4 <HAL_GPIO_Init+0x2d0>)
 8000c4c:	685a      	ldr	r2, [r3, #4]
 8000c4e:	69bb      	ldr	r3, [r7, #24]
 8000c50:	43db      	mvns	r3, r3
 8000c52:	4914      	ldr	r1, [pc, #80]	@ (8000ca4 <HAL_GPIO_Init+0x2d0>)
 8000c54:	4013      	ands	r3, r2
 8000c56:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d021      	beq.n	8000ca8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c64:	4b0f      	ldr	r3, [pc, #60]	@ (8000ca4 <HAL_GPIO_Init+0x2d0>)
 8000c66:	681a      	ldr	r2, [r3, #0]
 8000c68:	490e      	ldr	r1, [pc, #56]	@ (8000ca4 <HAL_GPIO_Init+0x2d0>)
 8000c6a:	69bb      	ldr	r3, [r7, #24]
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	600b      	str	r3, [r1, #0]
 8000c70:	e021      	b.n	8000cb6 <HAL_GPIO_Init+0x2e2>
 8000c72:	bf00      	nop
 8000c74:	10320000 	.word	0x10320000
 8000c78:	10310000 	.word	0x10310000
 8000c7c:	10220000 	.word	0x10220000
 8000c80:	10210000 	.word	0x10210000
 8000c84:	10120000 	.word	0x10120000
 8000c88:	10110000 	.word	0x10110000
 8000c8c:	40021000 	.word	0x40021000
 8000c90:	40010000 	.word	0x40010000
 8000c94:	40010800 	.word	0x40010800
 8000c98:	40010c00 	.word	0x40010c00
 8000c9c:	40011000 	.word	0x40011000
 8000ca0:	40011400 	.word	0x40011400
 8000ca4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ca8:	4b0b      	ldr	r3, [pc, #44]	@ (8000cd8 <HAL_GPIO_Init+0x304>)
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	69bb      	ldr	r3, [r7, #24]
 8000cae:	43db      	mvns	r3, r3
 8000cb0:	4909      	ldr	r1, [pc, #36]	@ (8000cd8 <HAL_GPIO_Init+0x304>)
 8000cb2:	4013      	ands	r3, r2
 8000cb4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cb8:	3301      	adds	r3, #1
 8000cba:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	681a      	ldr	r2, [r3, #0]
 8000cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cc2:	fa22 f303 	lsr.w	r3, r2, r3
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	f47f ae8e 	bne.w	80009e8 <HAL_GPIO_Init+0x14>
  }
}
 8000ccc:	bf00      	nop
 8000cce:	bf00      	nop
 8000cd0:	372c      	adds	r7, #44	@ 0x2c
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bc80      	pop	{r7}
 8000cd6:	4770      	bx	lr
 8000cd8:	40010400 	.word	0x40010400

08000cdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
 8000ce4:	460b      	mov	r3, r1
 8000ce6:	807b      	strh	r3, [r7, #2]
 8000ce8:	4613      	mov	r3, r2
 8000cea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000cec:	787b      	ldrb	r3, [r7, #1]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d003      	beq.n	8000cfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000cf2:	887a      	ldrh	r2, [r7, #2]
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000cf8:	e003      	b.n	8000d02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000cfa:	887b      	ldrh	r3, [r7, #2]
 8000cfc:	041a      	lsls	r2, r3, #16
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	611a      	str	r2, [r3, #16]
}
 8000d02:	bf00      	nop
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bc80      	pop	{r7}
 8000d0a:	4770      	bx	lr

08000d0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d101      	bne.n	8000d1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	e12b      	b.n	8000f76 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000d24:	b2db      	uxtb	r3, r3
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d106      	bne.n	8000d38 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000d32:	6878      	ldr	r0, [r7, #4]
 8000d34:	f7ff fc4c 	bl	80005d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2224      	movs	r2, #36	@ 0x24
 8000d3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f022 0201 	bic.w	r2, r2, #1
 8000d4e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000d5e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000d6e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000d70:	f001 fbca 	bl	8002508 <HAL_RCC_GetPCLK1Freq>
 8000d74:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	4a81      	ldr	r2, [pc, #516]	@ (8000f80 <HAL_I2C_Init+0x274>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d807      	bhi.n	8000d90 <HAL_I2C_Init+0x84>
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	4a80      	ldr	r2, [pc, #512]	@ (8000f84 <HAL_I2C_Init+0x278>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	bf94      	ite	ls
 8000d88:	2301      	movls	r3, #1
 8000d8a:	2300      	movhi	r3, #0
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	e006      	b.n	8000d9e <HAL_I2C_Init+0x92>
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	4a7d      	ldr	r2, [pc, #500]	@ (8000f88 <HAL_I2C_Init+0x27c>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	bf94      	ite	ls
 8000d98:	2301      	movls	r3, #1
 8000d9a:	2300      	movhi	r3, #0
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000da2:	2301      	movs	r3, #1
 8000da4:	e0e7      	b.n	8000f76 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	4a78      	ldr	r2, [pc, #480]	@ (8000f8c <HAL_I2C_Init+0x280>)
 8000daa:	fba2 2303 	umull	r2, r3, r2, r3
 8000dae:	0c9b      	lsrs	r3, r3, #18
 8000db0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	68ba      	ldr	r2, [r7, #8]
 8000dc2:	430a      	orrs	r2, r1
 8000dc4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	6a1b      	ldr	r3, [r3, #32]
 8000dcc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	4a6a      	ldr	r2, [pc, #424]	@ (8000f80 <HAL_I2C_Init+0x274>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d802      	bhi.n	8000de0 <HAL_I2C_Init+0xd4>
 8000dda:	68bb      	ldr	r3, [r7, #8]
 8000ddc:	3301      	adds	r3, #1
 8000dde:	e009      	b.n	8000df4 <HAL_I2C_Init+0xe8>
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000de6:	fb02 f303 	mul.w	r3, r2, r3
 8000dea:	4a69      	ldr	r2, [pc, #420]	@ (8000f90 <HAL_I2C_Init+0x284>)
 8000dec:	fba2 2303 	umull	r2, r3, r2, r3
 8000df0:	099b      	lsrs	r3, r3, #6
 8000df2:	3301      	adds	r3, #1
 8000df4:	687a      	ldr	r2, [r7, #4]
 8000df6:	6812      	ldr	r2, [r2, #0]
 8000df8:	430b      	orrs	r3, r1
 8000dfa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	69db      	ldr	r3, [r3, #28]
 8000e02:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8000e06:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	495c      	ldr	r1, [pc, #368]	@ (8000f80 <HAL_I2C_Init+0x274>)
 8000e10:	428b      	cmp	r3, r1
 8000e12:	d819      	bhi.n	8000e48 <HAL_I2C_Init+0x13c>
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	1e59      	subs	r1, r3, #1
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	005b      	lsls	r3, r3, #1
 8000e1e:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e22:	1c59      	adds	r1, r3, #1
 8000e24:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8000e28:	400b      	ands	r3, r1
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d00a      	beq.n	8000e44 <HAL_I2C_Init+0x138>
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	1e59      	subs	r1, r3, #1
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	005b      	lsls	r3, r3, #1
 8000e38:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e42:	e051      	b.n	8000ee8 <HAL_I2C_Init+0x1dc>
 8000e44:	2304      	movs	r3, #4
 8000e46:	e04f      	b.n	8000ee8 <HAL_I2C_Init+0x1dc>
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	689b      	ldr	r3, [r3, #8]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d111      	bne.n	8000e74 <HAL_I2C_Init+0x168>
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	1e58      	subs	r0, r3, #1
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6859      	ldr	r1, [r3, #4]
 8000e58:	460b      	mov	r3, r1
 8000e5a:	005b      	lsls	r3, r3, #1
 8000e5c:	440b      	add	r3, r1
 8000e5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e62:	3301      	adds	r3, #1
 8000e64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	bf0c      	ite	eq
 8000e6c:	2301      	moveq	r3, #1
 8000e6e:	2300      	movne	r3, #0
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	e012      	b.n	8000e9a <HAL_I2C_Init+0x18e>
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	1e58      	subs	r0, r3, #1
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	6859      	ldr	r1, [r3, #4]
 8000e7c:	460b      	mov	r3, r1
 8000e7e:	009b      	lsls	r3, r3, #2
 8000e80:	440b      	add	r3, r1
 8000e82:	0099      	lsls	r1, r3, #2
 8000e84:	440b      	add	r3, r1
 8000e86:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	bf0c      	ite	eq
 8000e94:	2301      	moveq	r3, #1
 8000e96:	2300      	movne	r3, #0
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <HAL_I2C_Init+0x196>
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e022      	b.n	8000ee8 <HAL_I2C_Init+0x1dc>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	689b      	ldr	r3, [r3, #8]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d10e      	bne.n	8000ec8 <HAL_I2C_Init+0x1bc>
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	1e58      	subs	r0, r3, #1
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6859      	ldr	r1, [r3, #4]
 8000eb2:	460b      	mov	r3, r1
 8000eb4:	005b      	lsls	r3, r3, #1
 8000eb6:	440b      	add	r3, r1
 8000eb8:	fbb0 f3f3 	udiv	r3, r0, r3
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ec2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000ec6:	e00f      	b.n	8000ee8 <HAL_I2C_Init+0x1dc>
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	1e58      	subs	r0, r3, #1
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6859      	ldr	r1, [r3, #4]
 8000ed0:	460b      	mov	r3, r1
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	440b      	add	r3, r1
 8000ed6:	0099      	lsls	r1, r3, #2
 8000ed8:	440b      	add	r3, r1
 8000eda:	fbb0 f3f3 	udiv	r3, r0, r3
 8000ede:	3301      	adds	r3, #1
 8000ee0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ee4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000ee8:	6879      	ldr	r1, [r7, #4]
 8000eea:	6809      	ldr	r1, [r1, #0]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	69da      	ldr	r2, [r3, #28]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6a1b      	ldr	r3, [r3, #32]
 8000f02:	431a      	orrs	r2, r3
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	430a      	orrs	r2, r1
 8000f0a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	689b      	ldr	r3, [r3, #8]
 8000f12:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8000f16:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000f1a:	687a      	ldr	r2, [r7, #4]
 8000f1c:	6911      	ldr	r1, [r2, #16]
 8000f1e:	687a      	ldr	r2, [r7, #4]
 8000f20:	68d2      	ldr	r2, [r2, #12]
 8000f22:	4311      	orrs	r1, r2
 8000f24:	687a      	ldr	r2, [r7, #4]
 8000f26:	6812      	ldr	r2, [r2, #0]
 8000f28:	430b      	orrs	r3, r1
 8000f2a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	68db      	ldr	r3, [r3, #12]
 8000f32:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	695a      	ldr	r2, [r3, #20]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	699b      	ldr	r3, [r3, #24]
 8000f3e:	431a      	orrs	r2, r3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	430a      	orrs	r2, r1
 8000f46:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f042 0201 	orr.w	r2, r2, #1
 8000f56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2220      	movs	r2, #32
 8000f62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2200      	movs	r2, #0
 8000f6a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2200      	movs	r2, #0
 8000f70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8000f74:	2300      	movs	r3, #0
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3710      	adds	r7, #16
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	000186a0 	.word	0x000186a0
 8000f84:	001e847f 	.word	0x001e847f
 8000f88:	003d08ff 	.word	0x003d08ff
 8000f8c:	431bde83 	.word	0x431bde83
 8000f90:	10624dd3 	.word	0x10624dd3

08000f94 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b088      	sub	sp, #32
 8000f98:	af02      	add	r7, sp, #8
 8000f9a:	60f8      	str	r0, [r7, #12]
 8000f9c:	607a      	str	r2, [r7, #4]
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	817b      	strh	r3, [r7, #10]
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8000fa8:	f7ff fc02 	bl	80007b0 <HAL_GetTick>
 8000fac:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	2b20      	cmp	r3, #32
 8000fb8:	f040 80e0 	bne.w	800117c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	9300      	str	r3, [sp, #0]
 8000fc0:	2319      	movs	r3, #25
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	4970      	ldr	r1, [pc, #448]	@ (8001188 <HAL_I2C_Master_Transmit+0x1f4>)
 8000fc6:	68f8      	ldr	r0, [r7, #12]
 8000fc8:	f000 fc9e 	bl	8001908 <I2C_WaitOnFlagUntilTimeout>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	e0d3      	b.n	800117e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d101      	bne.n	8000fe4 <HAL_I2C_Master_Transmit+0x50>
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	e0cc      	b.n	800117e <HAL_I2C_Master_Transmit+0x1ea>
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f003 0301 	and.w	r3, r3, #1
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d007      	beq.n	800100a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f042 0201 	orr.w	r2, r2, #1
 8001008:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001018:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	2221      	movs	r2, #33	@ 0x21
 800101e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	2210      	movs	r2, #16
 8001026:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	2200      	movs	r2, #0
 800102e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	893a      	ldrh	r2, [r7, #8]
 800103a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001040:	b29a      	uxth	r2, r3
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	4a50      	ldr	r2, [pc, #320]	@ (800118c <HAL_I2C_Master_Transmit+0x1f8>)
 800104a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800104c:	8979      	ldrh	r1, [r7, #10]
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	6a3a      	ldr	r2, [r7, #32]
 8001052:	68f8      	ldr	r0, [r7, #12]
 8001054:	f000 fb08 	bl	8001668 <I2C_MasterRequestWrite>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	e08d      	b.n	800117e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001062:	2300      	movs	r3, #0
 8001064:	613b      	str	r3, [r7, #16]
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	695b      	ldr	r3, [r3, #20]
 800106c:	613b      	str	r3, [r7, #16]
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	699b      	ldr	r3, [r3, #24]
 8001074:	613b      	str	r3, [r7, #16]
 8001076:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001078:	e066      	b.n	8001148 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800107a:	697a      	ldr	r2, [r7, #20]
 800107c:	6a39      	ldr	r1, [r7, #32]
 800107e:	68f8      	ldr	r0, [r7, #12]
 8001080:	f000 fd5c 	bl	8001b3c <I2C_WaitOnTXEFlagUntilTimeout>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d00d      	beq.n	80010a6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800108e:	2b04      	cmp	r3, #4
 8001090:	d107      	bne.n	80010a2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80010a0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
 80010a4:	e06b      	b.n	800117e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010aa:	781a      	ldrb	r2, [r3, #0]
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010b6:	1c5a      	adds	r2, r3, #1
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80010c0:	b29b      	uxth	r3, r3
 80010c2:	3b01      	subs	r3, #1
 80010c4:	b29a      	uxth	r2, r3
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80010ce:	3b01      	subs	r3, #1
 80010d0:	b29a      	uxth	r2, r3
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	695b      	ldr	r3, [r3, #20]
 80010dc:	f003 0304 	and.w	r3, r3, #4
 80010e0:	2b04      	cmp	r3, #4
 80010e2:	d11b      	bne.n	800111c <HAL_I2C_Master_Transmit+0x188>
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d017      	beq.n	800111c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010f0:	781a      	ldrb	r2, [r3, #0]
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010fc:	1c5a      	adds	r2, r3, #1
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001106:	b29b      	uxth	r3, r3
 8001108:	3b01      	subs	r3, #1
 800110a:	b29a      	uxth	r2, r3
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001114:	3b01      	subs	r3, #1
 8001116:	b29a      	uxth	r2, r3
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800111c:	697a      	ldr	r2, [r7, #20]
 800111e:	6a39      	ldr	r1, [r7, #32]
 8001120:	68f8      	ldr	r0, [r7, #12]
 8001122:	f000 fd53 	bl	8001bcc <I2C_WaitOnBTFFlagUntilTimeout>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d00d      	beq.n	8001148 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001130:	2b04      	cmp	r3, #4
 8001132:	d107      	bne.n	8001144 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001142:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001144:	2301      	movs	r3, #1
 8001146:	e01a      	b.n	800117e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800114c:	2b00      	cmp	r3, #0
 800114e:	d194      	bne.n	800107a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800115e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	2220      	movs	r2, #32
 8001164:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	2200      	movs	r2, #0
 800116c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	2200      	movs	r2, #0
 8001174:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001178:	2300      	movs	r3, #0
 800117a:	e000      	b.n	800117e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800117c:	2302      	movs	r3, #2
  }
}
 800117e:	4618      	mov	r0, r3
 8001180:	3718      	adds	r7, #24
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	00100002 	.word	0x00100002
 800118c:	ffff0000 	.word	0xffff0000

08001190 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b08c      	sub	sp, #48	@ 0x30
 8001194:	af02      	add	r7, sp, #8
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	607a      	str	r2, [r7, #4]
 800119a:	461a      	mov	r2, r3
 800119c:	460b      	mov	r3, r1
 800119e:	817b      	strh	r3, [r7, #10]
 80011a0:	4613      	mov	r3, r2
 80011a2:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80011a4:	2300      	movs	r3, #0
 80011a6:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80011a8:	f7ff fb02 	bl	80007b0 <HAL_GetTick>
 80011ac:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	2b20      	cmp	r3, #32
 80011b8:	f040 824b 	bne.w	8001652 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80011bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011be:	9300      	str	r3, [sp, #0]
 80011c0:	2319      	movs	r3, #25
 80011c2:	2201      	movs	r2, #1
 80011c4:	497f      	ldr	r1, [pc, #508]	@ (80013c4 <HAL_I2C_Master_Receive+0x234>)
 80011c6:	68f8      	ldr	r0, [r7, #12]
 80011c8:	f000 fb9e 	bl	8001908 <I2C_WaitOnFlagUntilTimeout>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80011d2:	2302      	movs	r3, #2
 80011d4:	e23e      	b.n	8001654 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d101      	bne.n	80011e4 <HAL_I2C_Master_Receive+0x54>
 80011e0:	2302      	movs	r3, #2
 80011e2:	e237      	b.n	8001654 <HAL_I2C_Master_Receive+0x4c4>
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	2201      	movs	r2, #1
 80011e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f003 0301 	and.w	r3, r3, #1
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d007      	beq.n	800120a <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f042 0201 	orr.w	r2, r2, #1
 8001208:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001218:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	2222      	movs	r2, #34	@ 0x22
 800121e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	2210      	movs	r2, #16
 8001226:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	2200      	movs	r2, #0
 800122e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	893a      	ldrh	r2, [r7, #8]
 800123a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001240:	b29a      	uxth	r2, r3
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	4a5f      	ldr	r2, [pc, #380]	@ (80013c8 <HAL_I2C_Master_Receive+0x238>)
 800124a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800124c:	8979      	ldrh	r1, [r7, #10]
 800124e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001250:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001252:	68f8      	ldr	r0, [r7, #12]
 8001254:	f000 fa8a 	bl	800176c <I2C_MasterRequestRead>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e1f8      	b.n	8001654 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001266:	2b00      	cmp	r3, #0
 8001268:	d113      	bne.n	8001292 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800126a:	2300      	movs	r3, #0
 800126c:	61fb      	str	r3, [r7, #28]
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	695b      	ldr	r3, [r3, #20]
 8001274:	61fb      	str	r3, [r7, #28]
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	61fb      	str	r3, [r7, #28]
 800127e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	e1cc      	b.n	800162c <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001296:	2b01      	cmp	r3, #1
 8001298:	d11e      	bne.n	80012d8 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80012a8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80012aa:	b672      	cpsid	i
}
 80012ac:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80012ae:	2300      	movs	r3, #0
 80012b0:	61bb      	str	r3, [r7, #24]
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	695b      	ldr	r3, [r3, #20]
 80012b8:	61bb      	str	r3, [r7, #24]
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	61bb      	str	r3, [r7, #24]
 80012c2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80012d2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80012d4:	b662      	cpsie	i
}
 80012d6:	e035      	b.n	8001344 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d11e      	bne.n	800131e <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80012ee:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80012f0:	b672      	cpsid	i
}
 80012f2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80012f4:	2300      	movs	r3, #0
 80012f6:	617b      	str	r3, [r7, #20]
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	695b      	ldr	r3, [r3, #20]
 80012fe:	617b      	str	r3, [r7, #20]
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	699b      	ldr	r3, [r3, #24]
 8001306:	617b      	str	r3, [r7, #20]
 8001308:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001318:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800131a:	b662      	cpsie	i
}
 800131c:	e012      	b.n	8001344 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800132c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800132e:	2300      	movs	r3, #0
 8001330:	613b      	str	r3, [r7, #16]
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	695b      	ldr	r3, [r3, #20]
 8001338:	613b      	str	r3, [r7, #16]
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	699b      	ldr	r3, [r3, #24]
 8001340:	613b      	str	r3, [r7, #16]
 8001342:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001344:	e172      	b.n	800162c <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800134a:	2b03      	cmp	r3, #3
 800134c:	f200 811f 	bhi.w	800158e <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001354:	2b01      	cmp	r3, #1
 8001356:	d123      	bne.n	80013a0 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001358:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800135a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800135c:	68f8      	ldr	r0, [r7, #12]
 800135e:	f000 fc7d 	bl	8001c5c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8001368:	2301      	movs	r3, #1
 800136a:	e173      	b.n	8001654 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	691a      	ldr	r2, [r3, #16]
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001376:	b2d2      	uxtb	r2, r2
 8001378:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800137e:	1c5a      	adds	r2, r3, #1
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001388:	3b01      	subs	r3, #1
 800138a:	b29a      	uxth	r2, r3
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001394:	b29b      	uxth	r3, r3
 8001396:	3b01      	subs	r3, #1
 8001398:	b29a      	uxth	r2, r3
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800139e:	e145      	b.n	800162c <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d152      	bne.n	800144e <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80013a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013aa:	9300      	str	r3, [sp, #0]
 80013ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013ae:	2200      	movs	r2, #0
 80013b0:	4906      	ldr	r1, [pc, #24]	@ (80013cc <HAL_I2C_Master_Receive+0x23c>)
 80013b2:	68f8      	ldr	r0, [r7, #12]
 80013b4:	f000 faa8 	bl	8001908 <I2C_WaitOnFlagUntilTimeout>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d008      	beq.n	80013d0 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e148      	b.n	8001654 <HAL_I2C_Master_Receive+0x4c4>
 80013c2:	bf00      	nop
 80013c4:	00100002 	.word	0x00100002
 80013c8:	ffff0000 	.word	0xffff0000
 80013cc:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80013d0:	b672      	cpsid	i
}
 80013d2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80013e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	691a      	ldr	r2, [r3, #16]
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013ee:	b2d2      	uxtb	r2, r2
 80013f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013f6:	1c5a      	adds	r2, r3, #1
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001400:	3b01      	subs	r3, #1
 8001402:	b29a      	uxth	r2, r3
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800140c:	b29b      	uxth	r3, r3
 800140e:	3b01      	subs	r3, #1
 8001410:	b29a      	uxth	r2, r3
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001416:	b662      	cpsie	i
}
 8001418:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	691a      	ldr	r2, [r3, #16]
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001424:	b2d2      	uxtb	r2, r2
 8001426:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800142c:	1c5a      	adds	r2, r3, #1
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001436:	3b01      	subs	r3, #1
 8001438:	b29a      	uxth	r2, r3
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001442:	b29b      	uxth	r3, r3
 8001444:	3b01      	subs	r3, #1
 8001446:	b29a      	uxth	r2, r3
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800144c:	e0ee      	b.n	800162c <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800144e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001450:	9300      	str	r3, [sp, #0]
 8001452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001454:	2200      	movs	r2, #0
 8001456:	4981      	ldr	r1, [pc, #516]	@ (800165c <HAL_I2C_Master_Receive+0x4cc>)
 8001458:	68f8      	ldr	r0, [r7, #12]
 800145a:	f000 fa55 	bl	8001908 <I2C_WaitOnFlagUntilTimeout>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	e0f5      	b.n	8001654 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001476:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001478:	b672      	cpsid	i
}
 800147a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	691a      	ldr	r2, [r3, #16]
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001486:	b2d2      	uxtb	r2, r2
 8001488:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800148e:	1c5a      	adds	r2, r3, #1
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001498:	3b01      	subs	r3, #1
 800149a:	b29a      	uxth	r2, r3
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80014a4:	b29b      	uxth	r3, r3
 80014a6:	3b01      	subs	r3, #1
 80014a8:	b29a      	uxth	r2, r3
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80014ae:	4b6c      	ldr	r3, [pc, #432]	@ (8001660 <HAL_I2C_Master_Receive+0x4d0>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	08db      	lsrs	r3, r3, #3
 80014b4:	4a6b      	ldr	r2, [pc, #428]	@ (8001664 <HAL_I2C_Master_Receive+0x4d4>)
 80014b6:	fba2 2303 	umull	r2, r3, r2, r3
 80014ba:	0a1a      	lsrs	r2, r3, #8
 80014bc:	4613      	mov	r3, r2
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	4413      	add	r3, r2
 80014c2:	00da      	lsls	r2, r3, #3
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80014c8:	6a3b      	ldr	r3, [r7, #32]
 80014ca:	3b01      	subs	r3, #1
 80014cc:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80014ce:	6a3b      	ldr	r3, [r7, #32]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d118      	bne.n	8001506 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	2200      	movs	r2, #0
 80014d8:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	2220      	movs	r2, #32
 80014de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	2200      	movs	r2, #0
 80014e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ee:	f043 0220 	orr.w	r2, r3, #32
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80014f6:	b662      	cpsie	i
}
 80014f8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	2200      	movs	r2, #0
 80014fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e0a6      	b.n	8001654 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	695b      	ldr	r3, [r3, #20]
 800150c:	f003 0304 	and.w	r3, r3, #4
 8001510:	2b04      	cmp	r3, #4
 8001512:	d1d9      	bne.n	80014c8 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001522:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	691a      	ldr	r2, [r3, #16]
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800152e:	b2d2      	uxtb	r2, r2
 8001530:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001536:	1c5a      	adds	r2, r3, #1
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001540:	3b01      	subs	r3, #1
 8001542:	b29a      	uxth	r2, r3
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800154c:	b29b      	uxth	r3, r3
 800154e:	3b01      	subs	r3, #1
 8001550:	b29a      	uxth	r2, r3
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001556:	b662      	cpsie	i
}
 8001558:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	691a      	ldr	r2, [r3, #16]
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001564:	b2d2      	uxtb	r2, r2
 8001566:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800156c:	1c5a      	adds	r2, r3, #1
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001576:	3b01      	subs	r3, #1
 8001578:	b29a      	uxth	r2, r3
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001582:	b29b      	uxth	r3, r3
 8001584:	3b01      	subs	r3, #1
 8001586:	b29a      	uxth	r2, r3
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800158c:	e04e      	b.n	800162c <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800158e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001590:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001592:	68f8      	ldr	r0, [r7, #12]
 8001594:	f000 fb62 	bl	8001c5c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e058      	b.n	8001654 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	691a      	ldr	r2, [r3, #16]
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ac:	b2d2      	uxtb	r2, r2
 80015ae:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015b4:	1c5a      	adds	r2, r3, #1
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015be:	3b01      	subs	r3, #1
 80015c0:	b29a      	uxth	r2, r3
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	3b01      	subs	r3, #1
 80015ce:	b29a      	uxth	r2, r3
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	695b      	ldr	r3, [r3, #20]
 80015da:	f003 0304 	and.w	r3, r3, #4
 80015de:	2b04      	cmp	r3, #4
 80015e0:	d124      	bne.n	800162c <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015e6:	2b03      	cmp	r3, #3
 80015e8:	d107      	bne.n	80015fa <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80015f8:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	691a      	ldr	r2, [r3, #16]
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001604:	b2d2      	uxtb	r2, r2
 8001606:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800160c:	1c5a      	adds	r2, r3, #1
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001616:	3b01      	subs	r3, #1
 8001618:	b29a      	uxth	r2, r3
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001622:	b29b      	uxth	r3, r3
 8001624:	3b01      	subs	r3, #1
 8001626:	b29a      	uxth	r2, r3
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001630:	2b00      	cmp	r3, #0
 8001632:	f47f ae88 	bne.w	8001346 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	2220      	movs	r2, #32
 800163a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	2200      	movs	r2, #0
 8001642:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	2200      	movs	r2, #0
 800164a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800164e:	2300      	movs	r3, #0
 8001650:	e000      	b.n	8001654 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8001652:	2302      	movs	r3, #2
  }
}
 8001654:	4618      	mov	r0, r3
 8001656:	3728      	adds	r7, #40	@ 0x28
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	00010004 	.word	0x00010004
 8001660:	20000000 	.word	0x20000000
 8001664:	14f8b589 	.word	0x14f8b589

08001668 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b088      	sub	sp, #32
 800166c:	af02      	add	r7, sp, #8
 800166e:	60f8      	str	r0, [r7, #12]
 8001670:	607a      	str	r2, [r7, #4]
 8001672:	603b      	str	r3, [r7, #0]
 8001674:	460b      	mov	r3, r1
 8001676:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800167c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	2b08      	cmp	r3, #8
 8001682:	d006      	beq.n	8001692 <I2C_MasterRequestWrite+0x2a>
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	2b01      	cmp	r3, #1
 8001688:	d003      	beq.n	8001692 <I2C_MasterRequestWrite+0x2a>
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001690:	d108      	bne.n	80016a4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	e00b      	b.n	80016bc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a8:	2b12      	cmp	r3, #18
 80016aa:	d107      	bne.n	80016bc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80016ba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	9300      	str	r3, [sp, #0]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2200      	movs	r2, #0
 80016c4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80016c8:	68f8      	ldr	r0, [r7, #12]
 80016ca:	f000 f91d 	bl	8001908 <I2C_WaitOnFlagUntilTimeout>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d00d      	beq.n	80016f0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80016e2:	d103      	bne.n	80016ec <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016ea:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80016ec:	2303      	movs	r3, #3
 80016ee:	e035      	b.n	800175c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	691b      	ldr	r3, [r3, #16]
 80016f4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80016f8:	d108      	bne.n	800170c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80016fa:	897b      	ldrh	r3, [r7, #10]
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	461a      	mov	r2, r3
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001708:	611a      	str	r2, [r3, #16]
 800170a:	e01b      	b.n	8001744 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800170c:	897b      	ldrh	r3, [r7, #10]
 800170e:	11db      	asrs	r3, r3, #7
 8001710:	b2db      	uxtb	r3, r3
 8001712:	f003 0306 	and.w	r3, r3, #6
 8001716:	b2db      	uxtb	r3, r3
 8001718:	f063 030f 	orn	r3, r3, #15
 800171c:	b2da      	uxtb	r2, r3
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	490e      	ldr	r1, [pc, #56]	@ (8001764 <I2C_MasterRequestWrite+0xfc>)
 800172a:	68f8      	ldr	r0, [r7, #12]
 800172c:	f000 f966 	bl	80019fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e010      	b.n	800175c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800173a:	897b      	ldrh	r3, [r7, #10]
 800173c:	b2da      	uxtb	r2, r3
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	4907      	ldr	r1, [pc, #28]	@ (8001768 <I2C_MasterRequestWrite+0x100>)
 800174a:	68f8      	ldr	r0, [r7, #12]
 800174c:	f000 f956 	bl	80019fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e000      	b.n	800175c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800175a:	2300      	movs	r3, #0
}
 800175c:	4618      	mov	r0, r3
 800175e:	3718      	adds	r7, #24
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	00010008 	.word	0x00010008
 8001768:	00010002 	.word	0x00010002

0800176c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b088      	sub	sp, #32
 8001770:	af02      	add	r7, sp, #8
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	607a      	str	r2, [r7, #4]
 8001776:	603b      	str	r3, [r7, #0]
 8001778:	460b      	mov	r3, r1
 800177a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001780:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001790:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	2b08      	cmp	r3, #8
 8001796:	d006      	beq.n	80017a6 <I2C_MasterRequestRead+0x3a>
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	2b01      	cmp	r3, #1
 800179c:	d003      	beq.n	80017a6 <I2C_MasterRequestRead+0x3a>
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80017a4:	d108      	bne.n	80017b8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80017b4:	601a      	str	r2, [r3, #0]
 80017b6:	e00b      	b.n	80017d0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017bc:	2b11      	cmp	r3, #17
 80017be:	d107      	bne.n	80017d0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80017ce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	9300      	str	r3, [sp, #0]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2200      	movs	r2, #0
 80017d8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80017dc:	68f8      	ldr	r0, [r7, #12]
 80017de:	f000 f893 	bl	8001908 <I2C_WaitOnFlagUntilTimeout>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d00d      	beq.n	8001804 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80017f6:	d103      	bne.n	8001800 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017fe:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001800:	2303      	movs	r3, #3
 8001802:	e079      	b.n	80018f8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	691b      	ldr	r3, [r3, #16]
 8001808:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800180c:	d108      	bne.n	8001820 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800180e:	897b      	ldrh	r3, [r7, #10]
 8001810:	b2db      	uxtb	r3, r3
 8001812:	f043 0301 	orr.w	r3, r3, #1
 8001816:	b2da      	uxtb	r2, r3
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	611a      	str	r2, [r3, #16]
 800181e:	e05f      	b.n	80018e0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001820:	897b      	ldrh	r3, [r7, #10]
 8001822:	11db      	asrs	r3, r3, #7
 8001824:	b2db      	uxtb	r3, r3
 8001826:	f003 0306 	and.w	r3, r3, #6
 800182a:	b2db      	uxtb	r3, r3
 800182c:	f063 030f 	orn	r3, r3, #15
 8001830:	b2da      	uxtb	r2, r3
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	4930      	ldr	r1, [pc, #192]	@ (8001900 <I2C_MasterRequestRead+0x194>)
 800183e:	68f8      	ldr	r0, [r7, #12]
 8001840:	f000 f8dc 	bl	80019fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e054      	b.n	80018f8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800184e:	897b      	ldrh	r3, [r7, #10]
 8001850:	b2da      	uxtb	r2, r3
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	4929      	ldr	r1, [pc, #164]	@ (8001904 <I2C_MasterRequestRead+0x198>)
 800185e:	68f8      	ldr	r0, [r7, #12]
 8001860:	f000 f8cc 	bl	80019fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e044      	b.n	80018f8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800186e:	2300      	movs	r3, #0
 8001870:	613b      	str	r3, [r7, #16]
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	695b      	ldr	r3, [r3, #20]
 8001878:	613b      	str	r3, [r7, #16]
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	699b      	ldr	r3, [r3, #24]
 8001880:	613b      	str	r3, [r7, #16]
 8001882:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001892:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	9300      	str	r3, [sp, #0]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2200      	movs	r2, #0
 800189c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80018a0:	68f8      	ldr	r0, [r7, #12]
 80018a2:	f000 f831 	bl	8001908 <I2C_WaitOnFlagUntilTimeout>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d00d      	beq.n	80018c8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80018ba:	d103      	bne.n	80018c4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018c2:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80018c4:	2303      	movs	r3, #3
 80018c6:	e017      	b.n	80018f8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80018c8:	897b      	ldrh	r3, [r7, #10]
 80018ca:	11db      	asrs	r3, r3, #7
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	f003 0306 	and.w	r3, r3, #6
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	f063 030e 	orn	r3, r3, #14
 80018d8:	b2da      	uxtb	r2, r3
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	4907      	ldr	r1, [pc, #28]	@ (8001904 <I2C_MasterRequestRead+0x198>)
 80018e6:	68f8      	ldr	r0, [r7, #12]
 80018e8:	f000 f888 	bl	80019fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e000      	b.n	80018f8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80018f6:	2300      	movs	r3, #0
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3718      	adds	r7, #24
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	00010008 	.word	0x00010008
 8001904:	00010002 	.word	0x00010002

08001908 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	60b9      	str	r1, [r7, #8]
 8001912:	603b      	str	r3, [r7, #0]
 8001914:	4613      	mov	r3, r2
 8001916:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001918:	e048      	b.n	80019ac <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001920:	d044      	beq.n	80019ac <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001922:	f7fe ff45 	bl	80007b0 <HAL_GetTick>
 8001926:	4602      	mov	r2, r0
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	683a      	ldr	r2, [r7, #0]
 800192e:	429a      	cmp	r2, r3
 8001930:	d302      	bcc.n	8001938 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d139      	bne.n	80019ac <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	0c1b      	lsrs	r3, r3, #16
 800193c:	b2db      	uxtb	r3, r3
 800193e:	2b01      	cmp	r3, #1
 8001940:	d10d      	bne.n	800195e <I2C_WaitOnFlagUntilTimeout+0x56>
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	695b      	ldr	r3, [r3, #20]
 8001948:	43da      	mvns	r2, r3
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	4013      	ands	r3, r2
 800194e:	b29b      	uxth	r3, r3
 8001950:	2b00      	cmp	r3, #0
 8001952:	bf0c      	ite	eq
 8001954:	2301      	moveq	r3, #1
 8001956:	2300      	movne	r3, #0
 8001958:	b2db      	uxtb	r3, r3
 800195a:	461a      	mov	r2, r3
 800195c:	e00c      	b.n	8001978 <I2C_WaitOnFlagUntilTimeout+0x70>
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	699b      	ldr	r3, [r3, #24]
 8001964:	43da      	mvns	r2, r3
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	4013      	ands	r3, r2
 800196a:	b29b      	uxth	r3, r3
 800196c:	2b00      	cmp	r3, #0
 800196e:	bf0c      	ite	eq
 8001970:	2301      	moveq	r3, #1
 8001972:	2300      	movne	r3, #0
 8001974:	b2db      	uxtb	r3, r3
 8001976:	461a      	mov	r2, r3
 8001978:	79fb      	ldrb	r3, [r7, #7]
 800197a:	429a      	cmp	r2, r3
 800197c:	d116      	bne.n	80019ac <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	2200      	movs	r2, #0
 8001982:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	2220      	movs	r2, #32
 8001988:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	2200      	movs	r2, #0
 8001990:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001998:	f043 0220 	orr.w	r2, r3, #32
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	2200      	movs	r2, #0
 80019a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e023      	b.n	80019f4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	0c1b      	lsrs	r3, r3, #16
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d10d      	bne.n	80019d2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	695b      	ldr	r3, [r3, #20]
 80019bc:	43da      	mvns	r2, r3
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	4013      	ands	r3, r2
 80019c2:	b29b      	uxth	r3, r3
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	bf0c      	ite	eq
 80019c8:	2301      	moveq	r3, #1
 80019ca:	2300      	movne	r3, #0
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	461a      	mov	r2, r3
 80019d0:	e00c      	b.n	80019ec <I2C_WaitOnFlagUntilTimeout+0xe4>
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	699b      	ldr	r3, [r3, #24]
 80019d8:	43da      	mvns	r2, r3
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	4013      	ands	r3, r2
 80019de:	b29b      	uxth	r3, r3
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	bf0c      	ite	eq
 80019e4:	2301      	moveq	r3, #1
 80019e6:	2300      	movne	r3, #0
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	461a      	mov	r2, r3
 80019ec:	79fb      	ldrb	r3, [r7, #7]
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d093      	beq.n	800191a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80019f2:	2300      	movs	r3, #0
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3710      	adds	r7, #16
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}

080019fc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	60f8      	str	r0, [r7, #12]
 8001a04:	60b9      	str	r1, [r7, #8]
 8001a06:	607a      	str	r2, [r7, #4]
 8001a08:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001a0a:	e071      	b.n	8001af0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	695b      	ldr	r3, [r3, #20]
 8001a12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a1a:	d123      	bne.n	8001a64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a2a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001a34:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	2220      	movs	r2, #32
 8001a40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	2200      	movs	r2, #0
 8001a48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a50:	f043 0204 	orr.w	r2, r3, #4
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e067      	b.n	8001b34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a6a:	d041      	beq.n	8001af0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a6c:	f7fe fea0 	bl	80007b0 <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d302      	bcc.n	8001a82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d136      	bne.n	8001af0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	0c1b      	lsrs	r3, r3, #16
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d10c      	bne.n	8001aa6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	695b      	ldr	r3, [r3, #20]
 8001a92:	43da      	mvns	r2, r3
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	4013      	ands	r3, r2
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	bf14      	ite	ne
 8001a9e:	2301      	movne	r3, #1
 8001aa0:	2300      	moveq	r3, #0
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	e00b      	b.n	8001abe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	699b      	ldr	r3, [r3, #24]
 8001aac:	43da      	mvns	r2, r3
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	bf14      	ite	ne
 8001ab8:	2301      	movne	r3, #1
 8001aba:	2300      	moveq	r3, #0
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d016      	beq.n	8001af0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2220      	movs	r2, #32
 8001acc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001adc:	f043 0220 	orr.w	r2, r3, #32
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e021      	b.n	8001b34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	0c1b      	lsrs	r3, r3, #16
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d10c      	bne.n	8001b14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	695b      	ldr	r3, [r3, #20]
 8001b00:	43da      	mvns	r2, r3
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	4013      	ands	r3, r2
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	bf14      	ite	ne
 8001b0c:	2301      	movne	r3, #1
 8001b0e:	2300      	moveq	r3, #0
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	e00b      	b.n	8001b2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	699b      	ldr	r3, [r3, #24]
 8001b1a:	43da      	mvns	r2, r3
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	4013      	ands	r3, r2
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	bf14      	ite	ne
 8001b26:	2301      	movne	r3, #1
 8001b28:	2300      	moveq	r3, #0
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	f47f af6d 	bne.w	8001a0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001b32:	2300      	movs	r3, #0
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3710      	adds	r7, #16
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	60f8      	str	r0, [r7, #12]
 8001b44:	60b9      	str	r1, [r7, #8]
 8001b46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b48:	e034      	b.n	8001bb4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001b4a:	68f8      	ldr	r0, [r7, #12]
 8001b4c:	f000 f8e3 	bl	8001d16 <I2C_IsAcknowledgeFailed>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e034      	b.n	8001bc4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b60:	d028      	beq.n	8001bb4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b62:	f7fe fe25 	bl	80007b0 <HAL_GetTick>
 8001b66:	4602      	mov	r2, r0
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	68ba      	ldr	r2, [r7, #8]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d302      	bcc.n	8001b78 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d11d      	bne.n	8001bb4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	695b      	ldr	r3, [r3, #20]
 8001b7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b82:	2b80      	cmp	r3, #128	@ 0x80
 8001b84:	d016      	beq.n	8001bb4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2220      	movs	r2, #32
 8001b90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2200      	movs	r2, #0
 8001b98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba0:	f043 0220 	orr.w	r2, r3, #32
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2200      	movs	r2, #0
 8001bac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e007      	b.n	8001bc4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	695b      	ldr	r3, [r3, #20]
 8001bba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bbe:	2b80      	cmp	r3, #128	@ 0x80
 8001bc0:	d1c3      	bne.n	8001b4a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001bc2:	2300      	movs	r3, #0
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3710      	adds	r7, #16
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	60f8      	str	r0, [r7, #12]
 8001bd4:	60b9      	str	r1, [r7, #8]
 8001bd6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001bd8:	e034      	b.n	8001c44 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001bda:	68f8      	ldr	r0, [r7, #12]
 8001bdc:	f000 f89b 	bl	8001d16 <I2C_IsAcknowledgeFailed>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e034      	b.n	8001c54 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bf0:	d028      	beq.n	8001c44 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bf2:	f7fe fddd 	bl	80007b0 <HAL_GetTick>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	68ba      	ldr	r2, [r7, #8]
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d302      	bcc.n	8001c08 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d11d      	bne.n	8001c44 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	695b      	ldr	r3, [r3, #20]
 8001c0e:	f003 0304 	and.w	r3, r3, #4
 8001c12:	2b04      	cmp	r3, #4
 8001c14:	d016      	beq.n	8001c44 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2220      	movs	r2, #32
 8001c20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2200      	movs	r2, #0
 8001c28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c30:	f043 0220 	orr.w	r2, r3, #32
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e007      	b.n	8001c54 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	695b      	ldr	r3, [r3, #20]
 8001c4a:	f003 0304 	and.w	r3, r3, #4
 8001c4e:	2b04      	cmp	r3, #4
 8001c50:	d1c3      	bne.n	8001bda <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001c52:	2300      	movs	r3, #0
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3710      	adds	r7, #16
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	60b9      	str	r1, [r7, #8]
 8001c66:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001c68:	e049      	b.n	8001cfe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	695b      	ldr	r3, [r3, #20]
 8001c70:	f003 0310 	and.w	r3, r3, #16
 8001c74:	2b10      	cmp	r3, #16
 8001c76:	d119      	bne.n	8001cac <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f06f 0210 	mvn.w	r2, #16
 8001c80:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2200      	movs	r2, #0
 8001c86:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2220      	movs	r2, #32
 8001c8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2200      	movs	r2, #0
 8001c94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e030      	b.n	8001d0e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cac:	f7fe fd80 	bl	80007b0 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	68ba      	ldr	r2, [r7, #8]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d302      	bcc.n	8001cc2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d11d      	bne.n	8001cfe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	695b      	ldr	r3, [r3, #20]
 8001cc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ccc:	2b40      	cmp	r3, #64	@ 0x40
 8001cce:	d016      	beq.n	8001cfe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2220      	movs	r2, #32
 8001cda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cea:	f043 0220 	orr.w	r2, r3, #32
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e007      	b.n	8001d0e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	695b      	ldr	r3, [r3, #20]
 8001d04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d08:	2b40      	cmp	r3, #64	@ 0x40
 8001d0a:	d1ae      	bne.n	8001c6a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3710      	adds	r7, #16
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001d16:	b480      	push	{r7}
 8001d18:	b083      	sub	sp, #12
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	695b      	ldr	r3, [r3, #20]
 8001d24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d2c:	d11b      	bne.n	8001d66 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001d36:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2220      	movs	r2, #32
 8001d42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d52:	f043 0204 	orr.w	r2, r3, #4
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e000      	b.n	8001d68 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001d66:	2300      	movs	r3, #0
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bc80      	pop	{r7}
 8001d70:	4770      	bx	lr
	...

08001d74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d101      	bne.n	8001d86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e272      	b.n	800226c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0301 	and.w	r3, r3, #1
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	f000 8087 	beq.w	8001ea2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d94:	4b92      	ldr	r3, [pc, #584]	@ (8001fe0 <HAL_RCC_OscConfig+0x26c>)
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f003 030c 	and.w	r3, r3, #12
 8001d9c:	2b04      	cmp	r3, #4
 8001d9e:	d00c      	beq.n	8001dba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001da0:	4b8f      	ldr	r3, [pc, #572]	@ (8001fe0 <HAL_RCC_OscConfig+0x26c>)
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f003 030c 	and.w	r3, r3, #12
 8001da8:	2b08      	cmp	r3, #8
 8001daa:	d112      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x5e>
 8001dac:	4b8c      	ldr	r3, [pc, #560]	@ (8001fe0 <HAL_RCC_OscConfig+0x26c>)
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001db4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001db8:	d10b      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dba:	4b89      	ldr	r3, [pc, #548]	@ (8001fe0 <HAL_RCC_OscConfig+0x26c>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d06c      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x12c>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d168      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e24c      	b.n	800226c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001dda:	d106      	bne.n	8001dea <HAL_RCC_OscConfig+0x76>
 8001ddc:	4b80      	ldr	r3, [pc, #512]	@ (8001fe0 <HAL_RCC_OscConfig+0x26c>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a7f      	ldr	r2, [pc, #508]	@ (8001fe0 <HAL_RCC_OscConfig+0x26c>)
 8001de2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001de6:	6013      	str	r3, [r2, #0]
 8001de8:	e02e      	b.n	8001e48 <HAL_RCC_OscConfig+0xd4>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d10c      	bne.n	8001e0c <HAL_RCC_OscConfig+0x98>
 8001df2:	4b7b      	ldr	r3, [pc, #492]	@ (8001fe0 <HAL_RCC_OscConfig+0x26c>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a7a      	ldr	r2, [pc, #488]	@ (8001fe0 <HAL_RCC_OscConfig+0x26c>)
 8001df8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001dfc:	6013      	str	r3, [r2, #0]
 8001dfe:	4b78      	ldr	r3, [pc, #480]	@ (8001fe0 <HAL_RCC_OscConfig+0x26c>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a77      	ldr	r2, [pc, #476]	@ (8001fe0 <HAL_RCC_OscConfig+0x26c>)
 8001e04:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e08:	6013      	str	r3, [r2, #0]
 8001e0a:	e01d      	b.n	8001e48 <HAL_RCC_OscConfig+0xd4>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e14:	d10c      	bne.n	8001e30 <HAL_RCC_OscConfig+0xbc>
 8001e16:	4b72      	ldr	r3, [pc, #456]	@ (8001fe0 <HAL_RCC_OscConfig+0x26c>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a71      	ldr	r2, [pc, #452]	@ (8001fe0 <HAL_RCC_OscConfig+0x26c>)
 8001e1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e20:	6013      	str	r3, [r2, #0]
 8001e22:	4b6f      	ldr	r3, [pc, #444]	@ (8001fe0 <HAL_RCC_OscConfig+0x26c>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a6e      	ldr	r2, [pc, #440]	@ (8001fe0 <HAL_RCC_OscConfig+0x26c>)
 8001e28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e2c:	6013      	str	r3, [r2, #0]
 8001e2e:	e00b      	b.n	8001e48 <HAL_RCC_OscConfig+0xd4>
 8001e30:	4b6b      	ldr	r3, [pc, #428]	@ (8001fe0 <HAL_RCC_OscConfig+0x26c>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a6a      	ldr	r2, [pc, #424]	@ (8001fe0 <HAL_RCC_OscConfig+0x26c>)
 8001e36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e3a:	6013      	str	r3, [r2, #0]
 8001e3c:	4b68      	ldr	r3, [pc, #416]	@ (8001fe0 <HAL_RCC_OscConfig+0x26c>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a67      	ldr	r2, [pc, #412]	@ (8001fe0 <HAL_RCC_OscConfig+0x26c>)
 8001e42:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e46:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d013      	beq.n	8001e78 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e50:	f7fe fcae 	bl	80007b0 <HAL_GetTick>
 8001e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e56:	e008      	b.n	8001e6a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e58:	f7fe fcaa 	bl	80007b0 <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	2b64      	cmp	r3, #100	@ 0x64
 8001e64:	d901      	bls.n	8001e6a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e200      	b.n	800226c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e6a:	4b5d      	ldr	r3, [pc, #372]	@ (8001fe0 <HAL_RCC_OscConfig+0x26c>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d0f0      	beq.n	8001e58 <HAL_RCC_OscConfig+0xe4>
 8001e76:	e014      	b.n	8001ea2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e78:	f7fe fc9a 	bl	80007b0 <HAL_GetTick>
 8001e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e7e:	e008      	b.n	8001e92 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e80:	f7fe fc96 	bl	80007b0 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	2b64      	cmp	r3, #100	@ 0x64
 8001e8c:	d901      	bls.n	8001e92 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e1ec      	b.n	800226c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e92:	4b53      	ldr	r3, [pc, #332]	@ (8001fe0 <HAL_RCC_OscConfig+0x26c>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d1f0      	bne.n	8001e80 <HAL_RCC_OscConfig+0x10c>
 8001e9e:	e000      	b.n	8001ea2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ea0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d063      	beq.n	8001f76 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001eae:	4b4c      	ldr	r3, [pc, #304]	@ (8001fe0 <HAL_RCC_OscConfig+0x26c>)
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f003 030c 	and.w	r3, r3, #12
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d00b      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001eba:	4b49      	ldr	r3, [pc, #292]	@ (8001fe0 <HAL_RCC_OscConfig+0x26c>)
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f003 030c 	and.w	r3, r3, #12
 8001ec2:	2b08      	cmp	r3, #8
 8001ec4:	d11c      	bne.n	8001f00 <HAL_RCC_OscConfig+0x18c>
 8001ec6:	4b46      	ldr	r3, [pc, #280]	@ (8001fe0 <HAL_RCC_OscConfig+0x26c>)
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d116      	bne.n	8001f00 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ed2:	4b43      	ldr	r3, [pc, #268]	@ (8001fe0 <HAL_RCC_OscConfig+0x26c>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0302 	and.w	r3, r3, #2
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d005      	beq.n	8001eea <HAL_RCC_OscConfig+0x176>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	691b      	ldr	r3, [r3, #16]
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d001      	beq.n	8001eea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e1c0      	b.n	800226c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eea:	4b3d      	ldr	r3, [pc, #244]	@ (8001fe0 <HAL_RCC_OscConfig+0x26c>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	695b      	ldr	r3, [r3, #20]
 8001ef6:	00db      	lsls	r3, r3, #3
 8001ef8:	4939      	ldr	r1, [pc, #228]	@ (8001fe0 <HAL_RCC_OscConfig+0x26c>)
 8001efa:	4313      	orrs	r3, r2
 8001efc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001efe:	e03a      	b.n	8001f76 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	691b      	ldr	r3, [r3, #16]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d020      	beq.n	8001f4a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f08:	4b36      	ldr	r3, [pc, #216]	@ (8001fe4 <HAL_RCC_OscConfig+0x270>)
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f0e:	f7fe fc4f 	bl	80007b0 <HAL_GetTick>
 8001f12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f14:	e008      	b.n	8001f28 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f16:	f7fe fc4b 	bl	80007b0 <HAL_GetTick>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d901      	bls.n	8001f28 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f24:	2303      	movs	r3, #3
 8001f26:	e1a1      	b.n	800226c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f28:	4b2d      	ldr	r3, [pc, #180]	@ (8001fe0 <HAL_RCC_OscConfig+0x26c>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0302 	and.w	r3, r3, #2
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d0f0      	beq.n	8001f16 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f34:	4b2a      	ldr	r3, [pc, #168]	@ (8001fe0 <HAL_RCC_OscConfig+0x26c>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	695b      	ldr	r3, [r3, #20]
 8001f40:	00db      	lsls	r3, r3, #3
 8001f42:	4927      	ldr	r1, [pc, #156]	@ (8001fe0 <HAL_RCC_OscConfig+0x26c>)
 8001f44:	4313      	orrs	r3, r2
 8001f46:	600b      	str	r3, [r1, #0]
 8001f48:	e015      	b.n	8001f76 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f4a:	4b26      	ldr	r3, [pc, #152]	@ (8001fe4 <HAL_RCC_OscConfig+0x270>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f50:	f7fe fc2e 	bl	80007b0 <HAL_GetTick>
 8001f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f56:	e008      	b.n	8001f6a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f58:	f7fe fc2a 	bl	80007b0 <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e180      	b.n	800226c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f6a:	4b1d      	ldr	r3, [pc, #116]	@ (8001fe0 <HAL_RCC_OscConfig+0x26c>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d1f0      	bne.n	8001f58 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0308 	and.w	r3, r3, #8
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d03a      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	699b      	ldr	r3, [r3, #24]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d019      	beq.n	8001fbe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f8a:	4b17      	ldr	r3, [pc, #92]	@ (8001fe8 <HAL_RCC_OscConfig+0x274>)
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f90:	f7fe fc0e 	bl	80007b0 <HAL_GetTick>
 8001f94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f96:	e008      	b.n	8001faa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f98:	f7fe fc0a 	bl	80007b0 <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d901      	bls.n	8001faa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e160      	b.n	800226c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001faa:	4b0d      	ldr	r3, [pc, #52]	@ (8001fe0 <HAL_RCC_OscConfig+0x26c>)
 8001fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fae:	f003 0302 	and.w	r3, r3, #2
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d0f0      	beq.n	8001f98 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001fb6:	2001      	movs	r0, #1
 8001fb8:	f000 faba 	bl	8002530 <RCC_Delay>
 8001fbc:	e01c      	b.n	8001ff8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fbe:	4b0a      	ldr	r3, [pc, #40]	@ (8001fe8 <HAL_RCC_OscConfig+0x274>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fc4:	f7fe fbf4 	bl	80007b0 <HAL_GetTick>
 8001fc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fca:	e00f      	b.n	8001fec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fcc:	f7fe fbf0 	bl	80007b0 <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d908      	bls.n	8001fec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e146      	b.n	800226c <HAL_RCC_OscConfig+0x4f8>
 8001fde:	bf00      	nop
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	42420000 	.word	0x42420000
 8001fe8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fec:	4b92      	ldr	r3, [pc, #584]	@ (8002238 <HAL_RCC_OscConfig+0x4c4>)
 8001fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ff0:	f003 0302 	and.w	r3, r3, #2
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d1e9      	bne.n	8001fcc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0304 	and.w	r3, r3, #4
 8002000:	2b00      	cmp	r3, #0
 8002002:	f000 80a6 	beq.w	8002152 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002006:	2300      	movs	r3, #0
 8002008:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800200a:	4b8b      	ldr	r3, [pc, #556]	@ (8002238 <HAL_RCC_OscConfig+0x4c4>)
 800200c:	69db      	ldr	r3, [r3, #28]
 800200e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d10d      	bne.n	8002032 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002016:	4b88      	ldr	r3, [pc, #544]	@ (8002238 <HAL_RCC_OscConfig+0x4c4>)
 8002018:	69db      	ldr	r3, [r3, #28]
 800201a:	4a87      	ldr	r2, [pc, #540]	@ (8002238 <HAL_RCC_OscConfig+0x4c4>)
 800201c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002020:	61d3      	str	r3, [r2, #28]
 8002022:	4b85      	ldr	r3, [pc, #532]	@ (8002238 <HAL_RCC_OscConfig+0x4c4>)
 8002024:	69db      	ldr	r3, [r3, #28]
 8002026:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800202a:	60bb      	str	r3, [r7, #8]
 800202c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800202e:	2301      	movs	r3, #1
 8002030:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002032:	4b82      	ldr	r3, [pc, #520]	@ (800223c <HAL_RCC_OscConfig+0x4c8>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800203a:	2b00      	cmp	r3, #0
 800203c:	d118      	bne.n	8002070 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800203e:	4b7f      	ldr	r3, [pc, #508]	@ (800223c <HAL_RCC_OscConfig+0x4c8>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a7e      	ldr	r2, [pc, #504]	@ (800223c <HAL_RCC_OscConfig+0x4c8>)
 8002044:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002048:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800204a:	f7fe fbb1 	bl	80007b0 <HAL_GetTick>
 800204e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002050:	e008      	b.n	8002064 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002052:	f7fe fbad 	bl	80007b0 <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	2b64      	cmp	r3, #100	@ 0x64
 800205e:	d901      	bls.n	8002064 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002060:	2303      	movs	r3, #3
 8002062:	e103      	b.n	800226c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002064:	4b75      	ldr	r3, [pc, #468]	@ (800223c <HAL_RCC_OscConfig+0x4c8>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800206c:	2b00      	cmp	r3, #0
 800206e:	d0f0      	beq.n	8002052 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	2b01      	cmp	r3, #1
 8002076:	d106      	bne.n	8002086 <HAL_RCC_OscConfig+0x312>
 8002078:	4b6f      	ldr	r3, [pc, #444]	@ (8002238 <HAL_RCC_OscConfig+0x4c4>)
 800207a:	6a1b      	ldr	r3, [r3, #32]
 800207c:	4a6e      	ldr	r2, [pc, #440]	@ (8002238 <HAL_RCC_OscConfig+0x4c4>)
 800207e:	f043 0301 	orr.w	r3, r3, #1
 8002082:	6213      	str	r3, [r2, #32]
 8002084:	e02d      	b.n	80020e2 <HAL_RCC_OscConfig+0x36e>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d10c      	bne.n	80020a8 <HAL_RCC_OscConfig+0x334>
 800208e:	4b6a      	ldr	r3, [pc, #424]	@ (8002238 <HAL_RCC_OscConfig+0x4c4>)
 8002090:	6a1b      	ldr	r3, [r3, #32]
 8002092:	4a69      	ldr	r2, [pc, #420]	@ (8002238 <HAL_RCC_OscConfig+0x4c4>)
 8002094:	f023 0301 	bic.w	r3, r3, #1
 8002098:	6213      	str	r3, [r2, #32]
 800209a:	4b67      	ldr	r3, [pc, #412]	@ (8002238 <HAL_RCC_OscConfig+0x4c4>)
 800209c:	6a1b      	ldr	r3, [r3, #32]
 800209e:	4a66      	ldr	r2, [pc, #408]	@ (8002238 <HAL_RCC_OscConfig+0x4c4>)
 80020a0:	f023 0304 	bic.w	r3, r3, #4
 80020a4:	6213      	str	r3, [r2, #32]
 80020a6:	e01c      	b.n	80020e2 <HAL_RCC_OscConfig+0x36e>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	2b05      	cmp	r3, #5
 80020ae:	d10c      	bne.n	80020ca <HAL_RCC_OscConfig+0x356>
 80020b0:	4b61      	ldr	r3, [pc, #388]	@ (8002238 <HAL_RCC_OscConfig+0x4c4>)
 80020b2:	6a1b      	ldr	r3, [r3, #32]
 80020b4:	4a60      	ldr	r2, [pc, #384]	@ (8002238 <HAL_RCC_OscConfig+0x4c4>)
 80020b6:	f043 0304 	orr.w	r3, r3, #4
 80020ba:	6213      	str	r3, [r2, #32]
 80020bc:	4b5e      	ldr	r3, [pc, #376]	@ (8002238 <HAL_RCC_OscConfig+0x4c4>)
 80020be:	6a1b      	ldr	r3, [r3, #32]
 80020c0:	4a5d      	ldr	r2, [pc, #372]	@ (8002238 <HAL_RCC_OscConfig+0x4c4>)
 80020c2:	f043 0301 	orr.w	r3, r3, #1
 80020c6:	6213      	str	r3, [r2, #32]
 80020c8:	e00b      	b.n	80020e2 <HAL_RCC_OscConfig+0x36e>
 80020ca:	4b5b      	ldr	r3, [pc, #364]	@ (8002238 <HAL_RCC_OscConfig+0x4c4>)
 80020cc:	6a1b      	ldr	r3, [r3, #32]
 80020ce:	4a5a      	ldr	r2, [pc, #360]	@ (8002238 <HAL_RCC_OscConfig+0x4c4>)
 80020d0:	f023 0301 	bic.w	r3, r3, #1
 80020d4:	6213      	str	r3, [r2, #32]
 80020d6:	4b58      	ldr	r3, [pc, #352]	@ (8002238 <HAL_RCC_OscConfig+0x4c4>)
 80020d8:	6a1b      	ldr	r3, [r3, #32]
 80020da:	4a57      	ldr	r2, [pc, #348]	@ (8002238 <HAL_RCC_OscConfig+0x4c4>)
 80020dc:	f023 0304 	bic.w	r3, r3, #4
 80020e0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d015      	beq.n	8002116 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ea:	f7fe fb61 	bl	80007b0 <HAL_GetTick>
 80020ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020f0:	e00a      	b.n	8002108 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020f2:	f7fe fb5d 	bl	80007b0 <HAL_GetTick>
 80020f6:	4602      	mov	r2, r0
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002100:	4293      	cmp	r3, r2
 8002102:	d901      	bls.n	8002108 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002104:	2303      	movs	r3, #3
 8002106:	e0b1      	b.n	800226c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002108:	4b4b      	ldr	r3, [pc, #300]	@ (8002238 <HAL_RCC_OscConfig+0x4c4>)
 800210a:	6a1b      	ldr	r3, [r3, #32]
 800210c:	f003 0302 	and.w	r3, r3, #2
 8002110:	2b00      	cmp	r3, #0
 8002112:	d0ee      	beq.n	80020f2 <HAL_RCC_OscConfig+0x37e>
 8002114:	e014      	b.n	8002140 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002116:	f7fe fb4b 	bl	80007b0 <HAL_GetTick>
 800211a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800211c:	e00a      	b.n	8002134 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800211e:	f7fe fb47 	bl	80007b0 <HAL_GetTick>
 8002122:	4602      	mov	r2, r0
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	f241 3288 	movw	r2, #5000	@ 0x1388
 800212c:	4293      	cmp	r3, r2
 800212e:	d901      	bls.n	8002134 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002130:	2303      	movs	r3, #3
 8002132:	e09b      	b.n	800226c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002134:	4b40      	ldr	r3, [pc, #256]	@ (8002238 <HAL_RCC_OscConfig+0x4c4>)
 8002136:	6a1b      	ldr	r3, [r3, #32]
 8002138:	f003 0302 	and.w	r3, r3, #2
 800213c:	2b00      	cmp	r3, #0
 800213e:	d1ee      	bne.n	800211e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002140:	7dfb      	ldrb	r3, [r7, #23]
 8002142:	2b01      	cmp	r3, #1
 8002144:	d105      	bne.n	8002152 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002146:	4b3c      	ldr	r3, [pc, #240]	@ (8002238 <HAL_RCC_OscConfig+0x4c4>)
 8002148:	69db      	ldr	r3, [r3, #28]
 800214a:	4a3b      	ldr	r2, [pc, #236]	@ (8002238 <HAL_RCC_OscConfig+0x4c4>)
 800214c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002150:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	69db      	ldr	r3, [r3, #28]
 8002156:	2b00      	cmp	r3, #0
 8002158:	f000 8087 	beq.w	800226a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800215c:	4b36      	ldr	r3, [pc, #216]	@ (8002238 <HAL_RCC_OscConfig+0x4c4>)
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f003 030c 	and.w	r3, r3, #12
 8002164:	2b08      	cmp	r3, #8
 8002166:	d061      	beq.n	800222c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	69db      	ldr	r3, [r3, #28]
 800216c:	2b02      	cmp	r3, #2
 800216e:	d146      	bne.n	80021fe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002170:	4b33      	ldr	r3, [pc, #204]	@ (8002240 <HAL_RCC_OscConfig+0x4cc>)
 8002172:	2200      	movs	r2, #0
 8002174:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002176:	f7fe fb1b 	bl	80007b0 <HAL_GetTick>
 800217a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800217c:	e008      	b.n	8002190 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800217e:	f7fe fb17 	bl	80007b0 <HAL_GetTick>
 8002182:	4602      	mov	r2, r0
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	2b02      	cmp	r3, #2
 800218a:	d901      	bls.n	8002190 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800218c:	2303      	movs	r3, #3
 800218e:	e06d      	b.n	800226c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002190:	4b29      	ldr	r3, [pc, #164]	@ (8002238 <HAL_RCC_OscConfig+0x4c4>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d1f0      	bne.n	800217e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a1b      	ldr	r3, [r3, #32]
 80021a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021a4:	d108      	bne.n	80021b8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80021a6:	4b24      	ldr	r3, [pc, #144]	@ (8002238 <HAL_RCC_OscConfig+0x4c4>)
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	4921      	ldr	r1, [pc, #132]	@ (8002238 <HAL_RCC_OscConfig+0x4c4>)
 80021b4:	4313      	orrs	r3, r2
 80021b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021b8:	4b1f      	ldr	r3, [pc, #124]	@ (8002238 <HAL_RCC_OscConfig+0x4c4>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6a19      	ldr	r1, [r3, #32]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021c8:	430b      	orrs	r3, r1
 80021ca:	491b      	ldr	r1, [pc, #108]	@ (8002238 <HAL_RCC_OscConfig+0x4c4>)
 80021cc:	4313      	orrs	r3, r2
 80021ce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021d0:	4b1b      	ldr	r3, [pc, #108]	@ (8002240 <HAL_RCC_OscConfig+0x4cc>)
 80021d2:	2201      	movs	r2, #1
 80021d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d6:	f7fe faeb 	bl	80007b0 <HAL_GetTick>
 80021da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021dc:	e008      	b.n	80021f0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021de:	f7fe fae7 	bl	80007b0 <HAL_GetTick>
 80021e2:	4602      	mov	r2, r0
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d901      	bls.n	80021f0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80021ec:	2303      	movs	r3, #3
 80021ee:	e03d      	b.n	800226c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021f0:	4b11      	ldr	r3, [pc, #68]	@ (8002238 <HAL_RCC_OscConfig+0x4c4>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d0f0      	beq.n	80021de <HAL_RCC_OscConfig+0x46a>
 80021fc:	e035      	b.n	800226a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021fe:	4b10      	ldr	r3, [pc, #64]	@ (8002240 <HAL_RCC_OscConfig+0x4cc>)
 8002200:	2200      	movs	r2, #0
 8002202:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002204:	f7fe fad4 	bl	80007b0 <HAL_GetTick>
 8002208:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800220a:	e008      	b.n	800221e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800220c:	f7fe fad0 	bl	80007b0 <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	2b02      	cmp	r3, #2
 8002218:	d901      	bls.n	800221e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e026      	b.n	800226c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800221e:	4b06      	ldr	r3, [pc, #24]	@ (8002238 <HAL_RCC_OscConfig+0x4c4>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d1f0      	bne.n	800220c <HAL_RCC_OscConfig+0x498>
 800222a:	e01e      	b.n	800226a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	69db      	ldr	r3, [r3, #28]
 8002230:	2b01      	cmp	r3, #1
 8002232:	d107      	bne.n	8002244 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e019      	b.n	800226c <HAL_RCC_OscConfig+0x4f8>
 8002238:	40021000 	.word	0x40021000
 800223c:	40007000 	.word	0x40007000
 8002240:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002244:	4b0b      	ldr	r3, [pc, #44]	@ (8002274 <HAL_RCC_OscConfig+0x500>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6a1b      	ldr	r3, [r3, #32]
 8002254:	429a      	cmp	r2, r3
 8002256:	d106      	bne.n	8002266 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002262:	429a      	cmp	r2, r3
 8002264:	d001      	beq.n	800226a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e000      	b.n	800226c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800226a:	2300      	movs	r3, #0
}
 800226c:	4618      	mov	r0, r3
 800226e:	3718      	adds	r7, #24
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	40021000 	.word	0x40021000

08002278 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d101      	bne.n	800228c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e0d0      	b.n	800242e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800228c:	4b6a      	ldr	r3, [pc, #424]	@ (8002438 <HAL_RCC_ClockConfig+0x1c0>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0307 	and.w	r3, r3, #7
 8002294:	683a      	ldr	r2, [r7, #0]
 8002296:	429a      	cmp	r2, r3
 8002298:	d910      	bls.n	80022bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800229a:	4b67      	ldr	r3, [pc, #412]	@ (8002438 <HAL_RCC_ClockConfig+0x1c0>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f023 0207 	bic.w	r2, r3, #7
 80022a2:	4965      	ldr	r1, [pc, #404]	@ (8002438 <HAL_RCC_ClockConfig+0x1c0>)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022aa:	4b63      	ldr	r3, [pc, #396]	@ (8002438 <HAL_RCC_ClockConfig+0x1c0>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0307 	and.w	r3, r3, #7
 80022b2:	683a      	ldr	r2, [r7, #0]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d001      	beq.n	80022bc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e0b8      	b.n	800242e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0302 	and.w	r3, r3, #2
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d020      	beq.n	800230a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0304 	and.w	r3, r3, #4
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d005      	beq.n	80022e0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022d4:	4b59      	ldr	r3, [pc, #356]	@ (800243c <HAL_RCC_ClockConfig+0x1c4>)
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	4a58      	ldr	r2, [pc, #352]	@ (800243c <HAL_RCC_ClockConfig+0x1c4>)
 80022da:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80022de:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0308 	and.w	r3, r3, #8
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d005      	beq.n	80022f8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022ec:	4b53      	ldr	r3, [pc, #332]	@ (800243c <HAL_RCC_ClockConfig+0x1c4>)
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	4a52      	ldr	r2, [pc, #328]	@ (800243c <HAL_RCC_ClockConfig+0x1c4>)
 80022f2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80022f6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022f8:	4b50      	ldr	r3, [pc, #320]	@ (800243c <HAL_RCC_ClockConfig+0x1c4>)
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	494d      	ldr	r1, [pc, #308]	@ (800243c <HAL_RCC_ClockConfig+0x1c4>)
 8002306:	4313      	orrs	r3, r2
 8002308:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	2b00      	cmp	r3, #0
 8002314:	d040      	beq.n	8002398 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	2b01      	cmp	r3, #1
 800231c:	d107      	bne.n	800232e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800231e:	4b47      	ldr	r3, [pc, #284]	@ (800243c <HAL_RCC_ClockConfig+0x1c4>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d115      	bne.n	8002356 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e07f      	b.n	800242e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	2b02      	cmp	r3, #2
 8002334:	d107      	bne.n	8002346 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002336:	4b41      	ldr	r3, [pc, #260]	@ (800243c <HAL_RCC_ClockConfig+0x1c4>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d109      	bne.n	8002356 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e073      	b.n	800242e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002346:	4b3d      	ldr	r3, [pc, #244]	@ (800243c <HAL_RCC_ClockConfig+0x1c4>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0302 	and.w	r3, r3, #2
 800234e:	2b00      	cmp	r3, #0
 8002350:	d101      	bne.n	8002356 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e06b      	b.n	800242e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002356:	4b39      	ldr	r3, [pc, #228]	@ (800243c <HAL_RCC_ClockConfig+0x1c4>)
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f023 0203 	bic.w	r2, r3, #3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	4936      	ldr	r1, [pc, #216]	@ (800243c <HAL_RCC_ClockConfig+0x1c4>)
 8002364:	4313      	orrs	r3, r2
 8002366:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002368:	f7fe fa22 	bl	80007b0 <HAL_GetTick>
 800236c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800236e:	e00a      	b.n	8002386 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002370:	f7fe fa1e 	bl	80007b0 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800237e:	4293      	cmp	r3, r2
 8002380:	d901      	bls.n	8002386 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e053      	b.n	800242e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002386:	4b2d      	ldr	r3, [pc, #180]	@ (800243c <HAL_RCC_ClockConfig+0x1c4>)
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f003 020c 	and.w	r2, r3, #12
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	429a      	cmp	r2, r3
 8002396:	d1eb      	bne.n	8002370 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002398:	4b27      	ldr	r3, [pc, #156]	@ (8002438 <HAL_RCC_ClockConfig+0x1c0>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0307 	and.w	r3, r3, #7
 80023a0:	683a      	ldr	r2, [r7, #0]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d210      	bcs.n	80023c8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023a6:	4b24      	ldr	r3, [pc, #144]	@ (8002438 <HAL_RCC_ClockConfig+0x1c0>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f023 0207 	bic.w	r2, r3, #7
 80023ae:	4922      	ldr	r1, [pc, #136]	@ (8002438 <HAL_RCC_ClockConfig+0x1c0>)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023b6:	4b20      	ldr	r3, [pc, #128]	@ (8002438 <HAL_RCC_ClockConfig+0x1c0>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0307 	and.w	r3, r3, #7
 80023be:	683a      	ldr	r2, [r7, #0]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d001      	beq.n	80023c8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e032      	b.n	800242e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0304 	and.w	r3, r3, #4
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d008      	beq.n	80023e6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023d4:	4b19      	ldr	r3, [pc, #100]	@ (800243c <HAL_RCC_ClockConfig+0x1c4>)
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	4916      	ldr	r1, [pc, #88]	@ (800243c <HAL_RCC_ClockConfig+0x1c4>)
 80023e2:	4313      	orrs	r3, r2
 80023e4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0308 	and.w	r3, r3, #8
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d009      	beq.n	8002406 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80023f2:	4b12      	ldr	r3, [pc, #72]	@ (800243c <HAL_RCC_ClockConfig+0x1c4>)
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	00db      	lsls	r3, r3, #3
 8002400:	490e      	ldr	r1, [pc, #56]	@ (800243c <HAL_RCC_ClockConfig+0x1c4>)
 8002402:	4313      	orrs	r3, r2
 8002404:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002406:	f000 f821 	bl	800244c <HAL_RCC_GetSysClockFreq>
 800240a:	4602      	mov	r2, r0
 800240c:	4b0b      	ldr	r3, [pc, #44]	@ (800243c <HAL_RCC_ClockConfig+0x1c4>)
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	091b      	lsrs	r3, r3, #4
 8002412:	f003 030f 	and.w	r3, r3, #15
 8002416:	490a      	ldr	r1, [pc, #40]	@ (8002440 <HAL_RCC_ClockConfig+0x1c8>)
 8002418:	5ccb      	ldrb	r3, [r1, r3]
 800241a:	fa22 f303 	lsr.w	r3, r2, r3
 800241e:	4a09      	ldr	r2, [pc, #36]	@ (8002444 <HAL_RCC_ClockConfig+0x1cc>)
 8002420:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002422:	4b09      	ldr	r3, [pc, #36]	@ (8002448 <HAL_RCC_ClockConfig+0x1d0>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4618      	mov	r0, r3
 8002428:	f7fe f980 	bl	800072c <HAL_InitTick>

  return HAL_OK;
 800242c:	2300      	movs	r3, #0
}
 800242e:	4618      	mov	r0, r3
 8002430:	3710      	adds	r7, #16
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	40022000 	.word	0x40022000
 800243c:	40021000 	.word	0x40021000
 8002440:	080025dc 	.word	0x080025dc
 8002444:	20000000 	.word	0x20000000
 8002448:	20000004 	.word	0x20000004

0800244c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800244c:	b480      	push	{r7}
 800244e:	b087      	sub	sp, #28
 8002450:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002452:	2300      	movs	r3, #0
 8002454:	60fb      	str	r3, [r7, #12]
 8002456:	2300      	movs	r3, #0
 8002458:	60bb      	str	r3, [r7, #8]
 800245a:	2300      	movs	r3, #0
 800245c:	617b      	str	r3, [r7, #20]
 800245e:	2300      	movs	r3, #0
 8002460:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002462:	2300      	movs	r3, #0
 8002464:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002466:	4b1e      	ldr	r3, [pc, #120]	@ (80024e0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	f003 030c 	and.w	r3, r3, #12
 8002472:	2b04      	cmp	r3, #4
 8002474:	d002      	beq.n	800247c <HAL_RCC_GetSysClockFreq+0x30>
 8002476:	2b08      	cmp	r3, #8
 8002478:	d003      	beq.n	8002482 <HAL_RCC_GetSysClockFreq+0x36>
 800247a:	e027      	b.n	80024cc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800247c:	4b19      	ldr	r3, [pc, #100]	@ (80024e4 <HAL_RCC_GetSysClockFreq+0x98>)
 800247e:	613b      	str	r3, [r7, #16]
      break;
 8002480:	e027      	b.n	80024d2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	0c9b      	lsrs	r3, r3, #18
 8002486:	f003 030f 	and.w	r3, r3, #15
 800248a:	4a17      	ldr	r2, [pc, #92]	@ (80024e8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800248c:	5cd3      	ldrb	r3, [r2, r3]
 800248e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d010      	beq.n	80024bc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800249a:	4b11      	ldr	r3, [pc, #68]	@ (80024e0 <HAL_RCC_GetSysClockFreq+0x94>)
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	0c5b      	lsrs	r3, r3, #17
 80024a0:	f003 0301 	and.w	r3, r3, #1
 80024a4:	4a11      	ldr	r2, [pc, #68]	@ (80024ec <HAL_RCC_GetSysClockFreq+0xa0>)
 80024a6:	5cd3      	ldrb	r3, [r2, r3]
 80024a8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a0d      	ldr	r2, [pc, #52]	@ (80024e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80024ae:	fb03 f202 	mul.w	r2, r3, r2
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024b8:	617b      	str	r3, [r7, #20]
 80024ba:	e004      	b.n	80024c6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	4a0c      	ldr	r2, [pc, #48]	@ (80024f0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80024c0:	fb02 f303 	mul.w	r3, r2, r3
 80024c4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	613b      	str	r3, [r7, #16]
      break;
 80024ca:	e002      	b.n	80024d2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80024cc:	4b05      	ldr	r3, [pc, #20]	@ (80024e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80024ce:	613b      	str	r3, [r7, #16]
      break;
 80024d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024d2:	693b      	ldr	r3, [r7, #16]
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	371c      	adds	r7, #28
 80024d8:	46bd      	mov	sp, r7
 80024da:	bc80      	pop	{r7}
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	40021000 	.word	0x40021000
 80024e4:	007a1200 	.word	0x007a1200
 80024e8:	080025f4 	.word	0x080025f4
 80024ec:	08002604 	.word	0x08002604
 80024f0:	003d0900 	.word	0x003d0900

080024f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024f8:	4b02      	ldr	r3, [pc, #8]	@ (8002504 <HAL_RCC_GetHCLKFreq+0x10>)
 80024fa:	681b      	ldr	r3, [r3, #0]
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	46bd      	mov	sp, r7
 8002500:	bc80      	pop	{r7}
 8002502:	4770      	bx	lr
 8002504:	20000000 	.word	0x20000000

08002508 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800250c:	f7ff fff2 	bl	80024f4 <HAL_RCC_GetHCLKFreq>
 8002510:	4602      	mov	r2, r0
 8002512:	4b05      	ldr	r3, [pc, #20]	@ (8002528 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	0a1b      	lsrs	r3, r3, #8
 8002518:	f003 0307 	and.w	r3, r3, #7
 800251c:	4903      	ldr	r1, [pc, #12]	@ (800252c <HAL_RCC_GetPCLK1Freq+0x24>)
 800251e:	5ccb      	ldrb	r3, [r1, r3]
 8002520:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002524:	4618      	mov	r0, r3
 8002526:	bd80      	pop	{r7, pc}
 8002528:	40021000 	.word	0x40021000
 800252c:	080025ec 	.word	0x080025ec

08002530 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002530:	b480      	push	{r7}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002538:	4b0a      	ldr	r3, [pc, #40]	@ (8002564 <RCC_Delay+0x34>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a0a      	ldr	r2, [pc, #40]	@ (8002568 <RCC_Delay+0x38>)
 800253e:	fba2 2303 	umull	r2, r3, r2, r3
 8002542:	0a5b      	lsrs	r3, r3, #9
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	fb02 f303 	mul.w	r3, r2, r3
 800254a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800254c:	bf00      	nop
  }
  while (Delay --);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	1e5a      	subs	r2, r3, #1
 8002552:	60fa      	str	r2, [r7, #12]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d1f9      	bne.n	800254c <RCC_Delay+0x1c>
}
 8002558:	bf00      	nop
 800255a:	bf00      	nop
 800255c:	3714      	adds	r7, #20
 800255e:	46bd      	mov	sp, r7
 8002560:	bc80      	pop	{r7}
 8002562:	4770      	bx	lr
 8002564:	20000000 	.word	0x20000000
 8002568:	10624dd3 	.word	0x10624dd3

0800256c <memset>:
 800256c:	4603      	mov	r3, r0
 800256e:	4402      	add	r2, r0
 8002570:	4293      	cmp	r3, r2
 8002572:	d100      	bne.n	8002576 <memset+0xa>
 8002574:	4770      	bx	lr
 8002576:	f803 1b01 	strb.w	r1, [r3], #1
 800257a:	e7f9      	b.n	8002570 <memset+0x4>

0800257c <__libc_init_array>:
 800257c:	b570      	push	{r4, r5, r6, lr}
 800257e:	2600      	movs	r6, #0
 8002580:	4d0c      	ldr	r5, [pc, #48]	@ (80025b4 <__libc_init_array+0x38>)
 8002582:	4c0d      	ldr	r4, [pc, #52]	@ (80025b8 <__libc_init_array+0x3c>)
 8002584:	1b64      	subs	r4, r4, r5
 8002586:	10a4      	asrs	r4, r4, #2
 8002588:	42a6      	cmp	r6, r4
 800258a:	d109      	bne.n	80025a0 <__libc_init_array+0x24>
 800258c:	f000 f81a 	bl	80025c4 <_init>
 8002590:	2600      	movs	r6, #0
 8002592:	4d0a      	ldr	r5, [pc, #40]	@ (80025bc <__libc_init_array+0x40>)
 8002594:	4c0a      	ldr	r4, [pc, #40]	@ (80025c0 <__libc_init_array+0x44>)
 8002596:	1b64      	subs	r4, r4, r5
 8002598:	10a4      	asrs	r4, r4, #2
 800259a:	42a6      	cmp	r6, r4
 800259c:	d105      	bne.n	80025aa <__libc_init_array+0x2e>
 800259e:	bd70      	pop	{r4, r5, r6, pc}
 80025a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80025a4:	4798      	blx	r3
 80025a6:	3601      	adds	r6, #1
 80025a8:	e7ee      	b.n	8002588 <__libc_init_array+0xc>
 80025aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80025ae:	4798      	blx	r3
 80025b0:	3601      	adds	r6, #1
 80025b2:	e7f2      	b.n	800259a <__libc_init_array+0x1e>
 80025b4:	08002608 	.word	0x08002608
 80025b8:	08002608 	.word	0x08002608
 80025bc:	08002608 	.word	0x08002608
 80025c0:	0800260c 	.word	0x0800260c

080025c4 <_init>:
 80025c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025c6:	bf00      	nop
 80025c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025ca:	bc08      	pop	{r3}
 80025cc:	469e      	mov	lr, r3
 80025ce:	4770      	bx	lr

080025d0 <_fini>:
 80025d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025d2:	bf00      	nop
 80025d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025d6:	bc08      	pop	{r3}
 80025d8:	469e      	mov	lr, r3
 80025da:	4770      	bx	lr
