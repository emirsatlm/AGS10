
gas_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002558  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002664  08002664  00003664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002690  08002690  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002690  08002690  0000400c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002690  08002690  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002690  08002690  00003690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002694  08002694  00003694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002698  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000080  2000000c  080026a4  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000008c  080026a4  0000408c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005f5f  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000138c  00000000  00000000  00009f94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000700  00000000  00000000  0000b320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000558  00000000  00000000  0000ba20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015f12  00000000  00000000  0000bf78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008ca9  00000000  00000000  00021e8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e847  00000000  00000000  0002ab33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a937a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001bb8  00000000  00000000  000a93c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000aaf78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800264c 	.word	0x0800264c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	0800264c 	.word	0x0800264c

0800014c <ags10_init>:
 */
#include "AGS10.h"

bool ags10_init(AGS10_HandleTypeDef *ph_sensor, 
                uint8_t i2c_addr) 
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	460b      	mov	r3, r1
 8000156:	70fb      	strb	r3, [r7, #3]
    ph_sensor->i2c_addr = i2c_addr;
 8000158:	687b      	ldr	r3, [r7, #4]
 800015a:	78fa      	ldrb	r2, [r7, #3]
 800015c:	701a      	strb	r2, [r3, #0]
    return true;
 800015e:	2301      	movs	r3, #1
}
 8000160:	4618      	mov	r0, r3
 8000162:	370c      	adds	r7, #12
 8000164:	46bd      	mov	sp, r7
 8000166:	bc80      	pop	{r7}
 8000168:	4770      	bx	lr

0800016a <ags10_register_read>:

bool ags10_register_read(AGS10_HandleTypeDef *ph_sensor, 
                         uint8_t reg, 
                         uint16_t delayms, 
                         uint32_t *p_value)
{
 800016a:	b580      	push	{r7, lr}
 800016c:	b086      	sub	sp, #24
 800016e:	af00      	add	r7, sp, #0
 8000170:	60f8      	str	r0, [r7, #12]
 8000172:	607b      	str	r3, [r7, #4]
 8000174:	460b      	mov	r3, r1
 8000176:	72fb      	strb	r3, [r7, #11]
 8000178:	4613      	mov	r3, r2
 800017a:	813b      	strh	r3, [r7, #8]
    

    bool register_addr_send_status = AGS10_IO_Write(ph_sensor->i2c_addr, &reg, 1);
 800017c:	68fb      	ldr	r3, [r7, #12]
 800017e:	781b      	ldrb	r3, [r3, #0]
 8000180:	f107 010b 	add.w	r1, r7, #11
 8000184:	2201      	movs	r2, #1
 8000186:	4618      	mov	r0, r3
 8000188:	f000 f9ce 	bl	8000528 <AGS10_IO_Write>
 800018c:	4603      	mov	r3, r0
 800018e:	75fb      	strb	r3, [r7, #23]

    if (false == register_addr_send_status)
 8000190:	7dfb      	ldrb	r3, [r7, #23]
 8000192:	f083 0301 	eor.w	r3, r3, #1
 8000196:	b2db      	uxtb	r3, r3
 8000198:	2b00      	cmp	r3, #0
 800019a:	d001      	beq.n	80001a0 <ags10_register_read+0x36>
    {
        return false;
 800019c:	2300      	movs	r3, #0
 800019e:	e032      	b.n	8000206 <ags10_register_read+0x9c>
    }
        

    AGS10_IO_Delay(delayms);
 80001a0:	893b      	ldrh	r3, [r7, #8]
 80001a2:	4618      	mov	r0, r3
 80001a4:	f000 fa00 	bl	80005a8 <AGS10_IO_Delay>

    #define READ_BYTE_CNT 5
    uint8_t buff[READ_BYTE_CNT] = {0U};
 80001a8:	f107 0310 	add.w	r3, r7, #16
 80001ac:	2200      	movs	r2, #0
 80001ae:	601a      	str	r2, [r3, #0]
 80001b0:	711a      	strb	r2, [r3, #4]

    if (!AGS10_IO_Read(ph_sensor->i2c_addr,
 80001b2:	68fb      	ldr	r3, [r7, #12]
 80001b4:	781b      	ldrb	r3, [r3, #0]
 80001b6:	f107 0110 	add.w	r1, r7, #16
 80001ba:	2205      	movs	r2, #5
 80001bc:	4618      	mov	r0, r3
 80001be:	f000 f9d3 	bl	8000568 <AGS10_IO_Read>
 80001c2:	4603      	mov	r3, r0
 80001c4:	f083 0301 	eor.w	r3, r3, #1
 80001c8:	b2db      	uxtb	r3, r3
 80001ca:	2b00      	cmp	r3, #0
 80001cc:	d001      	beq.n	80001d2 <ags10_register_read+0x68>
                       buff,
                       READ_BYTE_CNT))
    {
        return false;
 80001ce:	2300      	movs	r3, #0
 80001d0:	e019      	b.n	8000206 <ags10_register_read+0x9c>
    }
    #undef READ_BYTE_CNT

    if (ags10_crc8(buff, AGS10MA_DATA_LEN) != buff[AGS10MA_DATA_LEN]) 
 80001d2:	f107 0310 	add.w	r3, r7, #16
 80001d6:	2104      	movs	r1, #4
 80001d8:	4618      	mov	r0, r3
 80001da:	f000 f86d 	bl	80002b8 <ags10_crc8>
 80001de:	4603      	mov	r3, r0
 80001e0:	461a      	mov	r2, r3
 80001e2:	7d3b      	ldrb	r3, [r7, #20]
 80001e4:	429a      	cmp	r2, r3
 80001e6:	d001      	beq.n	80001ec <ags10_register_read+0x82>
    {
        return false; 
 80001e8:	2300      	movs	r3, #0
 80001ea:	e00c      	b.n	8000206 <ags10_register_read+0x9c>
    }

    *p_value = ((uint32_t)buff[0] << 24) |
 80001ec:	7c3b      	ldrb	r3, [r7, #16]
 80001ee:	061a      	lsls	r2, r3, #24
               ((uint32_t)buff[1] << 16) |
 80001f0:	7c7b      	ldrb	r3, [r7, #17]
 80001f2:	041b      	lsls	r3, r3, #16
    *p_value = ((uint32_t)buff[0] << 24) |
 80001f4:	431a      	orrs	r2, r3
               ((uint32_t)buff[2] << 8)  |
 80001f6:	7cbb      	ldrb	r3, [r7, #18]
 80001f8:	021b      	lsls	r3, r3, #8
               ((uint32_t)buff[1] << 16) |
 80001fa:	4313      	orrs	r3, r2
               ((uint32_t)buff[3]);
 80001fc:	7cfa      	ldrb	r2, [r7, #19]
               ((uint32_t)buff[2] << 8)  |
 80001fe:	431a      	orrs	r2, r3
    *p_value = ((uint32_t)buff[0] << 24) |
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	601a      	str	r2, [r3, #0]

    return true;
 8000204:	2301      	movs	r3, #1
}
 8000206:	4618      	mov	r0, r3
 8000208:	3718      	adds	r7, #24
 800020a:	46bd      	mov	sp, r7
 800020c:	bd80      	pop	{r7, pc}

0800020e <ags10_firmware_version_get>:

bool ags10_firmware_version_get(AGS10_HandleTypeDef *ph_sensor, 
                                uint32_t *p_version)
{
 800020e:	b580      	push	{r7, lr}
 8000210:	b082      	sub	sp, #8
 8000212:	af00      	add	r7, sp, #0
 8000214:	6078      	str	r0, [r7, #4]
 8000216:	6039      	str	r1, [r7, #0]
    return ags10_register_read(ph_sensor, AGS10MA_VERSION_REG, 30, p_version);
 8000218:	683b      	ldr	r3, [r7, #0]
 800021a:	221e      	movs	r2, #30
 800021c:	2111      	movs	r1, #17
 800021e:	6878      	ldr	r0, [r7, #4]
 8000220:	f7ff ffa3 	bl	800016a <ags10_register_read>
 8000224:	4603      	mov	r3, r0
}
 8000226:	4618      	mov	r0, r3
 8000228:	3708      	adds	r7, #8
 800022a:	46bd      	mov	sp, r7
 800022c:	bd80      	pop	{r7, pc}

0800022e <ags10_gas_resistance_get>:

bool ags10_gas_resistance_get(AGS10_HandleTypeDef *ph_sensor, 
                              uint32_t *p_resistance)
{
 800022e:	b580      	push	{r7, lr}
 8000230:	b082      	sub	sp, #8
 8000232:	af00      	add	r7, sp, #0
 8000234:	6078      	str	r0, [r7, #4]
 8000236:	6039      	str	r1, [r7, #0]
    if (false == ags10_register_read(ph_sensor, 
 8000238:	683b      	ldr	r3, [r7, #0]
 800023a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800023e:	2120      	movs	r1, #32
 8000240:	6878      	ldr	r0, [r7, #4]
 8000242:	f7ff ff92 	bl	800016a <ags10_register_read>
 8000246:	4603      	mov	r3, r0
 8000248:	f083 0301 	eor.w	r3, r3, #1
 800024c:	b2db      	uxtb	r3, r3
 800024e:	2b00      	cmp	r3, #0
 8000250:	d005      	beq.n	800025e <ags10_gas_resistance_get+0x30>
                                     AGS10MA_GAS_RES_REG, 
                                     1000, 
                                     p_resistance)) 
    {
        #define FAIL_VAL 0xFFFFFFFF
        *p_resistance = FAIL_VAL;
 8000252:	683b      	ldr	r3, [r7, #0]
 8000254:	f04f 32ff 	mov.w	r2, #4294967295
 8000258:	601a      	str	r2, [r3, #0]
        #undef FAIL_VAL
        return false;
 800025a:	2300      	movs	r3, #0
 800025c:	e007      	b.n	800026e <ags10_gas_resistance_get+0x40>
    }

    *p_resistance *= 100;
 800025e:	683b      	ldr	r3, [r7, #0]
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	2264      	movs	r2, #100	@ 0x64
 8000264:	fb03 f202 	mul.w	r2, r3, r2
 8000268:	683b      	ldr	r3, [r7, #0]
 800026a:	601a      	str	r2, [r3, #0]
    
    return true;
 800026c:	2301      	movs	r3, #1
}
 800026e:	4618      	mov	r0, r3
 8000270:	3708      	adds	r7, #8
 8000272:	46bd      	mov	sp, r7
 8000274:	bd80      	pop	{r7, pc}

08000276 <ags10_tvoc_get>:

bool ags10_tvoc_get(AGS10_HandleTypeDef *ph_sensor, uint32_t *p_tvoc) 
{
 8000276:	b580      	push	{r7, lr}
 8000278:	b082      	sub	sp, #8
 800027a:	af00      	add	r7, sp, #0
 800027c:	6078      	str	r0, [r7, #4]
 800027e:	6039      	str	r1, [r7, #0]
    if (false == ags10_register_read(ph_sensor, 
 8000280:	683b      	ldr	r3, [r7, #0]
 8000282:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000286:	2100      	movs	r1, #0
 8000288:	6878      	ldr	r0, [r7, #4]
 800028a:	f7ff ff6e 	bl	800016a <ags10_register_read>
 800028e:	4603      	mov	r3, r0
 8000290:	f083 0301 	eor.w	r3, r3, #1
 8000294:	b2db      	uxtb	r3, r3
 8000296:	2b00      	cmp	r3, #0
 8000298:	d003      	beq.n	80002a2 <ags10_tvoc_get+0x2c>
                                     AGS10MA_TVOC_STAT_REG, 
                                     1000, 
                                     p_tvoc)) 
    {
        #define FAIL_VAL 0xFFFFFFFF
        *p_tvoc = FAIL_VAL;
 800029a:	683b      	ldr	r3, [r7, #0]
 800029c:	f04f 32ff 	mov.w	r2, #4294967295
 80002a0:	601a      	str	r2, [r3, #0]
        #undef FAIL_VAL
    }

    *p_tvoc &= 0xFFFFFF;
 80002a2:	683b      	ldr	r3, [r7, #0]
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 80002aa:	683b      	ldr	r3, [r7, #0]
 80002ac:	601a      	str	r2, [r3, #0]

    return true;
 80002ae:	2301      	movs	r3, #1
}
 80002b0:	4618      	mov	r0, r3
 80002b2:	3708      	adds	r7, #8
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bd80      	pop	{r7, pc}

080002b8 <ags10_crc8>:

    return true;
}

uint8_t ags10_crc8(const uint8_t *p_data, int len)
{
 80002b8:	b480      	push	{r7}
 80002ba:	b087      	sub	sp, #28
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]
 80002c0:	6039      	str	r1, [r7, #0]
    const uint8_t POLYNOMIAL = 0x31;
 80002c2:	2331      	movs	r3, #49	@ 0x31
 80002c4:	72fb      	strb	r3, [r7, #11]
    uint8_t crc = 0xFF;
 80002c6:	23ff      	movs	r3, #255	@ 0xff
 80002c8:	75fb      	strb	r3, [r7, #23]

    for (int idx_1 = 0; idx_1 < len; idx_1++)
 80002ca:	2300      	movs	r3, #0
 80002cc:	613b      	str	r3, [r7, #16]
 80002ce:	e024      	b.n	800031a <ags10_crc8+0x62>
    {
        crc ^= p_data[idx_1];
 80002d0:	693b      	ldr	r3, [r7, #16]
 80002d2:	687a      	ldr	r2, [r7, #4]
 80002d4:	4413      	add	r3, r2
 80002d6:	781a      	ldrb	r2, [r3, #0]
 80002d8:	7dfb      	ldrb	r3, [r7, #23]
 80002da:	4053      	eors	r3, r2
 80002dc:	75fb      	strb	r3, [r7, #23]

        for (int idx_2 = 0; idx_2 < 8; idx_2++)
 80002de:	2300      	movs	r3, #0
 80002e0:	60fb      	str	r3, [r7, #12]
 80002e2:	e014      	b.n	800030e <ags10_crc8+0x56>
        {
            crc = (crc & 0x80) ? ((crc << 1) ^ POLYNOMIAL) : (crc << 1);
 80002e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	da09      	bge.n	8000300 <ags10_crc8+0x48>
 80002ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80002f0:	005b      	lsls	r3, r3, #1
 80002f2:	b25a      	sxtb	r2, r3
 80002f4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80002f8:	4053      	eors	r3, r2
 80002fa:	b25b      	sxtb	r3, r3
 80002fc:	b2db      	uxtb	r3, r3
 80002fe:	e002      	b.n	8000306 <ags10_crc8+0x4e>
 8000300:	7dfb      	ldrb	r3, [r7, #23]
 8000302:	005b      	lsls	r3, r3, #1
 8000304:	b2db      	uxtb	r3, r3
 8000306:	75fb      	strb	r3, [r7, #23]
        for (int idx_2 = 0; idx_2 < 8; idx_2++)
 8000308:	68fb      	ldr	r3, [r7, #12]
 800030a:	3301      	adds	r3, #1
 800030c:	60fb      	str	r3, [r7, #12]
 800030e:	68fb      	ldr	r3, [r7, #12]
 8000310:	2b07      	cmp	r3, #7
 8000312:	dde7      	ble.n	80002e4 <ags10_crc8+0x2c>
    for (int idx_1 = 0; idx_1 < len; idx_1++)
 8000314:	693b      	ldr	r3, [r7, #16]
 8000316:	3301      	adds	r3, #1
 8000318:	613b      	str	r3, [r7, #16]
 800031a:	693a      	ldr	r2, [r7, #16]
 800031c:	683b      	ldr	r3, [r7, #0]
 800031e:	429a      	cmp	r2, r3
 8000320:	dbd6      	blt.n	80002d0 <ags10_crc8+0x18>
        }
    }

    return crc;
 8000322:	7dfb      	ldrb	r3, [r7, #23]
}
 8000324:	4618      	mov	r0, r3
 8000326:	371c      	adds	r7, #28
 8000328:	46bd      	mov	sp, r7
 800032a:	bc80      	pop	{r7}
 800032c:	4770      	bx	lr
	...

08000330 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 8000334:	f000 fa28 	bl	8000788 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000338:	f000 f82a 	bl	8000390 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800033c:	f000 f89c 	bl	8000478 <MX_GPIO_Init>
  MX_I2C2_Init();
 8000340:	f000 f86c 	bl	800041c <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  app_init();
 8000344:	f000 f93e 	bl	80005c4 <app_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      if (!ags10_gas_resistance_get(&ags10, &gas_resistance))
 8000348:	490e      	ldr	r1, [pc, #56]	@ (8000384 <main+0x54>)
 800034a:	480f      	ldr	r0, [pc, #60]	@ (8000388 <main+0x58>)
 800034c:	f7ff ff6f 	bl	800022e <ags10_gas_resistance_get>
 8000350:	4603      	mov	r3, r0
 8000352:	f083 0301 	eor.w	r3, r3, #1
 8000356:	b2db      	uxtb	r3, r3
 8000358:	2b00      	cmp	r3, #0
 800035a:	d003      	beq.n	8000364 <main+0x34>
      {
          gas_resistance = 0xFFFFFFFF;
 800035c:	4b09      	ldr	r3, [pc, #36]	@ (8000384 <main+0x54>)
 800035e:	f04f 32ff 	mov.w	r2, #4294967295
 8000362:	601a      	str	r2, [r3, #0]
      }

      if (!ags10_tvoc_get(&ags10, &tvoc))
 8000364:	4909      	ldr	r1, [pc, #36]	@ (800038c <main+0x5c>)
 8000366:	4808      	ldr	r0, [pc, #32]	@ (8000388 <main+0x58>)
 8000368:	f7ff ff85 	bl	8000276 <ags10_tvoc_get>
 800036c:	4603      	mov	r3, r0
 800036e:	f083 0301 	eor.w	r3, r3, #1
 8000372:	b2db      	uxtb	r3, r3
 8000374:	2b00      	cmp	r3, #0
 8000376:	d0e7      	beq.n	8000348 <main+0x18>
      {
          tvoc = 0xFFFFFFFF;
 8000378:	4b04      	ldr	r3, [pc, #16]	@ (800038c <main+0x5c>)
 800037a:	f04f 32ff 	mov.w	r2, #4294967295
 800037e:	601a      	str	r2, [r3, #0]
      if (!ags10_gas_resistance_get(&ags10, &gas_resistance))
 8000380:	e7e2      	b.n	8000348 <main+0x18>
 8000382:	bf00      	nop
 8000384:	20000080 	.word	0x20000080
 8000388:	20000028 	.word	0x20000028
 800038c:	20000084 	.word	0x20000084

08000390 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b090      	sub	sp, #64	@ 0x40
 8000394:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000396:	f107 0318 	add.w	r3, r7, #24
 800039a:	2228      	movs	r2, #40	@ 0x28
 800039c:	2100      	movs	r1, #0
 800039e:	4618      	mov	r0, r3
 80003a0:	f002 f928 	bl	80025f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003a4:	1d3b      	adds	r3, r7, #4
 80003a6:	2200      	movs	r2, #0
 80003a8:	601a      	str	r2, [r3, #0]
 80003aa:	605a      	str	r2, [r3, #4]
 80003ac:	609a      	str	r2, [r3, #8]
 80003ae:	60da      	str	r2, [r3, #12]
 80003b0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003b2:	2301      	movs	r3, #1
 80003b4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003b6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80003ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003bc:	2300      	movs	r3, #0
 80003be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003c0:	2301      	movs	r3, #1
 80003c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003c4:	2302      	movs	r3, #2
 80003c6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003c8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80003cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003ce:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80003d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003d4:	f107 0318 	add.w	r3, r7, #24
 80003d8:	4618      	mov	r0, r3
 80003da:	f001 fd0f 	bl	8001dfc <HAL_RCC_OscConfig>
 80003de:	4603      	mov	r3, r0
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d001      	beq.n	80003e8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80003e4:	f000 f900 	bl	80005e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003e8:	230f      	movs	r3, #15
 80003ea:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003ec:	2302      	movs	r3, #2
 80003ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003f0:	2300      	movs	r3, #0
 80003f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80003f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003fa:	2300      	movs	r3, #0
 80003fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003fe:	1d3b      	adds	r3, r7, #4
 8000400:	2102      	movs	r1, #2
 8000402:	4618      	mov	r0, r3
 8000404:	f001 ff7c 	bl	8002300 <HAL_RCC_ClockConfig>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d001      	beq.n	8000412 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800040e:	f000 f8eb 	bl	80005e8 <Error_Handler>
  }
}
 8000412:	bf00      	nop
 8000414:	3740      	adds	r7, #64	@ 0x40
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}
	...

0800041c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000420:	4b13      	ldr	r3, [pc, #76]	@ (8000470 <MX_I2C2_Init+0x54>)
 8000422:	4a14      	ldr	r2, [pc, #80]	@ (8000474 <MX_I2C2_Init+0x58>)
 8000424:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 20000;
 8000426:	4b12      	ldr	r3, [pc, #72]	@ (8000470 <MX_I2C2_Init+0x54>)
 8000428:	f644 6220 	movw	r2, #20000	@ 0x4e20
 800042c:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800042e:	4b10      	ldr	r3, [pc, #64]	@ (8000470 <MX_I2C2_Init+0x54>)
 8000430:	2200      	movs	r2, #0
 8000432:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000434:	4b0e      	ldr	r3, [pc, #56]	@ (8000470 <MX_I2C2_Init+0x54>)
 8000436:	2200      	movs	r2, #0
 8000438:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800043a:	4b0d      	ldr	r3, [pc, #52]	@ (8000470 <MX_I2C2_Init+0x54>)
 800043c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000440:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000442:	4b0b      	ldr	r3, [pc, #44]	@ (8000470 <MX_I2C2_Init+0x54>)
 8000444:	2200      	movs	r2, #0
 8000446:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000448:	4b09      	ldr	r3, [pc, #36]	@ (8000470 <MX_I2C2_Init+0x54>)
 800044a:	2200      	movs	r2, #0
 800044c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800044e:	4b08      	ldr	r3, [pc, #32]	@ (8000470 <MX_I2C2_Init+0x54>)
 8000450:	2200      	movs	r2, #0
 8000452:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000454:	4b06      	ldr	r3, [pc, #24]	@ (8000470 <MX_I2C2_Init+0x54>)
 8000456:	2200      	movs	r2, #0
 8000458:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800045a:	4805      	ldr	r0, [pc, #20]	@ (8000470 <MX_I2C2_Init+0x54>)
 800045c:	f000 fc9a 	bl	8000d94 <HAL_I2C_Init>
 8000460:	4603      	mov	r3, r0
 8000462:	2b00      	cmp	r3, #0
 8000464:	d001      	beq.n	800046a <MX_I2C2_Init+0x4e>
  {
    Error_Handler();
 8000466:	f000 f8bf 	bl	80005e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800046a:	bf00      	nop
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop
 8000470:	2000002c 	.word	0x2000002c
 8000474:	40005800 	.word	0x40005800

08000478 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b088      	sub	sp, #32
 800047c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800047e:	f107 0310 	add.w	r3, r7, #16
 8000482:	2200      	movs	r2, #0
 8000484:	601a      	str	r2, [r3, #0]
 8000486:	605a      	str	r2, [r3, #4]
 8000488:	609a      	str	r2, [r3, #8]
 800048a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800048c:	4b24      	ldr	r3, [pc, #144]	@ (8000520 <MX_GPIO_Init+0xa8>)
 800048e:	699b      	ldr	r3, [r3, #24]
 8000490:	4a23      	ldr	r2, [pc, #140]	@ (8000520 <MX_GPIO_Init+0xa8>)
 8000492:	f043 0310 	orr.w	r3, r3, #16
 8000496:	6193      	str	r3, [r2, #24]
 8000498:	4b21      	ldr	r3, [pc, #132]	@ (8000520 <MX_GPIO_Init+0xa8>)
 800049a:	699b      	ldr	r3, [r3, #24]
 800049c:	f003 0310 	and.w	r3, r3, #16
 80004a0:	60fb      	str	r3, [r7, #12]
 80004a2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004a4:	4b1e      	ldr	r3, [pc, #120]	@ (8000520 <MX_GPIO_Init+0xa8>)
 80004a6:	699b      	ldr	r3, [r3, #24]
 80004a8:	4a1d      	ldr	r2, [pc, #116]	@ (8000520 <MX_GPIO_Init+0xa8>)
 80004aa:	f043 0320 	orr.w	r3, r3, #32
 80004ae:	6193      	str	r3, [r2, #24]
 80004b0:	4b1b      	ldr	r3, [pc, #108]	@ (8000520 <MX_GPIO_Init+0xa8>)
 80004b2:	699b      	ldr	r3, [r3, #24]
 80004b4:	f003 0320 	and.w	r3, r3, #32
 80004b8:	60bb      	str	r3, [r7, #8]
 80004ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004bc:	4b18      	ldr	r3, [pc, #96]	@ (8000520 <MX_GPIO_Init+0xa8>)
 80004be:	699b      	ldr	r3, [r3, #24]
 80004c0:	4a17      	ldr	r2, [pc, #92]	@ (8000520 <MX_GPIO_Init+0xa8>)
 80004c2:	f043 0308 	orr.w	r3, r3, #8
 80004c6:	6193      	str	r3, [r2, #24]
 80004c8:	4b15      	ldr	r3, [pc, #84]	@ (8000520 <MX_GPIO_Init+0xa8>)
 80004ca:	699b      	ldr	r3, [r3, #24]
 80004cc:	f003 0308 	and.w	r3, r3, #8
 80004d0:	607b      	str	r3, [r7, #4]
 80004d2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004d4:	4b12      	ldr	r3, [pc, #72]	@ (8000520 <MX_GPIO_Init+0xa8>)
 80004d6:	699b      	ldr	r3, [r3, #24]
 80004d8:	4a11      	ldr	r2, [pc, #68]	@ (8000520 <MX_GPIO_Init+0xa8>)
 80004da:	f043 0304 	orr.w	r3, r3, #4
 80004de:	6193      	str	r3, [r2, #24]
 80004e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000520 <MX_GPIO_Init+0xa8>)
 80004e2:	699b      	ldr	r3, [r3, #24]
 80004e4:	f003 0304 	and.w	r3, r3, #4
 80004e8:	603b      	str	r3, [r7, #0]
 80004ea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 80004ec:	2200      	movs	r2, #0
 80004ee:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 80004f2:	480c      	ldr	r0, [pc, #48]	@ (8000524 <MX_GPIO_Init+0xac>)
 80004f4:	f000 fc36 	bl	8000d64 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80004f8:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80004fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004fe:	2301      	movs	r3, #1
 8000500:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000502:	2300      	movs	r3, #0
 8000504:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000506:	2302      	movs	r3, #2
 8000508:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800050a:	f107 0310 	add.w	r3, r7, #16
 800050e:	4619      	mov	r1, r3
 8000510:	4804      	ldr	r0, [pc, #16]	@ (8000524 <MX_GPIO_Init+0xac>)
 8000512:	f000 faa3 	bl	8000a5c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000516:	bf00      	nop
 8000518:	3720      	adds	r7, #32
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	40021000 	.word	0x40021000
 8000524:	40011000 	.word	0x40011000

08000528 <AGS10_IO_Write>:

/* USER CODE BEGIN 4 */
bool AGS10_IO_Write(uint8_t addr, uint8_t *pData, uint16_t length) {
 8000528:	b580      	push	{r7, lr}
 800052a:	b084      	sub	sp, #16
 800052c:	af02      	add	r7, sp, #8
 800052e:	4603      	mov	r3, r0
 8000530:	6039      	str	r1, [r7, #0]
 8000532:	71fb      	strb	r3, [r7, #7]
 8000534:	4613      	mov	r3, r2
 8000536:	80bb      	strh	r3, [r7, #4]
    return HAL_I2C_Master_Transmit(&hi2c2, addr << 1, pData, length, 100) == HAL_OK;
 8000538:	79fb      	ldrb	r3, [r7, #7]
 800053a:	b29b      	uxth	r3, r3
 800053c:	005b      	lsls	r3, r3, #1
 800053e:	b299      	uxth	r1, r3
 8000540:	88bb      	ldrh	r3, [r7, #4]
 8000542:	2264      	movs	r2, #100	@ 0x64
 8000544:	9200      	str	r2, [sp, #0]
 8000546:	683a      	ldr	r2, [r7, #0]
 8000548:	4806      	ldr	r0, [pc, #24]	@ (8000564 <AGS10_IO_Write+0x3c>)
 800054a:	f000 fd67 	bl	800101c <HAL_I2C_Master_Transmit>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	bf0c      	ite	eq
 8000554:	2301      	moveq	r3, #1
 8000556:	2300      	movne	r3, #0
 8000558:	b2db      	uxtb	r3, r3
}
 800055a:	4618      	mov	r0, r3
 800055c:	3708      	adds	r7, #8
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	2000002c 	.word	0x2000002c

08000568 <AGS10_IO_Read>:

bool AGS10_IO_Read(uint8_t addr, uint8_t *pData, uint16_t length) {
 8000568:	b580      	push	{r7, lr}
 800056a:	b084      	sub	sp, #16
 800056c:	af02      	add	r7, sp, #8
 800056e:	4603      	mov	r3, r0
 8000570:	6039      	str	r1, [r7, #0]
 8000572:	71fb      	strb	r3, [r7, #7]
 8000574:	4613      	mov	r3, r2
 8000576:	80bb      	strh	r3, [r7, #4]
    return HAL_I2C_Master_Receive(&hi2c2, addr << 1, pData, length, 100) == HAL_OK;
 8000578:	79fb      	ldrb	r3, [r7, #7]
 800057a:	b29b      	uxth	r3, r3
 800057c:	005b      	lsls	r3, r3, #1
 800057e:	b299      	uxth	r1, r3
 8000580:	88bb      	ldrh	r3, [r7, #4]
 8000582:	2264      	movs	r2, #100	@ 0x64
 8000584:	9200      	str	r2, [sp, #0]
 8000586:	683a      	ldr	r2, [r7, #0]
 8000588:	4806      	ldr	r0, [pc, #24]	@ (80005a4 <AGS10_IO_Read+0x3c>)
 800058a:	f000 fe45 	bl	8001218 <HAL_I2C_Master_Receive>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	bf0c      	ite	eq
 8000594:	2301      	moveq	r3, #1
 8000596:	2300      	movne	r3, #0
 8000598:	b2db      	uxtb	r3, r3
}
 800059a:	4618      	mov	r0, r3
 800059c:	3708      	adds	r7, #8
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	2000002c 	.word	0x2000002c

080005a8 <AGS10_IO_Delay>:

void AGS10_IO_Delay(uint16_t ms) {
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	4603      	mov	r3, r0
 80005b0:	80fb      	strh	r3, [r7, #6]
    HAL_Delay(ms);
 80005b2:	88fb      	ldrh	r3, [r7, #6]
 80005b4:	4618      	mov	r0, r3
 80005b6:	f000 f949 	bl	800084c <HAL_Delay>
}
 80005ba:	bf00      	nop
 80005bc:	3708      	adds	r7, #8
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
	...

080005c4 <app_init>:

void app_init(void) {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
    ags10_init(&ags10, AGS10MA_I2C_DEVICE_ADDR);
 80005ca:	211a      	movs	r1, #26
 80005cc:	4805      	ldr	r0, [pc, #20]	@ (80005e4 <app_init+0x20>)
 80005ce:	f7ff fdbd 	bl	800014c <ags10_init>

    uint32_t version;
    if (ags10_firmware_version_get(&ags10, &version)) {
 80005d2:	1d3b      	adds	r3, r7, #4
 80005d4:	4619      	mov	r1, r3
 80005d6:	4803      	ldr	r0, [pc, #12]	@ (80005e4 <app_init+0x20>)
 80005d8:	f7ff fe19 	bl	800020e <ags10_firmware_version_get>
    } else {

    }
}
 80005dc:	bf00      	nop
 80005de:	3708      	adds	r7, #8
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	20000028 	.word	0x20000028

080005e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005ec:	b672      	cpsid	i
}
 80005ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005f0:	bf00      	nop
 80005f2:	e7fd      	b.n	80005f0 <Error_Handler+0x8>

080005f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b085      	sub	sp, #20
 80005f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005fa:	4b15      	ldr	r3, [pc, #84]	@ (8000650 <HAL_MspInit+0x5c>)
 80005fc:	699b      	ldr	r3, [r3, #24]
 80005fe:	4a14      	ldr	r2, [pc, #80]	@ (8000650 <HAL_MspInit+0x5c>)
 8000600:	f043 0301 	orr.w	r3, r3, #1
 8000604:	6193      	str	r3, [r2, #24]
 8000606:	4b12      	ldr	r3, [pc, #72]	@ (8000650 <HAL_MspInit+0x5c>)
 8000608:	699b      	ldr	r3, [r3, #24]
 800060a:	f003 0301 	and.w	r3, r3, #1
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000612:	4b0f      	ldr	r3, [pc, #60]	@ (8000650 <HAL_MspInit+0x5c>)
 8000614:	69db      	ldr	r3, [r3, #28]
 8000616:	4a0e      	ldr	r2, [pc, #56]	@ (8000650 <HAL_MspInit+0x5c>)
 8000618:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800061c:	61d3      	str	r3, [r2, #28]
 800061e:	4b0c      	ldr	r3, [pc, #48]	@ (8000650 <HAL_MspInit+0x5c>)
 8000620:	69db      	ldr	r3, [r3, #28]
 8000622:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800062a:	4b0a      	ldr	r3, [pc, #40]	@ (8000654 <HAL_MspInit+0x60>)
 800062c:	685b      	ldr	r3, [r3, #4]
 800062e:	60fb      	str	r3, [r7, #12]
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800063e:	60fb      	str	r3, [r7, #12]
 8000640:	4a04      	ldr	r2, [pc, #16]	@ (8000654 <HAL_MspInit+0x60>)
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000646:	bf00      	nop
 8000648:	3714      	adds	r7, #20
 800064a:	46bd      	mov	sp, r7
 800064c:	bc80      	pop	{r7}
 800064e:	4770      	bx	lr
 8000650:	40021000 	.word	0x40021000
 8000654:	40010000 	.word	0x40010000

08000658 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b088      	sub	sp, #32
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000660:	f107 0310 	add.w	r3, r7, #16
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4a16      	ldr	r2, [pc, #88]	@ (80006cc <HAL_I2C_MspInit+0x74>)
 8000674:	4293      	cmp	r3, r2
 8000676:	d124      	bne.n	80006c2 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000678:	4b15      	ldr	r3, [pc, #84]	@ (80006d0 <HAL_I2C_MspInit+0x78>)
 800067a:	699b      	ldr	r3, [r3, #24]
 800067c:	4a14      	ldr	r2, [pc, #80]	@ (80006d0 <HAL_I2C_MspInit+0x78>)
 800067e:	f043 0308 	orr.w	r3, r3, #8
 8000682:	6193      	str	r3, [r2, #24]
 8000684:	4b12      	ldr	r3, [pc, #72]	@ (80006d0 <HAL_I2C_MspInit+0x78>)
 8000686:	699b      	ldr	r3, [r3, #24]
 8000688:	f003 0308 	and.w	r3, r3, #8
 800068c:	60fb      	str	r3, [r7, #12]
 800068e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000690:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000694:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000696:	2312      	movs	r3, #18
 8000698:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800069a:	2303      	movs	r3, #3
 800069c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800069e:	f107 0310 	add.w	r3, r7, #16
 80006a2:	4619      	mov	r1, r3
 80006a4:	480b      	ldr	r0, [pc, #44]	@ (80006d4 <HAL_I2C_MspInit+0x7c>)
 80006a6:	f000 f9d9 	bl	8000a5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80006aa:	4b09      	ldr	r3, [pc, #36]	@ (80006d0 <HAL_I2C_MspInit+0x78>)
 80006ac:	69db      	ldr	r3, [r3, #28]
 80006ae:	4a08      	ldr	r2, [pc, #32]	@ (80006d0 <HAL_I2C_MspInit+0x78>)
 80006b0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80006b4:	61d3      	str	r3, [r2, #28]
 80006b6:	4b06      	ldr	r3, [pc, #24]	@ (80006d0 <HAL_I2C_MspInit+0x78>)
 80006b8:	69db      	ldr	r3, [r3, #28]
 80006ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80006be:	60bb      	str	r3, [r7, #8]
 80006c0:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 80006c2:	bf00      	nop
 80006c4:	3720      	adds	r7, #32
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	40005800 	.word	0x40005800
 80006d0:	40021000 	.word	0x40021000
 80006d4:	40010c00 	.word	0x40010c00

080006d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006dc:	bf00      	nop
 80006de:	e7fd      	b.n	80006dc <NMI_Handler+0x4>

080006e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006e4:	bf00      	nop
 80006e6:	e7fd      	b.n	80006e4 <HardFault_Handler+0x4>

080006e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006ec:	bf00      	nop
 80006ee:	e7fd      	b.n	80006ec <MemManage_Handler+0x4>

080006f0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006f4:	bf00      	nop
 80006f6:	e7fd      	b.n	80006f4 <BusFault_Handler+0x4>

080006f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006fc:	bf00      	nop
 80006fe:	e7fd      	b.n	80006fc <UsageFault_Handler+0x4>

08000700 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000704:	bf00      	nop
 8000706:	46bd      	mov	sp, r7
 8000708:	bc80      	pop	{r7}
 800070a:	4770      	bx	lr

0800070c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000710:	bf00      	nop
 8000712:	46bd      	mov	sp, r7
 8000714:	bc80      	pop	{r7}
 8000716:	4770      	bx	lr

08000718 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800071c:	bf00      	nop
 800071e:	46bd      	mov	sp, r7
 8000720:	bc80      	pop	{r7}
 8000722:	4770      	bx	lr

08000724 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000728:	f000 f874 	bl	8000814 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800072c:	bf00      	nop
 800072e:	bd80      	pop	{r7, pc}

08000730 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000734:	bf00      	nop
 8000736:	46bd      	mov	sp, r7
 8000738:	bc80      	pop	{r7}
 800073a:	4770      	bx	lr

0800073c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800073c:	f7ff fff8 	bl	8000730 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000740:	480b      	ldr	r0, [pc, #44]	@ (8000770 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000742:	490c      	ldr	r1, [pc, #48]	@ (8000774 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000744:	4a0c      	ldr	r2, [pc, #48]	@ (8000778 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000746:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000748:	e002      	b.n	8000750 <LoopCopyDataInit>

0800074a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800074a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800074c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800074e:	3304      	adds	r3, #4

08000750 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000750:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000752:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000754:	d3f9      	bcc.n	800074a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000756:	4a09      	ldr	r2, [pc, #36]	@ (800077c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000758:	4c09      	ldr	r4, [pc, #36]	@ (8000780 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800075a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800075c:	e001      	b.n	8000762 <LoopFillZerobss>

0800075e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800075e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000760:	3204      	adds	r2, #4

08000762 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000762:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000764:	d3fb      	bcc.n	800075e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000766:	f001 ff4d 	bl	8002604 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800076a:	f7ff fde1 	bl	8000330 <main>
  bx lr
 800076e:	4770      	bx	lr
  ldr r0, =_sdata
 8000770:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000774:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000778:	08002698 	.word	0x08002698
  ldr r2, =_sbss
 800077c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000780:	2000008c 	.word	0x2000008c

08000784 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000784:	e7fe      	b.n	8000784 <ADC1_2_IRQHandler>
	...

08000788 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800078c:	4b08      	ldr	r3, [pc, #32]	@ (80007b0 <HAL_Init+0x28>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a07      	ldr	r2, [pc, #28]	@ (80007b0 <HAL_Init+0x28>)
 8000792:	f043 0310 	orr.w	r3, r3, #16
 8000796:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000798:	2003      	movs	r0, #3
 800079a:	f000 f92b 	bl	80009f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800079e:	200f      	movs	r0, #15
 80007a0:	f000 f808 	bl	80007b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007a4:	f7ff ff26 	bl	80005f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007a8:	2300      	movs	r3, #0
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	40022000 	.word	0x40022000

080007b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007bc:	4b12      	ldr	r3, [pc, #72]	@ (8000808 <HAL_InitTick+0x54>)
 80007be:	681a      	ldr	r2, [r3, #0]
 80007c0:	4b12      	ldr	r3, [pc, #72]	@ (800080c <HAL_InitTick+0x58>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	4619      	mov	r1, r3
 80007c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80007ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80007d2:	4618      	mov	r0, r3
 80007d4:	f000 f935 	bl	8000a42 <HAL_SYSTICK_Config>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007de:	2301      	movs	r3, #1
 80007e0:	e00e      	b.n	8000800 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	2b0f      	cmp	r3, #15
 80007e6:	d80a      	bhi.n	80007fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007e8:	2200      	movs	r2, #0
 80007ea:	6879      	ldr	r1, [r7, #4]
 80007ec:	f04f 30ff 	mov.w	r0, #4294967295
 80007f0:	f000 f90b 	bl	8000a0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007f4:	4a06      	ldr	r2, [pc, #24]	@ (8000810 <HAL_InitTick+0x5c>)
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007fa:	2300      	movs	r3, #0
 80007fc:	e000      	b.n	8000800 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007fe:	2301      	movs	r3, #1
}
 8000800:	4618      	mov	r0, r3
 8000802:	3708      	adds	r7, #8
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	20000000 	.word	0x20000000
 800080c:	20000008 	.word	0x20000008
 8000810:	20000004 	.word	0x20000004

08000814 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000818:	4b05      	ldr	r3, [pc, #20]	@ (8000830 <HAL_IncTick+0x1c>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	461a      	mov	r2, r3
 800081e:	4b05      	ldr	r3, [pc, #20]	@ (8000834 <HAL_IncTick+0x20>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	4413      	add	r3, r2
 8000824:	4a03      	ldr	r2, [pc, #12]	@ (8000834 <HAL_IncTick+0x20>)
 8000826:	6013      	str	r3, [r2, #0]
}
 8000828:	bf00      	nop
 800082a:	46bd      	mov	sp, r7
 800082c:	bc80      	pop	{r7}
 800082e:	4770      	bx	lr
 8000830:	20000008 	.word	0x20000008
 8000834:	20000088 	.word	0x20000088

08000838 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  return uwTick;
 800083c:	4b02      	ldr	r3, [pc, #8]	@ (8000848 <HAL_GetTick+0x10>)
 800083e:	681b      	ldr	r3, [r3, #0]
}
 8000840:	4618      	mov	r0, r3
 8000842:	46bd      	mov	sp, r7
 8000844:	bc80      	pop	{r7}
 8000846:	4770      	bx	lr
 8000848:	20000088 	.word	0x20000088

0800084c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b084      	sub	sp, #16
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000854:	f7ff fff0 	bl	8000838 <HAL_GetTick>
 8000858:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000864:	d005      	beq.n	8000872 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000866:	4b0a      	ldr	r3, [pc, #40]	@ (8000890 <HAL_Delay+0x44>)
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	461a      	mov	r2, r3
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	4413      	add	r3, r2
 8000870:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000872:	bf00      	nop
 8000874:	f7ff ffe0 	bl	8000838 <HAL_GetTick>
 8000878:	4602      	mov	r2, r0
 800087a:	68bb      	ldr	r3, [r7, #8]
 800087c:	1ad3      	subs	r3, r2, r3
 800087e:	68fa      	ldr	r2, [r7, #12]
 8000880:	429a      	cmp	r2, r3
 8000882:	d8f7      	bhi.n	8000874 <HAL_Delay+0x28>
  {
  }
}
 8000884:	bf00      	nop
 8000886:	bf00      	nop
 8000888:	3710      	adds	r7, #16
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	20000008 	.word	0x20000008

08000894 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000894:	b480      	push	{r7}
 8000896:	b085      	sub	sp, #20
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	f003 0307 	and.w	r3, r3, #7
 80008a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008a4:	4b0c      	ldr	r3, [pc, #48]	@ (80008d8 <__NVIC_SetPriorityGrouping+0x44>)
 80008a6:	68db      	ldr	r3, [r3, #12]
 80008a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008aa:	68ba      	ldr	r2, [r7, #8]
 80008ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80008b0:	4013      	ands	r3, r2
 80008b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008b8:	68bb      	ldr	r3, [r7, #8]
 80008ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80008c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008c6:	4a04      	ldr	r2, [pc, #16]	@ (80008d8 <__NVIC_SetPriorityGrouping+0x44>)
 80008c8:	68bb      	ldr	r3, [r7, #8]
 80008ca:	60d3      	str	r3, [r2, #12]
}
 80008cc:	bf00      	nop
 80008ce:	3714      	adds	r7, #20
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bc80      	pop	{r7}
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	e000ed00 	.word	0xe000ed00

080008dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008e0:	4b04      	ldr	r3, [pc, #16]	@ (80008f4 <__NVIC_GetPriorityGrouping+0x18>)
 80008e2:	68db      	ldr	r3, [r3, #12]
 80008e4:	0a1b      	lsrs	r3, r3, #8
 80008e6:	f003 0307 	and.w	r3, r3, #7
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bc80      	pop	{r7}
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	e000ed00 	.word	0xe000ed00

080008f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	4603      	mov	r3, r0
 8000900:	6039      	str	r1, [r7, #0]
 8000902:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000904:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000908:	2b00      	cmp	r3, #0
 800090a:	db0a      	blt.n	8000922 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	b2da      	uxtb	r2, r3
 8000910:	490c      	ldr	r1, [pc, #48]	@ (8000944 <__NVIC_SetPriority+0x4c>)
 8000912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000916:	0112      	lsls	r2, r2, #4
 8000918:	b2d2      	uxtb	r2, r2
 800091a:	440b      	add	r3, r1
 800091c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000920:	e00a      	b.n	8000938 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	b2da      	uxtb	r2, r3
 8000926:	4908      	ldr	r1, [pc, #32]	@ (8000948 <__NVIC_SetPriority+0x50>)
 8000928:	79fb      	ldrb	r3, [r7, #7]
 800092a:	f003 030f 	and.w	r3, r3, #15
 800092e:	3b04      	subs	r3, #4
 8000930:	0112      	lsls	r2, r2, #4
 8000932:	b2d2      	uxtb	r2, r2
 8000934:	440b      	add	r3, r1
 8000936:	761a      	strb	r2, [r3, #24]
}
 8000938:	bf00      	nop
 800093a:	370c      	adds	r7, #12
 800093c:	46bd      	mov	sp, r7
 800093e:	bc80      	pop	{r7}
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	e000e100 	.word	0xe000e100
 8000948:	e000ed00 	.word	0xe000ed00

0800094c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800094c:	b480      	push	{r7}
 800094e:	b089      	sub	sp, #36	@ 0x24
 8000950:	af00      	add	r7, sp, #0
 8000952:	60f8      	str	r0, [r7, #12]
 8000954:	60b9      	str	r1, [r7, #8]
 8000956:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	f003 0307 	and.w	r3, r3, #7
 800095e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000960:	69fb      	ldr	r3, [r7, #28]
 8000962:	f1c3 0307 	rsb	r3, r3, #7
 8000966:	2b04      	cmp	r3, #4
 8000968:	bf28      	it	cs
 800096a:	2304      	movcs	r3, #4
 800096c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800096e:	69fb      	ldr	r3, [r7, #28]
 8000970:	3304      	adds	r3, #4
 8000972:	2b06      	cmp	r3, #6
 8000974:	d902      	bls.n	800097c <NVIC_EncodePriority+0x30>
 8000976:	69fb      	ldr	r3, [r7, #28]
 8000978:	3b03      	subs	r3, #3
 800097a:	e000      	b.n	800097e <NVIC_EncodePriority+0x32>
 800097c:	2300      	movs	r3, #0
 800097e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000980:	f04f 32ff 	mov.w	r2, #4294967295
 8000984:	69bb      	ldr	r3, [r7, #24]
 8000986:	fa02 f303 	lsl.w	r3, r2, r3
 800098a:	43da      	mvns	r2, r3
 800098c:	68bb      	ldr	r3, [r7, #8]
 800098e:	401a      	ands	r2, r3
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000994:	f04f 31ff 	mov.w	r1, #4294967295
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	fa01 f303 	lsl.w	r3, r1, r3
 800099e:	43d9      	mvns	r1, r3
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009a4:	4313      	orrs	r3, r2
         );
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	3724      	adds	r7, #36	@ 0x24
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bc80      	pop	{r7}
 80009ae:	4770      	bx	lr

080009b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	3b01      	subs	r3, #1
 80009bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80009c0:	d301      	bcc.n	80009c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009c2:	2301      	movs	r3, #1
 80009c4:	e00f      	b.n	80009e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009c6:	4a0a      	ldr	r2, [pc, #40]	@ (80009f0 <SysTick_Config+0x40>)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	3b01      	subs	r3, #1
 80009cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009ce:	210f      	movs	r1, #15
 80009d0:	f04f 30ff 	mov.w	r0, #4294967295
 80009d4:	f7ff ff90 	bl	80008f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009d8:	4b05      	ldr	r3, [pc, #20]	@ (80009f0 <SysTick_Config+0x40>)
 80009da:	2200      	movs	r2, #0
 80009dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009de:	4b04      	ldr	r3, [pc, #16]	@ (80009f0 <SysTick_Config+0x40>)
 80009e0:	2207      	movs	r2, #7
 80009e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009e4:	2300      	movs	r3, #0
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	e000e010 	.word	0xe000e010

080009f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009fc:	6878      	ldr	r0, [r7, #4]
 80009fe:	f7ff ff49 	bl	8000894 <__NVIC_SetPriorityGrouping>
}
 8000a02:	bf00      	nop
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}

08000a0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	b086      	sub	sp, #24
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	4603      	mov	r3, r0
 8000a12:	60b9      	str	r1, [r7, #8]
 8000a14:	607a      	str	r2, [r7, #4]
 8000a16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a1c:	f7ff ff5e 	bl	80008dc <__NVIC_GetPriorityGrouping>
 8000a20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a22:	687a      	ldr	r2, [r7, #4]
 8000a24:	68b9      	ldr	r1, [r7, #8]
 8000a26:	6978      	ldr	r0, [r7, #20]
 8000a28:	f7ff ff90 	bl	800094c <NVIC_EncodePriority>
 8000a2c:	4602      	mov	r2, r0
 8000a2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a32:	4611      	mov	r1, r2
 8000a34:	4618      	mov	r0, r3
 8000a36:	f7ff ff5f 	bl	80008f8 <__NVIC_SetPriority>
}
 8000a3a:	bf00      	nop
 8000a3c:	3718      	adds	r7, #24
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}

08000a42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a42:	b580      	push	{r7, lr}
 8000a44:	b082      	sub	sp, #8
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a4a:	6878      	ldr	r0, [r7, #4]
 8000a4c:	f7ff ffb0 	bl	80009b0 <SysTick_Config>
 8000a50:	4603      	mov	r3, r0
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
	...

08000a5c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b08b      	sub	sp, #44	@ 0x2c
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
 8000a64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a66:	2300      	movs	r3, #0
 8000a68:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a6e:	e169      	b.n	8000d44 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a70:	2201      	movs	r2, #1
 8000a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a74:	fa02 f303 	lsl.w	r3, r2, r3
 8000a78:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	69fa      	ldr	r2, [r7, #28]
 8000a80:	4013      	ands	r3, r2
 8000a82:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a84:	69ba      	ldr	r2, [r7, #24]
 8000a86:	69fb      	ldr	r3, [r7, #28]
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	f040 8158 	bne.w	8000d3e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	4a9a      	ldr	r2, [pc, #616]	@ (8000cfc <HAL_GPIO_Init+0x2a0>)
 8000a94:	4293      	cmp	r3, r2
 8000a96:	d05e      	beq.n	8000b56 <HAL_GPIO_Init+0xfa>
 8000a98:	4a98      	ldr	r2, [pc, #608]	@ (8000cfc <HAL_GPIO_Init+0x2a0>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d875      	bhi.n	8000b8a <HAL_GPIO_Init+0x12e>
 8000a9e:	4a98      	ldr	r2, [pc, #608]	@ (8000d00 <HAL_GPIO_Init+0x2a4>)
 8000aa0:	4293      	cmp	r3, r2
 8000aa2:	d058      	beq.n	8000b56 <HAL_GPIO_Init+0xfa>
 8000aa4:	4a96      	ldr	r2, [pc, #600]	@ (8000d00 <HAL_GPIO_Init+0x2a4>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d86f      	bhi.n	8000b8a <HAL_GPIO_Init+0x12e>
 8000aaa:	4a96      	ldr	r2, [pc, #600]	@ (8000d04 <HAL_GPIO_Init+0x2a8>)
 8000aac:	4293      	cmp	r3, r2
 8000aae:	d052      	beq.n	8000b56 <HAL_GPIO_Init+0xfa>
 8000ab0:	4a94      	ldr	r2, [pc, #592]	@ (8000d04 <HAL_GPIO_Init+0x2a8>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d869      	bhi.n	8000b8a <HAL_GPIO_Init+0x12e>
 8000ab6:	4a94      	ldr	r2, [pc, #592]	@ (8000d08 <HAL_GPIO_Init+0x2ac>)
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	d04c      	beq.n	8000b56 <HAL_GPIO_Init+0xfa>
 8000abc:	4a92      	ldr	r2, [pc, #584]	@ (8000d08 <HAL_GPIO_Init+0x2ac>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d863      	bhi.n	8000b8a <HAL_GPIO_Init+0x12e>
 8000ac2:	4a92      	ldr	r2, [pc, #584]	@ (8000d0c <HAL_GPIO_Init+0x2b0>)
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	d046      	beq.n	8000b56 <HAL_GPIO_Init+0xfa>
 8000ac8:	4a90      	ldr	r2, [pc, #576]	@ (8000d0c <HAL_GPIO_Init+0x2b0>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d85d      	bhi.n	8000b8a <HAL_GPIO_Init+0x12e>
 8000ace:	2b12      	cmp	r3, #18
 8000ad0:	d82a      	bhi.n	8000b28 <HAL_GPIO_Init+0xcc>
 8000ad2:	2b12      	cmp	r3, #18
 8000ad4:	d859      	bhi.n	8000b8a <HAL_GPIO_Init+0x12e>
 8000ad6:	a201      	add	r2, pc, #4	@ (adr r2, 8000adc <HAL_GPIO_Init+0x80>)
 8000ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000adc:	08000b57 	.word	0x08000b57
 8000ae0:	08000b31 	.word	0x08000b31
 8000ae4:	08000b43 	.word	0x08000b43
 8000ae8:	08000b85 	.word	0x08000b85
 8000aec:	08000b8b 	.word	0x08000b8b
 8000af0:	08000b8b 	.word	0x08000b8b
 8000af4:	08000b8b 	.word	0x08000b8b
 8000af8:	08000b8b 	.word	0x08000b8b
 8000afc:	08000b8b 	.word	0x08000b8b
 8000b00:	08000b8b 	.word	0x08000b8b
 8000b04:	08000b8b 	.word	0x08000b8b
 8000b08:	08000b8b 	.word	0x08000b8b
 8000b0c:	08000b8b 	.word	0x08000b8b
 8000b10:	08000b8b 	.word	0x08000b8b
 8000b14:	08000b8b 	.word	0x08000b8b
 8000b18:	08000b8b 	.word	0x08000b8b
 8000b1c:	08000b8b 	.word	0x08000b8b
 8000b20:	08000b39 	.word	0x08000b39
 8000b24:	08000b4d 	.word	0x08000b4d
 8000b28:	4a79      	ldr	r2, [pc, #484]	@ (8000d10 <HAL_GPIO_Init+0x2b4>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d013      	beq.n	8000b56 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b2e:	e02c      	b.n	8000b8a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	68db      	ldr	r3, [r3, #12]
 8000b34:	623b      	str	r3, [r7, #32]
          break;
 8000b36:	e029      	b.n	8000b8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	68db      	ldr	r3, [r3, #12]
 8000b3c:	3304      	adds	r3, #4
 8000b3e:	623b      	str	r3, [r7, #32]
          break;
 8000b40:	e024      	b.n	8000b8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	68db      	ldr	r3, [r3, #12]
 8000b46:	3308      	adds	r3, #8
 8000b48:	623b      	str	r3, [r7, #32]
          break;
 8000b4a:	e01f      	b.n	8000b8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	68db      	ldr	r3, [r3, #12]
 8000b50:	330c      	adds	r3, #12
 8000b52:	623b      	str	r3, [r7, #32]
          break;
 8000b54:	e01a      	b.n	8000b8c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	689b      	ldr	r3, [r3, #8]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d102      	bne.n	8000b64 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b5e:	2304      	movs	r3, #4
 8000b60:	623b      	str	r3, [r7, #32]
          break;
 8000b62:	e013      	b.n	8000b8c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	689b      	ldr	r3, [r3, #8]
 8000b68:	2b01      	cmp	r3, #1
 8000b6a:	d105      	bne.n	8000b78 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b6c:	2308      	movs	r3, #8
 8000b6e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	69fa      	ldr	r2, [r7, #28]
 8000b74:	611a      	str	r2, [r3, #16]
          break;
 8000b76:	e009      	b.n	8000b8c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b78:	2308      	movs	r3, #8
 8000b7a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	69fa      	ldr	r2, [r7, #28]
 8000b80:	615a      	str	r2, [r3, #20]
          break;
 8000b82:	e003      	b.n	8000b8c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b84:	2300      	movs	r3, #0
 8000b86:	623b      	str	r3, [r7, #32]
          break;
 8000b88:	e000      	b.n	8000b8c <HAL_GPIO_Init+0x130>
          break;
 8000b8a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b8c:	69bb      	ldr	r3, [r7, #24]
 8000b8e:	2bff      	cmp	r3, #255	@ 0xff
 8000b90:	d801      	bhi.n	8000b96 <HAL_GPIO_Init+0x13a>
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	e001      	b.n	8000b9a <HAL_GPIO_Init+0x13e>
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	3304      	adds	r3, #4
 8000b9a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b9c:	69bb      	ldr	r3, [r7, #24]
 8000b9e:	2bff      	cmp	r3, #255	@ 0xff
 8000ba0:	d802      	bhi.n	8000ba8 <HAL_GPIO_Init+0x14c>
 8000ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ba4:	009b      	lsls	r3, r3, #2
 8000ba6:	e002      	b.n	8000bae <HAL_GPIO_Init+0x152>
 8000ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000baa:	3b08      	subs	r3, #8
 8000bac:	009b      	lsls	r3, r3, #2
 8000bae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	681a      	ldr	r2, [r3, #0]
 8000bb4:	210f      	movs	r1, #15
 8000bb6:	693b      	ldr	r3, [r7, #16]
 8000bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bbc:	43db      	mvns	r3, r3
 8000bbe:	401a      	ands	r2, r3
 8000bc0:	6a39      	ldr	r1, [r7, #32]
 8000bc2:	693b      	ldr	r3, [r7, #16]
 8000bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc8:	431a      	orrs	r2, r3
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	f000 80b1 	beq.w	8000d3e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000bdc:	4b4d      	ldr	r3, [pc, #308]	@ (8000d14 <HAL_GPIO_Init+0x2b8>)
 8000bde:	699b      	ldr	r3, [r3, #24]
 8000be0:	4a4c      	ldr	r2, [pc, #304]	@ (8000d14 <HAL_GPIO_Init+0x2b8>)
 8000be2:	f043 0301 	orr.w	r3, r3, #1
 8000be6:	6193      	str	r3, [r2, #24]
 8000be8:	4b4a      	ldr	r3, [pc, #296]	@ (8000d14 <HAL_GPIO_Init+0x2b8>)
 8000bea:	699b      	ldr	r3, [r3, #24]
 8000bec:	f003 0301 	and.w	r3, r3, #1
 8000bf0:	60bb      	str	r3, [r7, #8]
 8000bf2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000bf4:	4a48      	ldr	r2, [pc, #288]	@ (8000d18 <HAL_GPIO_Init+0x2bc>)
 8000bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bf8:	089b      	lsrs	r3, r3, #2
 8000bfa:	3302      	adds	r3, #2
 8000bfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c00:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c04:	f003 0303 	and.w	r3, r3, #3
 8000c08:	009b      	lsls	r3, r3, #2
 8000c0a:	220f      	movs	r2, #15
 8000c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c10:	43db      	mvns	r3, r3
 8000c12:	68fa      	ldr	r2, [r7, #12]
 8000c14:	4013      	ands	r3, r2
 8000c16:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	4a40      	ldr	r2, [pc, #256]	@ (8000d1c <HAL_GPIO_Init+0x2c0>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d013      	beq.n	8000c48 <HAL_GPIO_Init+0x1ec>
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	4a3f      	ldr	r2, [pc, #252]	@ (8000d20 <HAL_GPIO_Init+0x2c4>)
 8000c24:	4293      	cmp	r3, r2
 8000c26:	d00d      	beq.n	8000c44 <HAL_GPIO_Init+0x1e8>
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	4a3e      	ldr	r2, [pc, #248]	@ (8000d24 <HAL_GPIO_Init+0x2c8>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d007      	beq.n	8000c40 <HAL_GPIO_Init+0x1e4>
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	4a3d      	ldr	r2, [pc, #244]	@ (8000d28 <HAL_GPIO_Init+0x2cc>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d101      	bne.n	8000c3c <HAL_GPIO_Init+0x1e0>
 8000c38:	2303      	movs	r3, #3
 8000c3a:	e006      	b.n	8000c4a <HAL_GPIO_Init+0x1ee>
 8000c3c:	2304      	movs	r3, #4
 8000c3e:	e004      	b.n	8000c4a <HAL_GPIO_Init+0x1ee>
 8000c40:	2302      	movs	r3, #2
 8000c42:	e002      	b.n	8000c4a <HAL_GPIO_Init+0x1ee>
 8000c44:	2301      	movs	r3, #1
 8000c46:	e000      	b.n	8000c4a <HAL_GPIO_Init+0x1ee>
 8000c48:	2300      	movs	r3, #0
 8000c4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000c4c:	f002 0203 	and.w	r2, r2, #3
 8000c50:	0092      	lsls	r2, r2, #2
 8000c52:	4093      	lsls	r3, r2
 8000c54:	68fa      	ldr	r2, [r7, #12]
 8000c56:	4313      	orrs	r3, r2
 8000c58:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c5a:	492f      	ldr	r1, [pc, #188]	@ (8000d18 <HAL_GPIO_Init+0x2bc>)
 8000c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c5e:	089b      	lsrs	r3, r3, #2
 8000c60:	3302      	adds	r3, #2
 8000c62:	68fa      	ldr	r2, [r7, #12]
 8000c64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d006      	beq.n	8000c82 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c74:	4b2d      	ldr	r3, [pc, #180]	@ (8000d2c <HAL_GPIO_Init+0x2d0>)
 8000c76:	689a      	ldr	r2, [r3, #8]
 8000c78:	492c      	ldr	r1, [pc, #176]	@ (8000d2c <HAL_GPIO_Init+0x2d0>)
 8000c7a:	69bb      	ldr	r3, [r7, #24]
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	608b      	str	r3, [r1, #8]
 8000c80:	e006      	b.n	8000c90 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c82:	4b2a      	ldr	r3, [pc, #168]	@ (8000d2c <HAL_GPIO_Init+0x2d0>)
 8000c84:	689a      	ldr	r2, [r3, #8]
 8000c86:	69bb      	ldr	r3, [r7, #24]
 8000c88:	43db      	mvns	r3, r3
 8000c8a:	4928      	ldr	r1, [pc, #160]	@ (8000d2c <HAL_GPIO_Init+0x2d0>)
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d006      	beq.n	8000caa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c9c:	4b23      	ldr	r3, [pc, #140]	@ (8000d2c <HAL_GPIO_Init+0x2d0>)
 8000c9e:	68da      	ldr	r2, [r3, #12]
 8000ca0:	4922      	ldr	r1, [pc, #136]	@ (8000d2c <HAL_GPIO_Init+0x2d0>)
 8000ca2:	69bb      	ldr	r3, [r7, #24]
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	60cb      	str	r3, [r1, #12]
 8000ca8:	e006      	b.n	8000cb8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000caa:	4b20      	ldr	r3, [pc, #128]	@ (8000d2c <HAL_GPIO_Init+0x2d0>)
 8000cac:	68da      	ldr	r2, [r3, #12]
 8000cae:	69bb      	ldr	r3, [r7, #24]
 8000cb0:	43db      	mvns	r3, r3
 8000cb2:	491e      	ldr	r1, [pc, #120]	@ (8000d2c <HAL_GPIO_Init+0x2d0>)
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d006      	beq.n	8000cd2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000cc4:	4b19      	ldr	r3, [pc, #100]	@ (8000d2c <HAL_GPIO_Init+0x2d0>)
 8000cc6:	685a      	ldr	r2, [r3, #4]
 8000cc8:	4918      	ldr	r1, [pc, #96]	@ (8000d2c <HAL_GPIO_Init+0x2d0>)
 8000cca:	69bb      	ldr	r3, [r7, #24]
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	604b      	str	r3, [r1, #4]
 8000cd0:	e006      	b.n	8000ce0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000cd2:	4b16      	ldr	r3, [pc, #88]	@ (8000d2c <HAL_GPIO_Init+0x2d0>)
 8000cd4:	685a      	ldr	r2, [r3, #4]
 8000cd6:	69bb      	ldr	r3, [r7, #24]
 8000cd8:	43db      	mvns	r3, r3
 8000cda:	4914      	ldr	r1, [pc, #80]	@ (8000d2c <HAL_GPIO_Init+0x2d0>)
 8000cdc:	4013      	ands	r3, r2
 8000cde:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d021      	beq.n	8000d30 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000cec:	4b0f      	ldr	r3, [pc, #60]	@ (8000d2c <HAL_GPIO_Init+0x2d0>)
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	490e      	ldr	r1, [pc, #56]	@ (8000d2c <HAL_GPIO_Init+0x2d0>)
 8000cf2:	69bb      	ldr	r3, [r7, #24]
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	600b      	str	r3, [r1, #0]
 8000cf8:	e021      	b.n	8000d3e <HAL_GPIO_Init+0x2e2>
 8000cfa:	bf00      	nop
 8000cfc:	10320000 	.word	0x10320000
 8000d00:	10310000 	.word	0x10310000
 8000d04:	10220000 	.word	0x10220000
 8000d08:	10210000 	.word	0x10210000
 8000d0c:	10120000 	.word	0x10120000
 8000d10:	10110000 	.word	0x10110000
 8000d14:	40021000 	.word	0x40021000
 8000d18:	40010000 	.word	0x40010000
 8000d1c:	40010800 	.word	0x40010800
 8000d20:	40010c00 	.word	0x40010c00
 8000d24:	40011000 	.word	0x40011000
 8000d28:	40011400 	.word	0x40011400
 8000d2c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d30:	4b0b      	ldr	r3, [pc, #44]	@ (8000d60 <HAL_GPIO_Init+0x304>)
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	69bb      	ldr	r3, [r7, #24]
 8000d36:	43db      	mvns	r3, r3
 8000d38:	4909      	ldr	r1, [pc, #36]	@ (8000d60 <HAL_GPIO_Init+0x304>)
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d40:	3301      	adds	r3, #1
 8000d42:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d4a:	fa22 f303 	lsr.w	r3, r2, r3
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f47f ae8e 	bne.w	8000a70 <HAL_GPIO_Init+0x14>
  }
}
 8000d54:	bf00      	nop
 8000d56:	bf00      	nop
 8000d58:	372c      	adds	r7, #44	@ 0x2c
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bc80      	pop	{r7}
 8000d5e:	4770      	bx	lr
 8000d60:	40010400 	.word	0x40010400

08000d64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	460b      	mov	r3, r1
 8000d6e:	807b      	strh	r3, [r7, #2]
 8000d70:	4613      	mov	r3, r2
 8000d72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d74:	787b      	ldrb	r3, [r7, #1]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d003      	beq.n	8000d82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d7a:	887a      	ldrh	r2, [r7, #2]
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000d80:	e003      	b.n	8000d8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d82:	887b      	ldrh	r3, [r7, #2]
 8000d84:	041a      	lsls	r2, r3, #16
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	611a      	str	r2, [r3, #16]
}
 8000d8a:	bf00      	nop
 8000d8c:	370c      	adds	r7, #12
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bc80      	pop	{r7}
 8000d92:	4770      	bx	lr

08000d94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d101      	bne.n	8000da6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000da2:	2301      	movs	r3, #1
 8000da4:	e12b      	b.n	8000ffe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d106      	bne.n	8000dc0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2200      	movs	r2, #0
 8000db6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000dba:	6878      	ldr	r0, [r7, #4]
 8000dbc:	f7ff fc4c 	bl	8000658 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2224      	movs	r2, #36	@ 0x24
 8000dc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f022 0201 	bic.w	r2, r2, #1
 8000dd6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000de6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000df6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000df8:	f001 fbca 	bl	8002590 <HAL_RCC_GetPCLK1Freq>
 8000dfc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	4a81      	ldr	r2, [pc, #516]	@ (8001008 <HAL_I2C_Init+0x274>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d807      	bhi.n	8000e18 <HAL_I2C_Init+0x84>
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	4a80      	ldr	r2, [pc, #512]	@ (800100c <HAL_I2C_Init+0x278>)
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	bf94      	ite	ls
 8000e10:	2301      	movls	r3, #1
 8000e12:	2300      	movhi	r3, #0
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	e006      	b.n	8000e26 <HAL_I2C_Init+0x92>
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	4a7d      	ldr	r2, [pc, #500]	@ (8001010 <HAL_I2C_Init+0x27c>)
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	bf94      	ite	ls
 8000e20:	2301      	movls	r3, #1
 8000e22:	2300      	movhi	r3, #0
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e0e7      	b.n	8000ffe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	4a78      	ldr	r2, [pc, #480]	@ (8001014 <HAL_I2C_Init+0x280>)
 8000e32:	fba2 2303 	umull	r2, r3, r2, r3
 8000e36:	0c9b      	lsrs	r3, r3, #18
 8000e38:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	68ba      	ldr	r2, [r7, #8]
 8000e4a:	430a      	orrs	r2, r1
 8000e4c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	6a1b      	ldr	r3, [r3, #32]
 8000e54:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	4a6a      	ldr	r2, [pc, #424]	@ (8001008 <HAL_I2C_Init+0x274>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d802      	bhi.n	8000e68 <HAL_I2C_Init+0xd4>
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	3301      	adds	r3, #1
 8000e66:	e009      	b.n	8000e7c <HAL_I2C_Init+0xe8>
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000e6e:	fb02 f303 	mul.w	r3, r2, r3
 8000e72:	4a69      	ldr	r2, [pc, #420]	@ (8001018 <HAL_I2C_Init+0x284>)
 8000e74:	fba2 2303 	umull	r2, r3, r2, r3
 8000e78:	099b      	lsrs	r3, r3, #6
 8000e7a:	3301      	adds	r3, #1
 8000e7c:	687a      	ldr	r2, [r7, #4]
 8000e7e:	6812      	ldr	r2, [r2, #0]
 8000e80:	430b      	orrs	r3, r1
 8000e82:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	69db      	ldr	r3, [r3, #28]
 8000e8a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8000e8e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	495c      	ldr	r1, [pc, #368]	@ (8001008 <HAL_I2C_Init+0x274>)
 8000e98:	428b      	cmp	r3, r1
 8000e9a:	d819      	bhi.n	8000ed0 <HAL_I2C_Init+0x13c>
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	1e59      	subs	r1, r3, #1
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	005b      	lsls	r3, r3, #1
 8000ea6:	fbb1 f3f3 	udiv	r3, r1, r3
 8000eaa:	1c59      	adds	r1, r3, #1
 8000eac:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8000eb0:	400b      	ands	r3, r1
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d00a      	beq.n	8000ecc <HAL_I2C_Init+0x138>
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	1e59      	subs	r1, r3, #1
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000eca:	e051      	b.n	8000f70 <HAL_I2C_Init+0x1dc>
 8000ecc:	2304      	movs	r3, #4
 8000ece:	e04f      	b.n	8000f70 <HAL_I2C_Init+0x1dc>
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	689b      	ldr	r3, [r3, #8]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d111      	bne.n	8000efc <HAL_I2C_Init+0x168>
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	1e58      	subs	r0, r3, #1
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6859      	ldr	r1, [r3, #4]
 8000ee0:	460b      	mov	r3, r1
 8000ee2:	005b      	lsls	r3, r3, #1
 8000ee4:	440b      	add	r3, r1
 8000ee6:	fbb0 f3f3 	udiv	r3, r0, r3
 8000eea:	3301      	adds	r3, #1
 8000eec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	bf0c      	ite	eq
 8000ef4:	2301      	moveq	r3, #1
 8000ef6:	2300      	movne	r3, #0
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	e012      	b.n	8000f22 <HAL_I2C_Init+0x18e>
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	1e58      	subs	r0, r3, #1
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6859      	ldr	r1, [r3, #4]
 8000f04:	460b      	mov	r3, r1
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	440b      	add	r3, r1
 8000f0a:	0099      	lsls	r1, r3, #2
 8000f0c:	440b      	add	r3, r1
 8000f0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f12:	3301      	adds	r3, #1
 8000f14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	bf0c      	ite	eq
 8000f1c:	2301      	moveq	r3, #1
 8000f1e:	2300      	movne	r3, #0
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <HAL_I2C_Init+0x196>
 8000f26:	2301      	movs	r3, #1
 8000f28:	e022      	b.n	8000f70 <HAL_I2C_Init+0x1dc>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	689b      	ldr	r3, [r3, #8]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d10e      	bne.n	8000f50 <HAL_I2C_Init+0x1bc>
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	1e58      	subs	r0, r3, #1
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6859      	ldr	r1, [r3, #4]
 8000f3a:	460b      	mov	r3, r1
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	440b      	add	r3, r1
 8000f40:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f44:	3301      	adds	r3, #1
 8000f46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000f4e:	e00f      	b.n	8000f70 <HAL_I2C_Init+0x1dc>
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	1e58      	subs	r0, r3, #1
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6859      	ldr	r1, [r3, #4]
 8000f58:	460b      	mov	r3, r1
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	440b      	add	r3, r1
 8000f5e:	0099      	lsls	r1, r3, #2
 8000f60:	440b      	add	r3, r1
 8000f62:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f66:	3301      	adds	r3, #1
 8000f68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f6c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000f70:	6879      	ldr	r1, [r7, #4]
 8000f72:	6809      	ldr	r1, [r1, #0]
 8000f74:	4313      	orrs	r3, r2
 8000f76:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	69da      	ldr	r2, [r3, #28]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6a1b      	ldr	r3, [r3, #32]
 8000f8a:	431a      	orrs	r2, r3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	430a      	orrs	r2, r1
 8000f92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	689b      	ldr	r3, [r3, #8]
 8000f9a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8000f9e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000fa2:	687a      	ldr	r2, [r7, #4]
 8000fa4:	6911      	ldr	r1, [r2, #16]
 8000fa6:	687a      	ldr	r2, [r7, #4]
 8000fa8:	68d2      	ldr	r2, [r2, #12]
 8000faa:	4311      	orrs	r1, r2
 8000fac:	687a      	ldr	r2, [r7, #4]
 8000fae:	6812      	ldr	r2, [r2, #0]
 8000fb0:	430b      	orrs	r3, r1
 8000fb2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	68db      	ldr	r3, [r3, #12]
 8000fba:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	695a      	ldr	r2, [r3, #20]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	699b      	ldr	r3, [r3, #24]
 8000fc6:	431a      	orrs	r2, r3
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	430a      	orrs	r2, r1
 8000fce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f042 0201 	orr.w	r2, r2, #1
 8000fde:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2220      	movs	r2, #32
 8000fea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8000ffc:	2300      	movs	r3, #0
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3710      	adds	r7, #16
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	000186a0 	.word	0x000186a0
 800100c:	001e847f 	.word	0x001e847f
 8001010:	003d08ff 	.word	0x003d08ff
 8001014:	431bde83 	.word	0x431bde83
 8001018:	10624dd3 	.word	0x10624dd3

0800101c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b088      	sub	sp, #32
 8001020:	af02      	add	r7, sp, #8
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	607a      	str	r2, [r7, #4]
 8001026:	461a      	mov	r2, r3
 8001028:	460b      	mov	r3, r1
 800102a:	817b      	strh	r3, [r7, #10]
 800102c:	4613      	mov	r3, r2
 800102e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001030:	f7ff fc02 	bl	8000838 <HAL_GetTick>
 8001034:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800103c:	b2db      	uxtb	r3, r3
 800103e:	2b20      	cmp	r3, #32
 8001040:	f040 80e0 	bne.w	8001204 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	9300      	str	r3, [sp, #0]
 8001048:	2319      	movs	r3, #25
 800104a:	2201      	movs	r2, #1
 800104c:	4970      	ldr	r1, [pc, #448]	@ (8001210 <HAL_I2C_Master_Transmit+0x1f4>)
 800104e:	68f8      	ldr	r0, [r7, #12]
 8001050:	f000 fc9e 	bl	8001990 <I2C_WaitOnFlagUntilTimeout>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800105a:	2302      	movs	r3, #2
 800105c:	e0d3      	b.n	8001206 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001064:	2b01      	cmp	r3, #1
 8001066:	d101      	bne.n	800106c <HAL_I2C_Master_Transmit+0x50>
 8001068:	2302      	movs	r3, #2
 800106a:	e0cc      	b.n	8001206 <HAL_I2C_Master_Transmit+0x1ea>
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	2201      	movs	r2, #1
 8001070:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f003 0301 	and.w	r3, r3, #1
 800107e:	2b01      	cmp	r3, #1
 8001080:	d007      	beq.n	8001092 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f042 0201 	orr.w	r2, r2, #1
 8001090:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80010a0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	2221      	movs	r2, #33	@ 0x21
 80010a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	2210      	movs	r2, #16
 80010ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	2200      	movs	r2, #0
 80010b6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	687a      	ldr	r2, [r7, #4]
 80010bc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	893a      	ldrh	r2, [r7, #8]
 80010c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80010c8:	b29a      	uxth	r2, r3
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	4a50      	ldr	r2, [pc, #320]	@ (8001214 <HAL_I2C_Master_Transmit+0x1f8>)
 80010d2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80010d4:	8979      	ldrh	r1, [r7, #10]
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	6a3a      	ldr	r2, [r7, #32]
 80010da:	68f8      	ldr	r0, [r7, #12]
 80010dc:	f000 fb08 	bl	80016f0 <I2C_MasterRequestWrite>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	e08d      	b.n	8001206 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80010ea:	2300      	movs	r3, #0
 80010ec:	613b      	str	r3, [r7, #16]
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	695b      	ldr	r3, [r3, #20]
 80010f4:	613b      	str	r3, [r7, #16]
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	699b      	ldr	r3, [r3, #24]
 80010fc:	613b      	str	r3, [r7, #16]
 80010fe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001100:	e066      	b.n	80011d0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001102:	697a      	ldr	r2, [r7, #20]
 8001104:	6a39      	ldr	r1, [r7, #32]
 8001106:	68f8      	ldr	r0, [r7, #12]
 8001108:	f000 fd5c 	bl	8001bc4 <I2C_WaitOnTXEFlagUntilTimeout>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d00d      	beq.n	800112e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001116:	2b04      	cmp	r3, #4
 8001118:	d107      	bne.n	800112a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001128:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e06b      	b.n	8001206 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001132:	781a      	ldrb	r2, [r3, #0]
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800113e:	1c5a      	adds	r2, r3, #1
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001148:	b29b      	uxth	r3, r3
 800114a:	3b01      	subs	r3, #1
 800114c:	b29a      	uxth	r2, r3
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001156:	3b01      	subs	r3, #1
 8001158:	b29a      	uxth	r2, r3
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	695b      	ldr	r3, [r3, #20]
 8001164:	f003 0304 	and.w	r3, r3, #4
 8001168:	2b04      	cmp	r3, #4
 800116a:	d11b      	bne.n	80011a4 <HAL_I2C_Master_Transmit+0x188>
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001170:	2b00      	cmp	r3, #0
 8001172:	d017      	beq.n	80011a4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001178:	781a      	ldrb	r2, [r3, #0]
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001184:	1c5a      	adds	r2, r3, #1
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800118e:	b29b      	uxth	r3, r3
 8001190:	3b01      	subs	r3, #1
 8001192:	b29a      	uxth	r2, r3
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800119c:	3b01      	subs	r3, #1
 800119e:	b29a      	uxth	r2, r3
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80011a4:	697a      	ldr	r2, [r7, #20]
 80011a6:	6a39      	ldr	r1, [r7, #32]
 80011a8:	68f8      	ldr	r0, [r7, #12]
 80011aa:	f000 fd53 	bl	8001c54 <I2C_WaitOnBTFFlagUntilTimeout>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d00d      	beq.n	80011d0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011b8:	2b04      	cmp	r3, #4
 80011ba:	d107      	bne.n	80011cc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80011ca:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80011cc:	2301      	movs	r3, #1
 80011ce:	e01a      	b.n	8001206 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d194      	bne.n	8001102 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80011e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	2220      	movs	r2, #32
 80011ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	2200      	movs	r2, #0
 80011f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	2200      	movs	r2, #0
 80011fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001200:	2300      	movs	r3, #0
 8001202:	e000      	b.n	8001206 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001204:	2302      	movs	r3, #2
  }
}
 8001206:	4618      	mov	r0, r3
 8001208:	3718      	adds	r7, #24
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	00100002 	.word	0x00100002
 8001214:	ffff0000 	.word	0xffff0000

08001218 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b08c      	sub	sp, #48	@ 0x30
 800121c:	af02      	add	r7, sp, #8
 800121e:	60f8      	str	r0, [r7, #12]
 8001220:	607a      	str	r2, [r7, #4]
 8001222:	461a      	mov	r2, r3
 8001224:	460b      	mov	r3, r1
 8001226:	817b      	strh	r3, [r7, #10]
 8001228:	4613      	mov	r3, r2
 800122a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800122c:	2300      	movs	r3, #0
 800122e:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001230:	f7ff fb02 	bl	8000838 <HAL_GetTick>
 8001234:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800123c:	b2db      	uxtb	r3, r3
 800123e:	2b20      	cmp	r3, #32
 8001240:	f040 824b 	bne.w	80016da <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001246:	9300      	str	r3, [sp, #0]
 8001248:	2319      	movs	r3, #25
 800124a:	2201      	movs	r2, #1
 800124c:	497f      	ldr	r1, [pc, #508]	@ (800144c <HAL_I2C_Master_Receive+0x234>)
 800124e:	68f8      	ldr	r0, [r7, #12]
 8001250:	f000 fb9e 	bl	8001990 <I2C_WaitOnFlagUntilTimeout>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800125a:	2302      	movs	r3, #2
 800125c:	e23e      	b.n	80016dc <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001264:	2b01      	cmp	r3, #1
 8001266:	d101      	bne.n	800126c <HAL_I2C_Master_Receive+0x54>
 8001268:	2302      	movs	r3, #2
 800126a:	e237      	b.n	80016dc <HAL_I2C_Master_Receive+0x4c4>
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	2201      	movs	r2, #1
 8001270:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f003 0301 	and.w	r3, r3, #1
 800127e:	2b01      	cmp	r3, #1
 8001280:	d007      	beq.n	8001292 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f042 0201 	orr.w	r2, r2, #1
 8001290:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80012a0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	2222      	movs	r2, #34	@ 0x22
 80012a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	2210      	movs	r2, #16
 80012ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	2200      	movs	r2, #0
 80012b6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	687a      	ldr	r2, [r7, #4]
 80012bc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	893a      	ldrh	r2, [r7, #8]
 80012c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80012c8:	b29a      	uxth	r2, r3
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	4a5f      	ldr	r2, [pc, #380]	@ (8001450 <HAL_I2C_Master_Receive+0x238>)
 80012d2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80012d4:	8979      	ldrh	r1, [r7, #10]
 80012d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80012da:	68f8      	ldr	r0, [r7, #12]
 80012dc:	f000 fa8a 	bl	80017f4 <I2C_MasterRequestRead>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e1f8      	b.n	80016dc <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d113      	bne.n	800131a <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80012f2:	2300      	movs	r3, #0
 80012f4:	61fb      	str	r3, [r7, #28]
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	695b      	ldr	r3, [r3, #20]
 80012fc:	61fb      	str	r3, [r7, #28]
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	699b      	ldr	r3, [r3, #24]
 8001304:	61fb      	str	r3, [r7, #28]
 8001306:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	e1cc      	b.n	80016b4 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800131e:	2b01      	cmp	r3, #1
 8001320:	d11e      	bne.n	8001360 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001330:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001332:	b672      	cpsid	i
}
 8001334:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001336:	2300      	movs	r3, #0
 8001338:	61bb      	str	r3, [r7, #24]
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	695b      	ldr	r3, [r3, #20]
 8001340:	61bb      	str	r3, [r7, #24]
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	699b      	ldr	r3, [r3, #24]
 8001348:	61bb      	str	r3, [r7, #24]
 800134a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800135a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800135c:	b662      	cpsie	i
}
 800135e:	e035      	b.n	80013cc <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001364:	2b02      	cmp	r3, #2
 8001366:	d11e      	bne.n	80013a6 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001376:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001378:	b672      	cpsid	i
}
 800137a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800137c:	2300      	movs	r3, #0
 800137e:	617b      	str	r3, [r7, #20]
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	695b      	ldr	r3, [r3, #20]
 8001386:	617b      	str	r3, [r7, #20]
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	699b      	ldr	r3, [r3, #24]
 800138e:	617b      	str	r3, [r7, #20]
 8001390:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80013a0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80013a2:	b662      	cpsie	i
}
 80013a4:	e012      	b.n	80013cc <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80013b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80013b6:	2300      	movs	r3, #0
 80013b8:	613b      	str	r3, [r7, #16]
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	695b      	ldr	r3, [r3, #20]
 80013c0:	613b      	str	r3, [r7, #16]
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	699b      	ldr	r3, [r3, #24]
 80013c8:	613b      	str	r3, [r7, #16]
 80013ca:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80013cc:	e172      	b.n	80016b4 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013d2:	2b03      	cmp	r3, #3
 80013d4:	f200 811f 	bhi.w	8001616 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d123      	bne.n	8001428 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80013e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013e2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80013e4:	68f8      	ldr	r0, [r7, #12]
 80013e6:	f000 fc7d 	bl	8001ce4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
 80013f2:	e173      	b.n	80016dc <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	691a      	ldr	r2, [r3, #16]
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013fe:	b2d2      	uxtb	r2, r2
 8001400:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001406:	1c5a      	adds	r2, r3, #1
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001410:	3b01      	subs	r3, #1
 8001412:	b29a      	uxth	r2, r3
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800141c:	b29b      	uxth	r3, r3
 800141e:	3b01      	subs	r3, #1
 8001420:	b29a      	uxth	r2, r3
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001426:	e145      	b.n	80016b4 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800142c:	2b02      	cmp	r3, #2
 800142e:	d152      	bne.n	80014d6 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001432:	9300      	str	r3, [sp, #0]
 8001434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001436:	2200      	movs	r2, #0
 8001438:	4906      	ldr	r1, [pc, #24]	@ (8001454 <HAL_I2C_Master_Receive+0x23c>)
 800143a:	68f8      	ldr	r0, [r7, #12]
 800143c:	f000 faa8 	bl	8001990 <I2C_WaitOnFlagUntilTimeout>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d008      	beq.n	8001458 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e148      	b.n	80016dc <HAL_I2C_Master_Receive+0x4c4>
 800144a:	bf00      	nop
 800144c:	00100002 	.word	0x00100002
 8001450:	ffff0000 	.word	0xffff0000
 8001454:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001458:	b672      	cpsid	i
}
 800145a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800146a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	691a      	ldr	r2, [r3, #16]
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001476:	b2d2      	uxtb	r2, r2
 8001478:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800147e:	1c5a      	adds	r2, r3, #1
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001488:	3b01      	subs	r3, #1
 800148a:	b29a      	uxth	r2, r3
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001494:	b29b      	uxth	r3, r3
 8001496:	3b01      	subs	r3, #1
 8001498:	b29a      	uxth	r2, r3
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800149e:	b662      	cpsie	i
}
 80014a0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	691a      	ldr	r2, [r3, #16]
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014ac:	b2d2      	uxtb	r2, r2
 80014ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014b4:	1c5a      	adds	r2, r3, #1
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014be:	3b01      	subs	r3, #1
 80014c0:	b29a      	uxth	r2, r3
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	3b01      	subs	r3, #1
 80014ce:	b29a      	uxth	r2, r3
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80014d4:	e0ee      	b.n	80016b4 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80014d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014d8:	9300      	str	r3, [sp, #0]
 80014da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80014dc:	2200      	movs	r2, #0
 80014de:	4981      	ldr	r1, [pc, #516]	@ (80016e4 <HAL_I2C_Master_Receive+0x4cc>)
 80014e0:	68f8      	ldr	r0, [r7, #12]
 80014e2:	f000 fa55 	bl	8001990 <I2C_WaitOnFlagUntilTimeout>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	e0f5      	b.n	80016dc <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80014fe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001500:	b672      	cpsid	i
}
 8001502:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	691a      	ldr	r2, [r3, #16]
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800150e:	b2d2      	uxtb	r2, r2
 8001510:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001516:	1c5a      	adds	r2, r3, #1
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001520:	3b01      	subs	r3, #1
 8001522:	b29a      	uxth	r2, r3
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800152c:	b29b      	uxth	r3, r3
 800152e:	3b01      	subs	r3, #1
 8001530:	b29a      	uxth	r2, r3
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001536:	4b6c      	ldr	r3, [pc, #432]	@ (80016e8 <HAL_I2C_Master_Receive+0x4d0>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	08db      	lsrs	r3, r3, #3
 800153c:	4a6b      	ldr	r2, [pc, #428]	@ (80016ec <HAL_I2C_Master_Receive+0x4d4>)
 800153e:	fba2 2303 	umull	r2, r3, r2, r3
 8001542:	0a1a      	lsrs	r2, r3, #8
 8001544:	4613      	mov	r3, r2
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	4413      	add	r3, r2
 800154a:	00da      	lsls	r2, r3, #3
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001550:	6a3b      	ldr	r3, [r7, #32]
 8001552:	3b01      	subs	r3, #1
 8001554:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001556:	6a3b      	ldr	r3, [r7, #32]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d118      	bne.n	800158e <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	2200      	movs	r2, #0
 8001560:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	2220      	movs	r2, #32
 8001566:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	2200      	movs	r2, #0
 800156e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001576:	f043 0220 	orr.w	r2, r3, #32
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800157e:	b662      	cpsie	i
}
 8001580:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	2200      	movs	r2, #0
 8001586:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e0a6      	b.n	80016dc <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	695b      	ldr	r3, [r3, #20]
 8001594:	f003 0304 	and.w	r3, r3, #4
 8001598:	2b04      	cmp	r3, #4
 800159a:	d1d9      	bne.n	8001550 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80015aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	691a      	ldr	r2, [r3, #16]
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015b6:	b2d2      	uxtb	r2, r2
 80015b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015be:	1c5a      	adds	r2, r3, #1
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015c8:	3b01      	subs	r3, #1
 80015ca:	b29a      	uxth	r2, r3
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	3b01      	subs	r3, #1
 80015d8:	b29a      	uxth	r2, r3
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80015de:	b662      	cpsie	i
}
 80015e0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	691a      	ldr	r2, [r3, #16]
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ec:	b2d2      	uxtb	r2, r2
 80015ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015f4:	1c5a      	adds	r2, r3, #1
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015fe:	3b01      	subs	r3, #1
 8001600:	b29a      	uxth	r2, r3
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800160a:	b29b      	uxth	r3, r3
 800160c:	3b01      	subs	r3, #1
 800160e:	b29a      	uxth	r2, r3
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001614:	e04e      	b.n	80016b4 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001616:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001618:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800161a:	68f8      	ldr	r0, [r7, #12]
 800161c:	f000 fb62 	bl	8001ce4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e058      	b.n	80016dc <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	691a      	ldr	r2, [r3, #16]
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001634:	b2d2      	uxtb	r2, r2
 8001636:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800163c:	1c5a      	adds	r2, r3, #1
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001646:	3b01      	subs	r3, #1
 8001648:	b29a      	uxth	r2, r3
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001652:	b29b      	uxth	r3, r3
 8001654:	3b01      	subs	r3, #1
 8001656:	b29a      	uxth	r2, r3
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	695b      	ldr	r3, [r3, #20]
 8001662:	f003 0304 	and.w	r3, r3, #4
 8001666:	2b04      	cmp	r3, #4
 8001668:	d124      	bne.n	80016b4 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800166e:	2b03      	cmp	r3, #3
 8001670:	d107      	bne.n	8001682 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001680:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	691a      	ldr	r2, [r3, #16]
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800168c:	b2d2      	uxtb	r2, r2
 800168e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001694:	1c5a      	adds	r2, r3, #1
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800169e:	3b01      	subs	r3, #1
 80016a0:	b29a      	uxth	r2, r3
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016aa:	b29b      	uxth	r3, r3
 80016ac:	3b01      	subs	r3, #1
 80016ae:	b29a      	uxth	r2, r3
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	f47f ae88 	bne.w	80013ce <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	2220      	movs	r2, #32
 80016c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	2200      	movs	r2, #0
 80016ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	2200      	movs	r2, #0
 80016d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80016d6:	2300      	movs	r3, #0
 80016d8:	e000      	b.n	80016dc <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 80016da:	2302      	movs	r3, #2
  }
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3728      	adds	r7, #40	@ 0x28
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	00010004 	.word	0x00010004
 80016e8:	20000000 	.word	0x20000000
 80016ec:	14f8b589 	.word	0x14f8b589

080016f0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b088      	sub	sp, #32
 80016f4:	af02      	add	r7, sp, #8
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	607a      	str	r2, [r7, #4]
 80016fa:	603b      	str	r3, [r7, #0]
 80016fc:	460b      	mov	r3, r1
 80016fe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001704:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	2b08      	cmp	r3, #8
 800170a:	d006      	beq.n	800171a <I2C_MasterRequestWrite+0x2a>
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	2b01      	cmp	r3, #1
 8001710:	d003      	beq.n	800171a <I2C_MasterRequestWrite+0x2a>
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001718:	d108      	bne.n	800172c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001728:	601a      	str	r2, [r3, #0]
 800172a:	e00b      	b.n	8001744 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001730:	2b12      	cmp	r3, #18
 8001732:	d107      	bne.n	8001744 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001742:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	9300      	str	r3, [sp, #0]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2200      	movs	r2, #0
 800174c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001750:	68f8      	ldr	r0, [r7, #12]
 8001752:	f000 f91d 	bl	8001990 <I2C_WaitOnFlagUntilTimeout>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d00d      	beq.n	8001778 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001766:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800176a:	d103      	bne.n	8001774 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001772:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001774:	2303      	movs	r3, #3
 8001776:	e035      	b.n	80017e4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	691b      	ldr	r3, [r3, #16]
 800177c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001780:	d108      	bne.n	8001794 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001782:	897b      	ldrh	r3, [r7, #10]
 8001784:	b2db      	uxtb	r3, r3
 8001786:	461a      	mov	r2, r3
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001790:	611a      	str	r2, [r3, #16]
 8001792:	e01b      	b.n	80017cc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001794:	897b      	ldrh	r3, [r7, #10]
 8001796:	11db      	asrs	r3, r3, #7
 8001798:	b2db      	uxtb	r3, r3
 800179a:	f003 0306 	and.w	r3, r3, #6
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	f063 030f 	orn	r3, r3, #15
 80017a4:	b2da      	uxtb	r2, r3
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	490e      	ldr	r1, [pc, #56]	@ (80017ec <I2C_MasterRequestWrite+0xfc>)
 80017b2:	68f8      	ldr	r0, [r7, #12]
 80017b4:	f000 f966 	bl	8001a84 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e010      	b.n	80017e4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80017c2:	897b      	ldrh	r3, [r7, #10]
 80017c4:	b2da      	uxtb	r2, r3
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	4907      	ldr	r1, [pc, #28]	@ (80017f0 <I2C_MasterRequestWrite+0x100>)
 80017d2:	68f8      	ldr	r0, [r7, #12]
 80017d4:	f000 f956 	bl	8001a84 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e000      	b.n	80017e4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80017e2:	2300      	movs	r3, #0
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3718      	adds	r7, #24
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	00010008 	.word	0x00010008
 80017f0:	00010002 	.word	0x00010002

080017f4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b088      	sub	sp, #32
 80017f8:	af02      	add	r7, sp, #8
 80017fa:	60f8      	str	r0, [r7, #12]
 80017fc:	607a      	str	r2, [r7, #4]
 80017fe:	603b      	str	r3, [r7, #0]
 8001800:	460b      	mov	r3, r1
 8001802:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001808:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001818:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	2b08      	cmp	r3, #8
 800181e:	d006      	beq.n	800182e <I2C_MasterRequestRead+0x3a>
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	2b01      	cmp	r3, #1
 8001824:	d003      	beq.n	800182e <I2C_MasterRequestRead+0x3a>
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800182c:	d108      	bne.n	8001840 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	e00b      	b.n	8001858 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001844:	2b11      	cmp	r3, #17
 8001846:	d107      	bne.n	8001858 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001856:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	9300      	str	r3, [sp, #0]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2200      	movs	r2, #0
 8001860:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001864:	68f8      	ldr	r0, [r7, #12]
 8001866:	f000 f893 	bl	8001990 <I2C_WaitOnFlagUntilTimeout>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d00d      	beq.n	800188c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800187a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800187e:	d103      	bne.n	8001888 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001886:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001888:	2303      	movs	r3, #3
 800188a:	e079      	b.n	8001980 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	691b      	ldr	r3, [r3, #16]
 8001890:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001894:	d108      	bne.n	80018a8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001896:	897b      	ldrh	r3, [r7, #10]
 8001898:	b2db      	uxtb	r3, r3
 800189a:	f043 0301 	orr.w	r3, r3, #1
 800189e:	b2da      	uxtb	r2, r3
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	611a      	str	r2, [r3, #16]
 80018a6:	e05f      	b.n	8001968 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80018a8:	897b      	ldrh	r3, [r7, #10]
 80018aa:	11db      	asrs	r3, r3, #7
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	f003 0306 	and.w	r3, r3, #6
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	f063 030f 	orn	r3, r3, #15
 80018b8:	b2da      	uxtb	r2, r3
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	4930      	ldr	r1, [pc, #192]	@ (8001988 <I2C_MasterRequestRead+0x194>)
 80018c6:	68f8      	ldr	r0, [r7, #12]
 80018c8:	f000 f8dc 	bl	8001a84 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e054      	b.n	8001980 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80018d6:	897b      	ldrh	r3, [r7, #10]
 80018d8:	b2da      	uxtb	r2, r3
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	4929      	ldr	r1, [pc, #164]	@ (800198c <I2C_MasterRequestRead+0x198>)
 80018e6:	68f8      	ldr	r0, [r7, #12]
 80018e8:	f000 f8cc 	bl	8001a84 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e044      	b.n	8001980 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018f6:	2300      	movs	r3, #0
 80018f8:	613b      	str	r3, [r7, #16]
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	695b      	ldr	r3, [r3, #20]
 8001900:	613b      	str	r3, [r7, #16]
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	699b      	ldr	r3, [r3, #24]
 8001908:	613b      	str	r3, [r7, #16]
 800190a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800191a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	9300      	str	r3, [sp, #0]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2200      	movs	r2, #0
 8001924:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001928:	68f8      	ldr	r0, [r7, #12]
 800192a:	f000 f831 	bl	8001990 <I2C_WaitOnFlagUntilTimeout>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d00d      	beq.n	8001950 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800193e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001942:	d103      	bne.n	800194c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800194a:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 800194c:	2303      	movs	r3, #3
 800194e:	e017      	b.n	8001980 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001950:	897b      	ldrh	r3, [r7, #10]
 8001952:	11db      	asrs	r3, r3, #7
 8001954:	b2db      	uxtb	r3, r3
 8001956:	f003 0306 	and.w	r3, r3, #6
 800195a:	b2db      	uxtb	r3, r3
 800195c:	f063 030e 	orn	r3, r3, #14
 8001960:	b2da      	uxtb	r2, r3
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	4907      	ldr	r1, [pc, #28]	@ (800198c <I2C_MasterRequestRead+0x198>)
 800196e:	68f8      	ldr	r0, [r7, #12]
 8001970:	f000 f888 	bl	8001a84 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e000      	b.n	8001980 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800197e:	2300      	movs	r3, #0
}
 8001980:	4618      	mov	r0, r3
 8001982:	3718      	adds	r7, #24
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	00010008 	.word	0x00010008
 800198c:	00010002 	.word	0x00010002

08001990 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	60f8      	str	r0, [r7, #12]
 8001998:	60b9      	str	r1, [r7, #8]
 800199a:	603b      	str	r3, [r7, #0]
 800199c:	4613      	mov	r3, r2
 800199e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80019a0:	e048      	b.n	8001a34 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019a8:	d044      	beq.n	8001a34 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019aa:	f7fe ff45 	bl	8000838 <HAL_GetTick>
 80019ae:	4602      	mov	r2, r0
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	683a      	ldr	r2, [r7, #0]
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d302      	bcc.n	80019c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d139      	bne.n	8001a34 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	0c1b      	lsrs	r3, r3, #16
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d10d      	bne.n	80019e6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	695b      	ldr	r3, [r3, #20]
 80019d0:	43da      	mvns	r2, r3
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	4013      	ands	r3, r2
 80019d6:	b29b      	uxth	r3, r3
 80019d8:	2b00      	cmp	r3, #0
 80019da:	bf0c      	ite	eq
 80019dc:	2301      	moveq	r3, #1
 80019de:	2300      	movne	r3, #0
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	461a      	mov	r2, r3
 80019e4:	e00c      	b.n	8001a00 <I2C_WaitOnFlagUntilTimeout+0x70>
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	699b      	ldr	r3, [r3, #24]
 80019ec:	43da      	mvns	r2, r3
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	4013      	ands	r3, r2
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	bf0c      	ite	eq
 80019f8:	2301      	moveq	r3, #1
 80019fa:	2300      	movne	r3, #0
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	461a      	mov	r2, r3
 8001a00:	79fb      	ldrb	r3, [r7, #7]
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d116      	bne.n	8001a34 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	2220      	movs	r2, #32
 8001a10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	2200      	movs	r2, #0
 8001a18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a20:	f043 0220 	orr.w	r2, r3, #32
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e023      	b.n	8001a7c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	0c1b      	lsrs	r3, r3, #16
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d10d      	bne.n	8001a5a <I2C_WaitOnFlagUntilTimeout+0xca>
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	695b      	ldr	r3, [r3, #20]
 8001a44:	43da      	mvns	r2, r3
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	bf0c      	ite	eq
 8001a50:	2301      	moveq	r3, #1
 8001a52:	2300      	movne	r3, #0
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	461a      	mov	r2, r3
 8001a58:	e00c      	b.n	8001a74 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	699b      	ldr	r3, [r3, #24]
 8001a60:	43da      	mvns	r2, r3
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	4013      	ands	r3, r2
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	bf0c      	ite	eq
 8001a6c:	2301      	moveq	r3, #1
 8001a6e:	2300      	movne	r3, #0
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	461a      	mov	r2, r3
 8001a74:	79fb      	ldrb	r3, [r7, #7]
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d093      	beq.n	80019a2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001a7a:	2300      	movs	r3, #0
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3710      	adds	r7, #16
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	60f8      	str	r0, [r7, #12]
 8001a8c:	60b9      	str	r1, [r7, #8]
 8001a8e:	607a      	str	r2, [r7, #4]
 8001a90:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001a92:	e071      	b.n	8001b78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	695b      	ldr	r3, [r3, #20]
 8001a9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001aa2:	d123      	bne.n	8001aec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ab2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001abc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	2220      	movs	r2, #32
 8001ac8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad8:	f043 0204 	orr.w	r2, r3, #4
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e067      	b.n	8001bbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001af2:	d041      	beq.n	8001b78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001af4:	f7fe fea0 	bl	8000838 <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d302      	bcc.n	8001b0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d136      	bne.n	8001b78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	0c1b      	lsrs	r3, r3, #16
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d10c      	bne.n	8001b2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	695b      	ldr	r3, [r3, #20]
 8001b1a:	43da      	mvns	r2, r3
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	4013      	ands	r3, r2
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	bf14      	ite	ne
 8001b26:	2301      	movne	r3, #1
 8001b28:	2300      	moveq	r3, #0
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	e00b      	b.n	8001b46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	699b      	ldr	r3, [r3, #24]
 8001b34:	43da      	mvns	r2, r3
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	b29b      	uxth	r3, r3
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	bf14      	ite	ne
 8001b40:	2301      	movne	r3, #1
 8001b42:	2300      	moveq	r3, #0
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d016      	beq.n	8001b78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2220      	movs	r2, #32
 8001b54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b64:	f043 0220 	orr.w	r2, r3, #32
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e021      	b.n	8001bbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	0c1b      	lsrs	r3, r3, #16
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d10c      	bne.n	8001b9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	695b      	ldr	r3, [r3, #20]
 8001b88:	43da      	mvns	r2, r3
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	bf14      	ite	ne
 8001b94:	2301      	movne	r3, #1
 8001b96:	2300      	moveq	r3, #0
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	e00b      	b.n	8001bb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	699b      	ldr	r3, [r3, #24]
 8001ba2:	43da      	mvns	r2, r3
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	bf14      	ite	ne
 8001bae:	2301      	movne	r3, #1
 8001bb0:	2300      	moveq	r3, #0
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	f47f af6d 	bne.w	8001a94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001bba:	2300      	movs	r3, #0
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3710      	adds	r7, #16
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	60b9      	str	r1, [r7, #8]
 8001bce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001bd0:	e034      	b.n	8001c3c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001bd2:	68f8      	ldr	r0, [r7, #12]
 8001bd4:	f000 f8e3 	bl	8001d9e <I2C_IsAcknowledgeFailed>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e034      	b.n	8001c4c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001be8:	d028      	beq.n	8001c3c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bea:	f7fe fe25 	bl	8000838 <HAL_GetTick>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	68ba      	ldr	r2, [r7, #8]
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d302      	bcc.n	8001c00 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d11d      	bne.n	8001c3c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	695b      	ldr	r3, [r3, #20]
 8001c06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c0a:	2b80      	cmp	r3, #128	@ 0x80
 8001c0c:	d016      	beq.n	8001c3c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	2200      	movs	r2, #0
 8001c12:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2220      	movs	r2, #32
 8001c18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c28:	f043 0220 	orr.w	r2, r3, #32
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2200      	movs	r2, #0
 8001c34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e007      	b.n	8001c4c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	695b      	ldr	r3, [r3, #20]
 8001c42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c46:	2b80      	cmp	r3, #128	@ 0x80
 8001c48:	d1c3      	bne.n	8001bd2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001c4a:	2300      	movs	r3, #0
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3710      	adds	r7, #16
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	60f8      	str	r0, [r7, #12]
 8001c5c:	60b9      	str	r1, [r7, #8]
 8001c5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001c60:	e034      	b.n	8001ccc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001c62:	68f8      	ldr	r0, [r7, #12]
 8001c64:	f000 f89b 	bl	8001d9e <I2C_IsAcknowledgeFailed>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e034      	b.n	8001cdc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c78:	d028      	beq.n	8001ccc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c7a:	f7fe fddd 	bl	8000838 <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	68ba      	ldr	r2, [r7, #8]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d302      	bcc.n	8001c90 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d11d      	bne.n	8001ccc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	695b      	ldr	r3, [r3, #20]
 8001c96:	f003 0304 	and.w	r3, r3, #4
 8001c9a:	2b04      	cmp	r3, #4
 8001c9c:	d016      	beq.n	8001ccc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	2220      	movs	r2, #32
 8001ca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cb8:	f043 0220 	orr.w	r2, r3, #32
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e007      	b.n	8001cdc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	695b      	ldr	r3, [r3, #20]
 8001cd2:	f003 0304 	and.w	r3, r3, #4
 8001cd6:	2b04      	cmp	r3, #4
 8001cd8:	d1c3      	bne.n	8001c62 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001cda:	2300      	movs	r3, #0
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3710      	adds	r7, #16
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001cf0:	e049      	b.n	8001d86 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	695b      	ldr	r3, [r3, #20]
 8001cf8:	f003 0310 	and.w	r3, r3, #16
 8001cfc:	2b10      	cmp	r3, #16
 8001cfe:	d119      	bne.n	8001d34 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f06f 0210 	mvn.w	r2, #16
 8001d08:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2220      	movs	r2, #32
 8001d14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e030      	b.n	8001d96 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d34:	f7fe fd80 	bl	8000838 <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	68ba      	ldr	r2, [r7, #8]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d302      	bcc.n	8001d4a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d11d      	bne.n	8001d86 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	695b      	ldr	r3, [r3, #20]
 8001d50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d54:	2b40      	cmp	r3, #64	@ 0x40
 8001d56:	d016      	beq.n	8001d86 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2220      	movs	r2, #32
 8001d62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d72:	f043 0220 	orr.w	r2, r3, #32
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e007      	b.n	8001d96 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	695b      	ldr	r3, [r3, #20]
 8001d8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d90:	2b40      	cmp	r3, #64	@ 0x40
 8001d92:	d1ae      	bne.n	8001cf2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3710      	adds	r7, #16
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	b083      	sub	sp, #12
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	695b      	ldr	r3, [r3, #20]
 8001dac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001db0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001db4:	d11b      	bne.n	8001dee <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001dbe:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2220      	movs	r2, #32
 8001dca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dda:	f043 0204 	orr.w	r2, r3, #4
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e000      	b.n	8001df0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001dee:	2300      	movs	r3, #0
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bc80      	pop	{r7}
 8001df8:	4770      	bx	lr
	...

08001dfc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b086      	sub	sp, #24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d101      	bne.n	8001e0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e272      	b.n	80022f4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	f000 8087 	beq.w	8001f2a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e1c:	4b92      	ldr	r3, [pc, #584]	@ (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f003 030c 	and.w	r3, r3, #12
 8001e24:	2b04      	cmp	r3, #4
 8001e26:	d00c      	beq.n	8001e42 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e28:	4b8f      	ldr	r3, [pc, #572]	@ (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f003 030c 	and.w	r3, r3, #12
 8001e30:	2b08      	cmp	r3, #8
 8001e32:	d112      	bne.n	8001e5a <HAL_RCC_OscConfig+0x5e>
 8001e34:	4b8c      	ldr	r3, [pc, #560]	@ (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e40:	d10b      	bne.n	8001e5a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e42:	4b89      	ldr	r3, [pc, #548]	@ (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d06c      	beq.n	8001f28 <HAL_RCC_OscConfig+0x12c>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d168      	bne.n	8001f28 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e24c      	b.n	80022f4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e62:	d106      	bne.n	8001e72 <HAL_RCC_OscConfig+0x76>
 8001e64:	4b80      	ldr	r3, [pc, #512]	@ (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a7f      	ldr	r2, [pc, #508]	@ (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001e6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e6e:	6013      	str	r3, [r2, #0]
 8001e70:	e02e      	b.n	8001ed0 <HAL_RCC_OscConfig+0xd4>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d10c      	bne.n	8001e94 <HAL_RCC_OscConfig+0x98>
 8001e7a:	4b7b      	ldr	r3, [pc, #492]	@ (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a7a      	ldr	r2, [pc, #488]	@ (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001e80:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e84:	6013      	str	r3, [r2, #0]
 8001e86:	4b78      	ldr	r3, [pc, #480]	@ (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a77      	ldr	r2, [pc, #476]	@ (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001e8c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e90:	6013      	str	r3, [r2, #0]
 8001e92:	e01d      	b.n	8001ed0 <HAL_RCC_OscConfig+0xd4>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e9c:	d10c      	bne.n	8001eb8 <HAL_RCC_OscConfig+0xbc>
 8001e9e:	4b72      	ldr	r3, [pc, #456]	@ (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a71      	ldr	r2, [pc, #452]	@ (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001ea4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ea8:	6013      	str	r3, [r2, #0]
 8001eaa:	4b6f      	ldr	r3, [pc, #444]	@ (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a6e      	ldr	r2, [pc, #440]	@ (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001eb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001eb4:	6013      	str	r3, [r2, #0]
 8001eb6:	e00b      	b.n	8001ed0 <HAL_RCC_OscConfig+0xd4>
 8001eb8:	4b6b      	ldr	r3, [pc, #428]	@ (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a6a      	ldr	r2, [pc, #424]	@ (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001ebe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ec2:	6013      	str	r3, [r2, #0]
 8001ec4:	4b68      	ldr	r3, [pc, #416]	@ (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a67      	ldr	r2, [pc, #412]	@ (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001eca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ece:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d013      	beq.n	8001f00 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed8:	f7fe fcae 	bl	8000838 <HAL_GetTick>
 8001edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ede:	e008      	b.n	8001ef2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ee0:	f7fe fcaa 	bl	8000838 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b64      	cmp	r3, #100	@ 0x64
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e200      	b.n	80022f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ef2:	4b5d      	ldr	r3, [pc, #372]	@ (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d0f0      	beq.n	8001ee0 <HAL_RCC_OscConfig+0xe4>
 8001efe:	e014      	b.n	8001f2a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f00:	f7fe fc9a 	bl	8000838 <HAL_GetTick>
 8001f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f06:	e008      	b.n	8001f1a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f08:	f7fe fc96 	bl	8000838 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b64      	cmp	r3, #100	@ 0x64
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e1ec      	b.n	80022f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f1a:	4b53      	ldr	r3, [pc, #332]	@ (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d1f0      	bne.n	8001f08 <HAL_RCC_OscConfig+0x10c>
 8001f26:	e000      	b.n	8001f2a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d063      	beq.n	8001ffe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f36:	4b4c      	ldr	r3, [pc, #304]	@ (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f003 030c 	and.w	r3, r3, #12
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d00b      	beq.n	8001f5a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f42:	4b49      	ldr	r3, [pc, #292]	@ (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f003 030c 	and.w	r3, r3, #12
 8001f4a:	2b08      	cmp	r3, #8
 8001f4c:	d11c      	bne.n	8001f88 <HAL_RCC_OscConfig+0x18c>
 8001f4e:	4b46      	ldr	r3, [pc, #280]	@ (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d116      	bne.n	8001f88 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f5a:	4b43      	ldr	r3, [pc, #268]	@ (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d005      	beq.n	8001f72 <HAL_RCC_OscConfig+0x176>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d001      	beq.n	8001f72 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e1c0      	b.n	80022f4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f72:	4b3d      	ldr	r3, [pc, #244]	@ (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	695b      	ldr	r3, [r3, #20]
 8001f7e:	00db      	lsls	r3, r3, #3
 8001f80:	4939      	ldr	r1, [pc, #228]	@ (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001f82:	4313      	orrs	r3, r2
 8001f84:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f86:	e03a      	b.n	8001ffe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	691b      	ldr	r3, [r3, #16]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d020      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f90:	4b36      	ldr	r3, [pc, #216]	@ (800206c <HAL_RCC_OscConfig+0x270>)
 8001f92:	2201      	movs	r2, #1
 8001f94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f96:	f7fe fc4f 	bl	8000838 <HAL_GetTick>
 8001f9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f9c:	e008      	b.n	8001fb0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f9e:	f7fe fc4b 	bl	8000838 <HAL_GetTick>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d901      	bls.n	8001fb0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001fac:	2303      	movs	r3, #3
 8001fae:	e1a1      	b.n	80022f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fb0:	4b2d      	ldr	r3, [pc, #180]	@ (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0302 	and.w	r3, r3, #2
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d0f0      	beq.n	8001f9e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fbc:	4b2a      	ldr	r3, [pc, #168]	@ (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	695b      	ldr	r3, [r3, #20]
 8001fc8:	00db      	lsls	r3, r3, #3
 8001fca:	4927      	ldr	r1, [pc, #156]	@ (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	600b      	str	r3, [r1, #0]
 8001fd0:	e015      	b.n	8001ffe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fd2:	4b26      	ldr	r3, [pc, #152]	@ (800206c <HAL_RCC_OscConfig+0x270>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd8:	f7fe fc2e 	bl	8000838 <HAL_GetTick>
 8001fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fde:	e008      	b.n	8001ff2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fe0:	f7fe fc2a 	bl	8000838 <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d901      	bls.n	8001ff2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e180      	b.n	80022f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ff2:	4b1d      	ldr	r3, [pc, #116]	@ (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0302 	and.w	r3, r3, #2
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d1f0      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0308 	and.w	r3, r3, #8
 8002006:	2b00      	cmp	r3, #0
 8002008:	d03a      	beq.n	8002080 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	699b      	ldr	r3, [r3, #24]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d019      	beq.n	8002046 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002012:	4b17      	ldr	r3, [pc, #92]	@ (8002070 <HAL_RCC_OscConfig+0x274>)
 8002014:	2201      	movs	r2, #1
 8002016:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002018:	f7fe fc0e 	bl	8000838 <HAL_GetTick>
 800201c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800201e:	e008      	b.n	8002032 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002020:	f7fe fc0a 	bl	8000838 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b02      	cmp	r3, #2
 800202c:	d901      	bls.n	8002032 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e160      	b.n	80022f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002032:	4b0d      	ldr	r3, [pc, #52]	@ (8002068 <HAL_RCC_OscConfig+0x26c>)
 8002034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	2b00      	cmp	r3, #0
 800203c:	d0f0      	beq.n	8002020 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800203e:	2001      	movs	r0, #1
 8002040:	f000 faba 	bl	80025b8 <RCC_Delay>
 8002044:	e01c      	b.n	8002080 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002046:	4b0a      	ldr	r3, [pc, #40]	@ (8002070 <HAL_RCC_OscConfig+0x274>)
 8002048:	2200      	movs	r2, #0
 800204a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800204c:	f7fe fbf4 	bl	8000838 <HAL_GetTick>
 8002050:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002052:	e00f      	b.n	8002074 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002054:	f7fe fbf0 	bl	8000838 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b02      	cmp	r3, #2
 8002060:	d908      	bls.n	8002074 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e146      	b.n	80022f4 <HAL_RCC_OscConfig+0x4f8>
 8002066:	bf00      	nop
 8002068:	40021000 	.word	0x40021000
 800206c:	42420000 	.word	0x42420000
 8002070:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002074:	4b92      	ldr	r3, [pc, #584]	@ (80022c0 <HAL_RCC_OscConfig+0x4c4>)
 8002076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002078:	f003 0302 	and.w	r3, r3, #2
 800207c:	2b00      	cmp	r3, #0
 800207e:	d1e9      	bne.n	8002054 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0304 	and.w	r3, r3, #4
 8002088:	2b00      	cmp	r3, #0
 800208a:	f000 80a6 	beq.w	80021da <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800208e:	2300      	movs	r3, #0
 8002090:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002092:	4b8b      	ldr	r3, [pc, #556]	@ (80022c0 <HAL_RCC_OscConfig+0x4c4>)
 8002094:	69db      	ldr	r3, [r3, #28]
 8002096:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d10d      	bne.n	80020ba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800209e:	4b88      	ldr	r3, [pc, #544]	@ (80022c0 <HAL_RCC_OscConfig+0x4c4>)
 80020a0:	69db      	ldr	r3, [r3, #28]
 80020a2:	4a87      	ldr	r2, [pc, #540]	@ (80022c0 <HAL_RCC_OscConfig+0x4c4>)
 80020a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020a8:	61d3      	str	r3, [r2, #28]
 80020aa:	4b85      	ldr	r3, [pc, #532]	@ (80022c0 <HAL_RCC_OscConfig+0x4c4>)
 80020ac:	69db      	ldr	r3, [r3, #28]
 80020ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020b2:	60bb      	str	r3, [r7, #8]
 80020b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020b6:	2301      	movs	r3, #1
 80020b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ba:	4b82      	ldr	r3, [pc, #520]	@ (80022c4 <HAL_RCC_OscConfig+0x4c8>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d118      	bne.n	80020f8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020c6:	4b7f      	ldr	r3, [pc, #508]	@ (80022c4 <HAL_RCC_OscConfig+0x4c8>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a7e      	ldr	r2, [pc, #504]	@ (80022c4 <HAL_RCC_OscConfig+0x4c8>)
 80020cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020d2:	f7fe fbb1 	bl	8000838 <HAL_GetTick>
 80020d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020d8:	e008      	b.n	80020ec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020da:	f7fe fbad 	bl	8000838 <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	2b64      	cmp	r3, #100	@ 0x64
 80020e6:	d901      	bls.n	80020ec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80020e8:	2303      	movs	r3, #3
 80020ea:	e103      	b.n	80022f4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ec:	4b75      	ldr	r3, [pc, #468]	@ (80022c4 <HAL_RCC_OscConfig+0x4c8>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d0f0      	beq.n	80020da <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d106      	bne.n	800210e <HAL_RCC_OscConfig+0x312>
 8002100:	4b6f      	ldr	r3, [pc, #444]	@ (80022c0 <HAL_RCC_OscConfig+0x4c4>)
 8002102:	6a1b      	ldr	r3, [r3, #32]
 8002104:	4a6e      	ldr	r2, [pc, #440]	@ (80022c0 <HAL_RCC_OscConfig+0x4c4>)
 8002106:	f043 0301 	orr.w	r3, r3, #1
 800210a:	6213      	str	r3, [r2, #32]
 800210c:	e02d      	b.n	800216a <HAL_RCC_OscConfig+0x36e>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	68db      	ldr	r3, [r3, #12]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d10c      	bne.n	8002130 <HAL_RCC_OscConfig+0x334>
 8002116:	4b6a      	ldr	r3, [pc, #424]	@ (80022c0 <HAL_RCC_OscConfig+0x4c4>)
 8002118:	6a1b      	ldr	r3, [r3, #32]
 800211a:	4a69      	ldr	r2, [pc, #420]	@ (80022c0 <HAL_RCC_OscConfig+0x4c4>)
 800211c:	f023 0301 	bic.w	r3, r3, #1
 8002120:	6213      	str	r3, [r2, #32]
 8002122:	4b67      	ldr	r3, [pc, #412]	@ (80022c0 <HAL_RCC_OscConfig+0x4c4>)
 8002124:	6a1b      	ldr	r3, [r3, #32]
 8002126:	4a66      	ldr	r2, [pc, #408]	@ (80022c0 <HAL_RCC_OscConfig+0x4c4>)
 8002128:	f023 0304 	bic.w	r3, r3, #4
 800212c:	6213      	str	r3, [r2, #32]
 800212e:	e01c      	b.n	800216a <HAL_RCC_OscConfig+0x36e>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	2b05      	cmp	r3, #5
 8002136:	d10c      	bne.n	8002152 <HAL_RCC_OscConfig+0x356>
 8002138:	4b61      	ldr	r3, [pc, #388]	@ (80022c0 <HAL_RCC_OscConfig+0x4c4>)
 800213a:	6a1b      	ldr	r3, [r3, #32]
 800213c:	4a60      	ldr	r2, [pc, #384]	@ (80022c0 <HAL_RCC_OscConfig+0x4c4>)
 800213e:	f043 0304 	orr.w	r3, r3, #4
 8002142:	6213      	str	r3, [r2, #32]
 8002144:	4b5e      	ldr	r3, [pc, #376]	@ (80022c0 <HAL_RCC_OscConfig+0x4c4>)
 8002146:	6a1b      	ldr	r3, [r3, #32]
 8002148:	4a5d      	ldr	r2, [pc, #372]	@ (80022c0 <HAL_RCC_OscConfig+0x4c4>)
 800214a:	f043 0301 	orr.w	r3, r3, #1
 800214e:	6213      	str	r3, [r2, #32]
 8002150:	e00b      	b.n	800216a <HAL_RCC_OscConfig+0x36e>
 8002152:	4b5b      	ldr	r3, [pc, #364]	@ (80022c0 <HAL_RCC_OscConfig+0x4c4>)
 8002154:	6a1b      	ldr	r3, [r3, #32]
 8002156:	4a5a      	ldr	r2, [pc, #360]	@ (80022c0 <HAL_RCC_OscConfig+0x4c4>)
 8002158:	f023 0301 	bic.w	r3, r3, #1
 800215c:	6213      	str	r3, [r2, #32]
 800215e:	4b58      	ldr	r3, [pc, #352]	@ (80022c0 <HAL_RCC_OscConfig+0x4c4>)
 8002160:	6a1b      	ldr	r3, [r3, #32]
 8002162:	4a57      	ldr	r2, [pc, #348]	@ (80022c0 <HAL_RCC_OscConfig+0x4c4>)
 8002164:	f023 0304 	bic.w	r3, r3, #4
 8002168:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d015      	beq.n	800219e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002172:	f7fe fb61 	bl	8000838 <HAL_GetTick>
 8002176:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002178:	e00a      	b.n	8002190 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800217a:	f7fe fb5d 	bl	8000838 <HAL_GetTick>
 800217e:	4602      	mov	r2, r0
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002188:	4293      	cmp	r3, r2
 800218a:	d901      	bls.n	8002190 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800218c:	2303      	movs	r3, #3
 800218e:	e0b1      	b.n	80022f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002190:	4b4b      	ldr	r3, [pc, #300]	@ (80022c0 <HAL_RCC_OscConfig+0x4c4>)
 8002192:	6a1b      	ldr	r3, [r3, #32]
 8002194:	f003 0302 	and.w	r3, r3, #2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d0ee      	beq.n	800217a <HAL_RCC_OscConfig+0x37e>
 800219c:	e014      	b.n	80021c8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800219e:	f7fe fb4b 	bl	8000838 <HAL_GetTick>
 80021a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021a4:	e00a      	b.n	80021bc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021a6:	f7fe fb47 	bl	8000838 <HAL_GetTick>
 80021aa:	4602      	mov	r2, r0
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d901      	bls.n	80021bc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80021b8:	2303      	movs	r3, #3
 80021ba:	e09b      	b.n	80022f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021bc:	4b40      	ldr	r3, [pc, #256]	@ (80022c0 <HAL_RCC_OscConfig+0x4c4>)
 80021be:	6a1b      	ldr	r3, [r3, #32]
 80021c0:	f003 0302 	and.w	r3, r3, #2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d1ee      	bne.n	80021a6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80021c8:	7dfb      	ldrb	r3, [r7, #23]
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d105      	bne.n	80021da <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021ce:	4b3c      	ldr	r3, [pc, #240]	@ (80022c0 <HAL_RCC_OscConfig+0x4c4>)
 80021d0:	69db      	ldr	r3, [r3, #28]
 80021d2:	4a3b      	ldr	r2, [pc, #236]	@ (80022c0 <HAL_RCC_OscConfig+0x4c4>)
 80021d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021d8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	69db      	ldr	r3, [r3, #28]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	f000 8087 	beq.w	80022f2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021e4:	4b36      	ldr	r3, [pc, #216]	@ (80022c0 <HAL_RCC_OscConfig+0x4c4>)
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f003 030c 	and.w	r3, r3, #12
 80021ec:	2b08      	cmp	r3, #8
 80021ee:	d061      	beq.n	80022b4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	69db      	ldr	r3, [r3, #28]
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d146      	bne.n	8002286 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021f8:	4b33      	ldr	r3, [pc, #204]	@ (80022c8 <HAL_RCC_OscConfig+0x4cc>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021fe:	f7fe fb1b 	bl	8000838 <HAL_GetTick>
 8002202:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002204:	e008      	b.n	8002218 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002206:	f7fe fb17 	bl	8000838 <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	2b02      	cmp	r3, #2
 8002212:	d901      	bls.n	8002218 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	e06d      	b.n	80022f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002218:	4b29      	ldr	r3, [pc, #164]	@ (80022c0 <HAL_RCC_OscConfig+0x4c4>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d1f0      	bne.n	8002206 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6a1b      	ldr	r3, [r3, #32]
 8002228:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800222c:	d108      	bne.n	8002240 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800222e:	4b24      	ldr	r3, [pc, #144]	@ (80022c0 <HAL_RCC_OscConfig+0x4c4>)
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	4921      	ldr	r1, [pc, #132]	@ (80022c0 <HAL_RCC_OscConfig+0x4c4>)
 800223c:	4313      	orrs	r3, r2
 800223e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002240:	4b1f      	ldr	r3, [pc, #124]	@ (80022c0 <HAL_RCC_OscConfig+0x4c4>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6a19      	ldr	r1, [r3, #32]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002250:	430b      	orrs	r3, r1
 8002252:	491b      	ldr	r1, [pc, #108]	@ (80022c0 <HAL_RCC_OscConfig+0x4c4>)
 8002254:	4313      	orrs	r3, r2
 8002256:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002258:	4b1b      	ldr	r3, [pc, #108]	@ (80022c8 <HAL_RCC_OscConfig+0x4cc>)
 800225a:	2201      	movs	r2, #1
 800225c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800225e:	f7fe faeb 	bl	8000838 <HAL_GetTick>
 8002262:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002264:	e008      	b.n	8002278 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002266:	f7fe fae7 	bl	8000838 <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	2b02      	cmp	r3, #2
 8002272:	d901      	bls.n	8002278 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e03d      	b.n	80022f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002278:	4b11      	ldr	r3, [pc, #68]	@ (80022c0 <HAL_RCC_OscConfig+0x4c4>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d0f0      	beq.n	8002266 <HAL_RCC_OscConfig+0x46a>
 8002284:	e035      	b.n	80022f2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002286:	4b10      	ldr	r3, [pc, #64]	@ (80022c8 <HAL_RCC_OscConfig+0x4cc>)
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800228c:	f7fe fad4 	bl	8000838 <HAL_GetTick>
 8002290:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002292:	e008      	b.n	80022a6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002294:	f7fe fad0 	bl	8000838 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e026      	b.n	80022f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022a6:	4b06      	ldr	r3, [pc, #24]	@ (80022c0 <HAL_RCC_OscConfig+0x4c4>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d1f0      	bne.n	8002294 <HAL_RCC_OscConfig+0x498>
 80022b2:	e01e      	b.n	80022f2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	69db      	ldr	r3, [r3, #28]
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d107      	bne.n	80022cc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e019      	b.n	80022f4 <HAL_RCC_OscConfig+0x4f8>
 80022c0:	40021000 	.word	0x40021000
 80022c4:	40007000 	.word	0x40007000
 80022c8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022cc:	4b0b      	ldr	r3, [pc, #44]	@ (80022fc <HAL_RCC_OscConfig+0x500>)
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6a1b      	ldr	r3, [r3, #32]
 80022dc:	429a      	cmp	r2, r3
 80022de:	d106      	bne.n	80022ee <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d001      	beq.n	80022f2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e000      	b.n	80022f4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80022f2:	2300      	movs	r3, #0
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3718      	adds	r7, #24
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	40021000 	.word	0x40021000

08002300 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d101      	bne.n	8002314 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e0d0      	b.n	80024b6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002314:	4b6a      	ldr	r3, [pc, #424]	@ (80024c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0307 	and.w	r3, r3, #7
 800231c:	683a      	ldr	r2, [r7, #0]
 800231e:	429a      	cmp	r2, r3
 8002320:	d910      	bls.n	8002344 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002322:	4b67      	ldr	r3, [pc, #412]	@ (80024c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f023 0207 	bic.w	r2, r3, #7
 800232a:	4965      	ldr	r1, [pc, #404]	@ (80024c0 <HAL_RCC_ClockConfig+0x1c0>)
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	4313      	orrs	r3, r2
 8002330:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002332:	4b63      	ldr	r3, [pc, #396]	@ (80024c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0307 	and.w	r3, r3, #7
 800233a:	683a      	ldr	r2, [r7, #0]
 800233c:	429a      	cmp	r2, r3
 800233e:	d001      	beq.n	8002344 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e0b8      	b.n	80024b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0302 	and.w	r3, r3, #2
 800234c:	2b00      	cmp	r3, #0
 800234e:	d020      	beq.n	8002392 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0304 	and.w	r3, r3, #4
 8002358:	2b00      	cmp	r3, #0
 800235a:	d005      	beq.n	8002368 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800235c:	4b59      	ldr	r3, [pc, #356]	@ (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	4a58      	ldr	r2, [pc, #352]	@ (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002362:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002366:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0308 	and.w	r3, r3, #8
 8002370:	2b00      	cmp	r3, #0
 8002372:	d005      	beq.n	8002380 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002374:	4b53      	ldr	r3, [pc, #332]	@ (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	4a52      	ldr	r2, [pc, #328]	@ (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 800237a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800237e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002380:	4b50      	ldr	r3, [pc, #320]	@ (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	494d      	ldr	r1, [pc, #308]	@ (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 800238e:	4313      	orrs	r3, r2
 8002390:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0301 	and.w	r3, r3, #1
 800239a:	2b00      	cmp	r3, #0
 800239c:	d040      	beq.n	8002420 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d107      	bne.n	80023b6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023a6:	4b47      	ldr	r3, [pc, #284]	@ (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d115      	bne.n	80023de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e07f      	b.n	80024b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d107      	bne.n	80023ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023be:	4b41      	ldr	r3, [pc, #260]	@ (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d109      	bne.n	80023de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e073      	b.n	80024b6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ce:	4b3d      	ldr	r3, [pc, #244]	@ (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d101      	bne.n	80023de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e06b      	b.n	80024b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023de:	4b39      	ldr	r3, [pc, #228]	@ (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f023 0203 	bic.w	r2, r3, #3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	4936      	ldr	r1, [pc, #216]	@ (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 80023ec:	4313      	orrs	r3, r2
 80023ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023f0:	f7fe fa22 	bl	8000838 <HAL_GetTick>
 80023f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023f6:	e00a      	b.n	800240e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023f8:	f7fe fa1e 	bl	8000838 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002406:	4293      	cmp	r3, r2
 8002408:	d901      	bls.n	800240e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e053      	b.n	80024b6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800240e:	4b2d      	ldr	r3, [pc, #180]	@ (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f003 020c 	and.w	r2, r3, #12
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	429a      	cmp	r2, r3
 800241e:	d1eb      	bne.n	80023f8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002420:	4b27      	ldr	r3, [pc, #156]	@ (80024c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0307 	and.w	r3, r3, #7
 8002428:	683a      	ldr	r2, [r7, #0]
 800242a:	429a      	cmp	r2, r3
 800242c:	d210      	bcs.n	8002450 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800242e:	4b24      	ldr	r3, [pc, #144]	@ (80024c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f023 0207 	bic.w	r2, r3, #7
 8002436:	4922      	ldr	r1, [pc, #136]	@ (80024c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	4313      	orrs	r3, r2
 800243c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800243e:	4b20      	ldr	r3, [pc, #128]	@ (80024c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0307 	and.w	r3, r3, #7
 8002446:	683a      	ldr	r2, [r7, #0]
 8002448:	429a      	cmp	r2, r3
 800244a:	d001      	beq.n	8002450 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e032      	b.n	80024b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0304 	and.w	r3, r3, #4
 8002458:	2b00      	cmp	r3, #0
 800245a:	d008      	beq.n	800246e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800245c:	4b19      	ldr	r3, [pc, #100]	@ (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	4916      	ldr	r1, [pc, #88]	@ (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 800246a:	4313      	orrs	r3, r2
 800246c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0308 	and.w	r3, r3, #8
 8002476:	2b00      	cmp	r3, #0
 8002478:	d009      	beq.n	800248e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800247a:	4b12      	ldr	r3, [pc, #72]	@ (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	691b      	ldr	r3, [r3, #16]
 8002486:	00db      	lsls	r3, r3, #3
 8002488:	490e      	ldr	r1, [pc, #56]	@ (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 800248a:	4313      	orrs	r3, r2
 800248c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800248e:	f000 f821 	bl	80024d4 <HAL_RCC_GetSysClockFreq>
 8002492:	4602      	mov	r2, r0
 8002494:	4b0b      	ldr	r3, [pc, #44]	@ (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	091b      	lsrs	r3, r3, #4
 800249a:	f003 030f 	and.w	r3, r3, #15
 800249e:	490a      	ldr	r1, [pc, #40]	@ (80024c8 <HAL_RCC_ClockConfig+0x1c8>)
 80024a0:	5ccb      	ldrb	r3, [r1, r3]
 80024a2:	fa22 f303 	lsr.w	r3, r2, r3
 80024a6:	4a09      	ldr	r2, [pc, #36]	@ (80024cc <HAL_RCC_ClockConfig+0x1cc>)
 80024a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80024aa:	4b09      	ldr	r3, [pc, #36]	@ (80024d0 <HAL_RCC_ClockConfig+0x1d0>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7fe f980 	bl	80007b4 <HAL_InitTick>

  return HAL_OK;
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3710      	adds	r7, #16
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	40022000 	.word	0x40022000
 80024c4:	40021000 	.word	0x40021000
 80024c8:	08002664 	.word	0x08002664
 80024cc:	20000000 	.word	0x20000000
 80024d0:	20000004 	.word	0x20000004

080024d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b087      	sub	sp, #28
 80024d8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024da:	2300      	movs	r3, #0
 80024dc:	60fb      	str	r3, [r7, #12]
 80024de:	2300      	movs	r3, #0
 80024e0:	60bb      	str	r3, [r7, #8]
 80024e2:	2300      	movs	r3, #0
 80024e4:	617b      	str	r3, [r7, #20]
 80024e6:	2300      	movs	r3, #0
 80024e8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80024ea:	2300      	movs	r3, #0
 80024ec:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80024ee:	4b1e      	ldr	r3, [pc, #120]	@ (8002568 <HAL_RCC_GetSysClockFreq+0x94>)
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f003 030c 	and.w	r3, r3, #12
 80024fa:	2b04      	cmp	r3, #4
 80024fc:	d002      	beq.n	8002504 <HAL_RCC_GetSysClockFreq+0x30>
 80024fe:	2b08      	cmp	r3, #8
 8002500:	d003      	beq.n	800250a <HAL_RCC_GetSysClockFreq+0x36>
 8002502:	e027      	b.n	8002554 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002504:	4b19      	ldr	r3, [pc, #100]	@ (800256c <HAL_RCC_GetSysClockFreq+0x98>)
 8002506:	613b      	str	r3, [r7, #16]
      break;
 8002508:	e027      	b.n	800255a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	0c9b      	lsrs	r3, r3, #18
 800250e:	f003 030f 	and.w	r3, r3, #15
 8002512:	4a17      	ldr	r2, [pc, #92]	@ (8002570 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002514:	5cd3      	ldrb	r3, [r2, r3]
 8002516:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d010      	beq.n	8002544 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002522:	4b11      	ldr	r3, [pc, #68]	@ (8002568 <HAL_RCC_GetSysClockFreq+0x94>)
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	0c5b      	lsrs	r3, r3, #17
 8002528:	f003 0301 	and.w	r3, r3, #1
 800252c:	4a11      	ldr	r2, [pc, #68]	@ (8002574 <HAL_RCC_GetSysClockFreq+0xa0>)
 800252e:	5cd3      	ldrb	r3, [r2, r3]
 8002530:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a0d      	ldr	r2, [pc, #52]	@ (800256c <HAL_RCC_GetSysClockFreq+0x98>)
 8002536:	fb03 f202 	mul.w	r2, r3, r2
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002540:	617b      	str	r3, [r7, #20]
 8002542:	e004      	b.n	800254e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	4a0c      	ldr	r2, [pc, #48]	@ (8002578 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002548:	fb02 f303 	mul.w	r3, r2, r3
 800254c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	613b      	str	r3, [r7, #16]
      break;
 8002552:	e002      	b.n	800255a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002554:	4b05      	ldr	r3, [pc, #20]	@ (800256c <HAL_RCC_GetSysClockFreq+0x98>)
 8002556:	613b      	str	r3, [r7, #16]
      break;
 8002558:	bf00      	nop
    }
  }
  return sysclockfreq;
 800255a:	693b      	ldr	r3, [r7, #16]
}
 800255c:	4618      	mov	r0, r3
 800255e:	371c      	adds	r7, #28
 8002560:	46bd      	mov	sp, r7
 8002562:	bc80      	pop	{r7}
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	40021000 	.word	0x40021000
 800256c:	007a1200 	.word	0x007a1200
 8002570:	0800267c 	.word	0x0800267c
 8002574:	0800268c 	.word	0x0800268c
 8002578:	003d0900 	.word	0x003d0900

0800257c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002580:	4b02      	ldr	r3, [pc, #8]	@ (800258c <HAL_RCC_GetHCLKFreq+0x10>)
 8002582:	681b      	ldr	r3, [r3, #0]
}
 8002584:	4618      	mov	r0, r3
 8002586:	46bd      	mov	sp, r7
 8002588:	bc80      	pop	{r7}
 800258a:	4770      	bx	lr
 800258c:	20000000 	.word	0x20000000

08002590 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002594:	f7ff fff2 	bl	800257c <HAL_RCC_GetHCLKFreq>
 8002598:	4602      	mov	r2, r0
 800259a:	4b05      	ldr	r3, [pc, #20]	@ (80025b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	0a1b      	lsrs	r3, r3, #8
 80025a0:	f003 0307 	and.w	r3, r3, #7
 80025a4:	4903      	ldr	r1, [pc, #12]	@ (80025b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025a6:	5ccb      	ldrb	r3, [r1, r3]
 80025a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	40021000 	.word	0x40021000
 80025b4:	08002674 	.word	0x08002674

080025b8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b085      	sub	sp, #20
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80025c0:	4b0a      	ldr	r3, [pc, #40]	@ (80025ec <RCC_Delay+0x34>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a0a      	ldr	r2, [pc, #40]	@ (80025f0 <RCC_Delay+0x38>)
 80025c6:	fba2 2303 	umull	r2, r3, r2, r3
 80025ca:	0a5b      	lsrs	r3, r3, #9
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	fb02 f303 	mul.w	r3, r2, r3
 80025d2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80025d4:	bf00      	nop
  }
  while (Delay --);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	1e5a      	subs	r2, r3, #1
 80025da:	60fa      	str	r2, [r7, #12]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d1f9      	bne.n	80025d4 <RCC_Delay+0x1c>
}
 80025e0:	bf00      	nop
 80025e2:	bf00      	nop
 80025e4:	3714      	adds	r7, #20
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bc80      	pop	{r7}
 80025ea:	4770      	bx	lr
 80025ec:	20000000 	.word	0x20000000
 80025f0:	10624dd3 	.word	0x10624dd3

080025f4 <memset>:
 80025f4:	4603      	mov	r3, r0
 80025f6:	4402      	add	r2, r0
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d100      	bne.n	80025fe <memset+0xa>
 80025fc:	4770      	bx	lr
 80025fe:	f803 1b01 	strb.w	r1, [r3], #1
 8002602:	e7f9      	b.n	80025f8 <memset+0x4>

08002604 <__libc_init_array>:
 8002604:	b570      	push	{r4, r5, r6, lr}
 8002606:	2600      	movs	r6, #0
 8002608:	4d0c      	ldr	r5, [pc, #48]	@ (800263c <__libc_init_array+0x38>)
 800260a:	4c0d      	ldr	r4, [pc, #52]	@ (8002640 <__libc_init_array+0x3c>)
 800260c:	1b64      	subs	r4, r4, r5
 800260e:	10a4      	asrs	r4, r4, #2
 8002610:	42a6      	cmp	r6, r4
 8002612:	d109      	bne.n	8002628 <__libc_init_array+0x24>
 8002614:	f000 f81a 	bl	800264c <_init>
 8002618:	2600      	movs	r6, #0
 800261a:	4d0a      	ldr	r5, [pc, #40]	@ (8002644 <__libc_init_array+0x40>)
 800261c:	4c0a      	ldr	r4, [pc, #40]	@ (8002648 <__libc_init_array+0x44>)
 800261e:	1b64      	subs	r4, r4, r5
 8002620:	10a4      	asrs	r4, r4, #2
 8002622:	42a6      	cmp	r6, r4
 8002624:	d105      	bne.n	8002632 <__libc_init_array+0x2e>
 8002626:	bd70      	pop	{r4, r5, r6, pc}
 8002628:	f855 3b04 	ldr.w	r3, [r5], #4
 800262c:	4798      	blx	r3
 800262e:	3601      	adds	r6, #1
 8002630:	e7ee      	b.n	8002610 <__libc_init_array+0xc>
 8002632:	f855 3b04 	ldr.w	r3, [r5], #4
 8002636:	4798      	blx	r3
 8002638:	3601      	adds	r6, #1
 800263a:	e7f2      	b.n	8002622 <__libc_init_array+0x1e>
 800263c:	08002690 	.word	0x08002690
 8002640:	08002690 	.word	0x08002690
 8002644:	08002690 	.word	0x08002690
 8002648:	08002694 	.word	0x08002694

0800264c <_init>:
 800264c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800264e:	bf00      	nop
 8002650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002652:	bc08      	pop	{r3}
 8002654:	469e      	mov	lr, r3
 8002656:	4770      	bx	lr

08002658 <_fini>:
 8002658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800265a:	bf00      	nop
 800265c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800265e:	bc08      	pop	{r3}
 8002660:	469e      	mov	lr, r3
 8002662:	4770      	bx	lr
